%!PS-Adobe-2.0 EPSF-2.0
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 8
%%For: (Kirk S Fielding) (Sun Microsystems, Inc.)
%%Title: (5366.eps)
%%CreationDate: (10/16/01) (10:26 AM)
%%BoundingBox: 17 -159 324 11
%%HiResBoundingBox: 17.4995 -158.8262 323.2646 10.8452
%%DocumentProcessColors: Black
%%DocumentFonts: Helvetica
%%DocumentNeededFonts: Helvetica
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_typography_AI5 1.0 1
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%%AI5_FileFormat 4.0
%%BeginPreview: 306 170 1 170
% 000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000180000000000000000000000000000000000000000000000000000000000000000000000
% 000000240000000200000000000000000000000000000000000000000000000000000000000000
% 000000206746023300000000000000000000000000000000000000000000000000000000000000
% 0000003884A9094A00000000000003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000000000000
% 00000004740F097800000000000001555755555555555555555555555555555540000000000000
% 0000002204A8094200000000000000000100000000000000400000000000000000000000000000
% 0000003CD406093100000000000000000100000000000000400000000000000000000000000000
% 000000000000000000000000000000000000000000000000400000000000000000000000000000
% 000000000000000000000000000000000100000000000000400000000000000000000000000000
% 000000000000000000000000000000000000000000000000400000000000000000000000000000
% 000000000000000000000000000000000100000000000000400000000000000000000000000000
% 000000000000000000000000000000000100000000000000400000000000000000000000000000
% 000000000000000000000000000000000100000000000000400000000000000000000000000000
% 000000000000000000000000000000000100000000000000400000000000000000000000000000
% 000000000000000000000000000000000100000000000000400000000000000000000000000000
% 00000000000AAAAA000000AAAAC000002BAAA80000000002EAAA000000AAAAA000000AAAAC0000
% 000000000010000C0000020000C0000060001C00000000080007000001000060000030000C0000
% 000000000060001A00000C000340000080002C0000000030000D0000020000A0000060001E0000
% 000000000080003200001800064000010000440000000040001100000C00032000008000640000
% 00000000030000C2000020000840000600018C0000000080006100001800062000030000C20000
% 00000000060001820000400010400008000304000000030000C100002000182000040001040000
% 00000000080003020001800060400030000C0C000000060001810000C000302000080002020000
% 000000001000040200020000C0400060001804000000080006010001000040200030000C040000
% 000000007FFFF8020007FFFF004000FFFFF00C0000001FFFFC010003FFFF8020007FFFF8020000
% 000000004000000200040001004000800020040000001000040100020000802000400010040000
% 0000000040000802000400010040008000200C0000000000040100020000802000400010060000
% 000000004FFFC0020005FFFD0040009FFFA00400000017FFE4010002FFFE8020004FFFD0040000
% 000000000800280200050005004000A000A00C0000000400240100028002802000480050020000
% 000000004FFFD0020005FFFD0040009FFFA00400000017FFF4010002FFFE8020005FFFD0040000
% 0000000000000802000400010040008000200C0000001000040100020000802000400010020000
% 000000004000000200040001004000800020040000001000040100020000802000400010040000
% 0000000000000802000400010040008000200C0000000000040100020000802000400010020000
% 000000004000000200040001004000800020040000001000040100020000802000400010040000
% 0000000040000802000400010040008000200C0000000000040100020000802000400010060000
% 000000004000000200040001004000800020040000001000040100020000802000400010040000
% 0000000000000802000400010040008000200C0000000000040100020000802000400010020000
% 000000004000100200040001004000800020040000001000040100020000802000400010040000
% 0000000000000802000400010040008000200C0000001000040100020000802000400010020000
% 000000004000000200040001004000800020040000001000040100020000802000400010040000
% 0000000000000802000400010040008000200C0000000000040100020000802000400010020000
% 000000004000000200040001004000800020040000001000040100020000802000400010040000
% 0000000044924802000492490040008208200C0000000249240100024924802000482090060000
% 000000004492400200049249004000904120040000001249240100024924802000410410040000
% 0000000004924802000492490040008208200C0000000249240100024924802000482090020000
% 000000004492500200049249004000904120040000001249240100024924802000410410040000
% 0000000004924802000492490040009209200C0000001249240100024924802000492090020000
% 000000004492400200049249004000904120040000001249240100024924802000410410040000
% 0000000004924802000492490040008208200C0000000249240100024924802000482090020000
% 000000004492400200049249004000904120040000001249240100024924802000410410040000
% 0000000044924802000492490040008248200C0000000249240100024924802000482490060000
% 000000004492400200049249004000904120040000001249240100024924802000410410040000
% 00000000049248060004924900E0008208200C0000000249240300024924802000482090060000
% 00000000449250090004924901B00090412014000000124924048002492480D0004104100B0000
% 000000000492481080049249021800920920630000001249240840024924818800492090318000
% 000000004492406040049249040800904120C1000000124924102002492482040041041040C000
% 00000000049248C0C0049249081C008208210180000002492460600249248C0E0048209080C000
% 0000000044924101400492493034009041220680000012492480A0024924981C00410411014000
% 0000000044824A024004924940480080002C0D8000000248250320024924A0260040001606C000
% 0000000040000C0D80040001809000800030130000001000060640020000C0480040001C098000
% 0000000040000813000C0001032000800030260000002000040980060000C1B000400008120000
% 00000000800004240018000084C0010000184C0000004000021300040000636000800004640000
% 00000001000002C80030000049800200000DB8000000800001240008000034C001000006D80000
% 00000001000001B00020000033000400000660000000800000D800100000190000000003300000
% 000000000EAAE1600021EABC2C00003EAB82800000008FAAE0B00010FAAA0A00021EABC1600000
% 000000011C00A1C00021801418000430010300000000860050C00010C00A1C00001C0041800000
% 00000000E800AF80002F0012F00002E0016E00000000EC004E80000E8008E80000F800AF000000
% 000000000000800000000010000000000100000000000000400000000008000000000000000000
% 000000000000800000000010000000000100000000000000400000000008000000000080000000
% 000000000000800000000010000000000100000000000000400000000008000000000000000000
% 000000000000800000000010000000000100000000000000400000000008000000000080000000
% 000000000000800000000010000000000100000000000000400000000008000000000000000000
% 000000000000800000000010000000000100000000000000400000000008000000000080000000
% 000000000000800000000010000000000100000000000000400000000008000000000000000000
% 000000000000800000000010000000000000000000000000400000000008000000000080000000
% 000000000000800000000010000000000100000000000000400000000008000000000000000000
% 000000000000800000000010000000000000000000000000400000000008000000000080000000
% 555555555555D5555555555555555555575555550005555555555555555D5555555555D5555540
% 7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8007FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0
% 000000200000000000000000000000000000000000000000000000000000000000000000000000
% 000000200000000002000000000000000000000000000000000000000000000000000000000000
% 000000200000000000000000000000000000000000007140000000000000000000000000000000
% 000000200000000002000000000000000000000000008810000080000000000000000000000000
% 0000002000000000000000000000000000000000000005D19194C5198000000000000000000000
% 000000200000000002000000000000000000000000008512525284A40000000000000000000000
% 000000200000000006000000000000000000000000000513D3D204BD0000000000000000000000
% 000000200000000002000000000000000000000000008912121284A00000000000000000000000
% 000000200000000006000000000000000000000000007111919244988000000000000000000000
% 000000200000000002000000000000000000000000000000000000000000000000000000000000
% 000001755500000017555000000000000000000000000000000000000000000000000000000000
% 000006EEEF800000EEEEF800000000000000000000000000000000000000000000000000000000
% 000018000280000180007000000000000000000000000000000000000000000000000000000000
% 000030000C80000200008800000000000000000000000000000000000000000000000000000000
% 000060001880000400011000000000000000000000000000000000000000000000000000000000
% 000180002080001800061800000000000000000000000000000000000000000000000000000000
% 000100004080006000081000000000000000000000000000000000000000000000000000000000
% 000E0001808000C000300800000000000000000000000000000000000000000000000000000000
% 000FFFFE008001FFFFE01000000000000000000000000000000000000000000000000000000000
% 000800020080010000400800000000000000000000000000000000000000000000000000000000
% 000800020080010000401000000000000000000000000000000000000000000000000000000000
% 000BFFFA0080013FFF400800000000000000000000000000000000000000000000000000000000
% 000A000A0080014001401000000000000000000000000000000000000000000000000000000000
% 000BFFFA0080013FFF401800000000000000000000000000000000000000000000000000000000
% 000800020080010000401000000000000000000000000000000000000000000000000000000000
% 000800020080010000400800000000000000000000000000000000000000000000000000000000
% 000800020080010000401000000000000000000000000000000000000000000000000000000000
% 000800020080010000400800000000000000000000000000000000000000000000000000000000
% 000800020080010000401000000000000000000000000000000000000000000000000000000000
% 000800020080010000400800000000000000000000000000000000000000000000000000000000
% 000800020080010000401000000000000000000000000000000000000000000000000000000000
% 000800020080010000401800000000000000000000000000000000000000000000000000000000
% 000800020080010000401000000000000000000000000000000000000000000000000000000000
% 000800020080010000400800000000000000000000000000000000000000000000000000000000
% 000800020080010000401000000000000000000000000000000000000000000000000000000000
% 000800020080010000400800000000000000000000000000000000000000000000000000000000
% 000800020080010000401000000000000000000000000000000000000000000000000000000000
% 000924920080012082400800000000000000000000000000000000000000000000000000000000
% 000924920080010410401000000000000000000000000000000000000000000000000000000000
% 000924920080012092401800000000000000000000000000000000000000000000000000000000
% 000924920080010410401000000000000000000000000000000000000000000000000000000000
% 000924920080012082400800000000000000000000000000000000000000000000000000000000
% 000924920080010410401000000000000000000000000000000000000000000000000000000000
% 000924920080012482400800000000000000000000000000000000000000000000000000000000
% 000924920080010410401000000000000000000000000000000000000000000000000000000000
% 000924920080012082400800000000000000000000000000000000000000000000000000000000
% 000924920080010410401800000000000000000000000000000000000000000000000000000000
% 0009249203E0012092402800000000000000000000000000000000000000000000000000000000
% 000924920620010410404400000000000000000000000000000000000000000000000000000000
% 000924920818012082418200000000000000000000000000000000000000000000000000000000
% 000924921010010410430300000000000000000000000000000000000000000000000000000000
% 000924922068012482440700000000000000000000000000000000000000000000000000000000
% 00092492C0D0010000481900000000000000000000000000000000000000000000000000000000
% 000800030130010000703600000000000000000000000000000000000000000000000000000000
% 001800030240010000604C00000055555500000000000000000000000000000000000000000000
% 003000010C80020000309800000080000380000000000000000000000000000000000000000000
% 0060000093000400001B3000000000000280000000000000000000000000000000000000000000
% 0040000066000800000EC0000000800002E0000000000000000000000000000000000000000000
% 0043FFF84C00087FFF05800000003F5552E0000000000000000000000000000000000000000000
% 0043802838000870030700000000A0000AA0000000000000000000000000000000000000000000
% 007F002FE00007E007FC00000000000002A0000000000000000000000000000000000000000000
% 0000002000000000020000000000A0000AA0000000000000000000000000000000000000000000
% 0000002000000000060000000000200002A0000000000000000000000000000000000000000000
% 0000002000000000020000000000A0000AA0000000000000000000000000000000000000000000
% 0000002000000000060000000000200002A0000000000000000000000000000000000000000000
% 0000002000000000020000000000A0000AA0000000000000000000000000000000000000000000
% 0000002000000000060000000000000002A0000000000000000000000000000000000000000000
% 0000002000000000020000000000A0000AA0000000000000000000000000000000000000000000
% 0000002000000000000000000000000002A0000000000000000000000000000000000000000000
% 0000002000000000020000000000A0000AA0000000000000000000000000000000000000000000
% 0000002000000000000000000000200002A0000000000000000000000000000000000000000000
% 0000002000000000020000000000A0000AA0000000000000000000000000000000000000000000
% 7FFFFFFFFFFFFFFFFFFFFFFFFFFF200002A0000000000000000000000000000000000000000000
% 0000000000000000000000000000B8000AC0000000000000000000000000000000000000000000
% 000000000000000000000000000001FFD280000000000000000000000000000000000000000000
% 060000000000000000000000000080000280000000000000000000000000000000000000000000
% 08800000000001000000000000001FF00280000000000000000000000000000000000000000000
% 0819D88180E311000000000000000EABFBE0000000000000000000000000000000000000000000
% 07052902012501000000000000001B7FE430000000000000000000000000000000000000000000
% 009D2BE1A008B900000000000000660F98D0000000000000000000000000000000000000000000
% 08A5000044000100000000000001F57C3190000000000000000000000000000000000000000000
% 073D29C39CE8B9000000000000010FFAE210000000000000000000000000000000000000000000
% 00000000000000000000000000010005FC10000000000000000000000000000000000000000000
% 0000000000000000000000000001800FE830000000000000000000000000000000000000000000
% 00000000000000000000000000017F0FE840000000000000000000000000000000000000000000
% 000000000000000000000000000100BFE880000000000000000000000000000000000000000000
% 0000000000000000000000000001C0005900000000000000000000000000000000000000000000
% 0000000000000000000000000001FFA00A00000000000000000000000000000000000000000000
% 00000000000000000000000000000017CC00000000000000000000000000000000000000000000
% 000000000000000000000000000000003C00000000000000000000000000000000000000000000
%%EndPreview
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%CMYKProcessColor: 1 1 1 1 ([Registration])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 18 0 0 0 0 0 0 0 0 131071 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 183.499 -119.0996 183.499 -119.0996
%AI3_TileBox: -113.5005 -470.0986 478.499 267.9014
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 612 792
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI8_OpenToView: -38.001 12.4004 2.5 1018 725 18 1 1 3 40 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:-113.5005 -470.0986
%%AI3_PaperRect:-9 783 603 -9
%%AI3_Margin:9 -40 -9 9
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI7_Thumbnail: 128 72 8
%%BeginData: 9204 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD8BFFA87DFD7EFF7DA8A87DFF7D7DA87D7DFF7DA87D7DFD17FF52
%7D527D527D5252527D527D527D527D527D527D527D527D527D527D527D52
%52527D527D527D527D527D527D527D527D527D527D527D527D527D52FD1F
%FF7D7DA87DFF7DA87D7D7DFF7DA87DA8FD1EFF7DFD17FF7DFD67FFA8FD17
%FFA8FD39FFA8F3A8F3A8F3A8F3A8F3A8F3A8F3A8F3A8F3A8F3A8F3A8F3A8
%F3A8F3A8F3A8F3A8F3A8F3A8F3A8F3A8F3A8F3A8F37DF3A8F3A8F3A8F3A8
%F3A8FD0DFF7DFD3AFFFD2DF3A8FD09F3FD0EFFA8FD39FFA8F3A8F3A8F3A8
%A87DA87DA87DA8527DA8F3A8F3A8F3A8F3A8A87DA87DA87DA8527DA8F3A8
%F3A8F3A8F3A8FF7DA87DA87DA87D7D27F3A8F3A8FD0BFF7DA87DA87DA87D
%A852FD09FF7DA87DA87DA87D7D52FD09FFA8A87DA87DA87DA827FD10FFFD
%04F3A8A8FD06FFA8FFA8FD08F3A8FD06FFA8A8A8FD08F3A8A8FD06FFA8FF
%A8F3F3F3FD0BFFA8FD06FFA8A8A8FD08FFA8FD06FFA8A8A8FD08FFA8FD07
%FFA8A8FD0FFFA8F3A8F37DA8FD06FF7DA8FFA8A8F3A8F3A8F37DA8FD06FF
%7DFFFFA8A8F3A8F3A8F37DA8FD06FF7DA8FFFF52F3A8F3FD09FFA8A8FD05
%FFA8A8FFFF7DFD06FFA8A8FD06FFA8A8FF7DFD06FFA8A8FD06FFA8A8FF7D
%FD10FFF3F3F3A8A8A87DA8A8A87DFFFFFF7DFD06F3A87DA8A8A87DA87DFF
%FFFFA8FD06F3A8A8A87DA8A8A852FD04FFA8F3F3F3FD08FFA87DA87DA8A8
%A87DA8FFFFFFA8FD06FF7DA8A8A87DA8A87DFFFFFFA8FD06FF7DA87DA8A8
%A87DA8FFFFFFA8FD0FFFA8F3A8F352FD057D52A8FFFFFFA8A8F3A8F3A8F3
%FD067D527DFFFFFFA8A8F3A8F3A8F3FD087DFD04FF52F3A8F3A8FD07FF7D
%A8FD057DA87DFFFFFF7DFD05FF7DA8FD057DA87DFFFFFF7DFD06FFA8FD07
%7DFFFFFF7DFD10FFF3F3F3A8FD077DFFFFFFA8FD06F3A852FD067DFFFFFF
%A8FD06F3A852FD057D52FD04FFA8F3F3F3FD08FFA8FD077DA8FFFFFFA8FD
%05FFA8A8FD067DA8FFFFFFA8FD06FFFD067D52A8FFFFFFA8FD0FFFA8F3A8
%F37DFD06FFA8FFFFFFA8A8F3A8F3A8F37DFD06FFA8FFFFFFA8A8F3A8F3A8
%F37DFD06FF7DFD04FF52F3A8F3A8FD07FF7DFD07FF7DFFFFFF7DFD05FF7D
%FD07FF7DFFFFFF7DFD06FFA8FD06FF7DFFFFFF7DFD10FFF3F3F3A8FD06FF
%7DFFFFFFA8FD06F3A8FD06FF52FFFFFF7DFD06F3A8FD06FF7DFD04FFA8F3
%F3F3FD08FFA8FD07FFA8FFFFFFA8FD05FFA8FD07FFA8FFFFFFA8FD06FF7D
%FD06FFA8FFFFFFA8FD0FFFA8F3A8F37DFD06FFA8FFFFFFA8A8F3A8F3A8F3
%7DFD06FF7DFFFFFFA8A8F3A8F3A8F37DFD06FF7DFD04FF52F3A8F3A8FD07
%FF7DFD07FF7DFFFFFF7DFD05FF7DFD07FF7DFFFFFF7DFD06FFA8FD06FF7D
%FFFFFF7DFD10FFF3F3F3A8FD06FF7DFFFFFFA8FD06F3A8FD06FF7DFFFFFF
%A8FD06F3A8FD06FF7DFD04FFA8F3F3F3FD08FFA8FD07FFA8FFFFFFA8FD05
%FFA8FD07FFA8FFFFFFA8FD06FFA8FD06FFA8FFFFFFA8FD0FFFA8F3A8F37D
%FFA8FFFFFFA8A8FFFFFFA8A8F3A8F3A8F37DFFA8FFA8FFA87DFFFFFFA8A8
%F3A8F3A8F37DFFA8FFA8FFA8A8FD04FF52F3A8F3FD08FF7DFFA8FFA8FFFF
%FF7DFFFFFF7DFD05FF7DFFA8FFA8FFA8FF7DFFFFFF7DFD06FFA8A8FFA8FF
%A8FF7DFFFFFF7DFD10FFF3F3F3A8A8A87DFFA8A87DFFFFFF7DFD06F3A87D
%A8FFA87DA87DFFFFFFA8FD06F3A8A8A8FFA8A8A852FD04FFA8F3F3F3FD08
%FFA8FFA87DA8A8FF7DA8FFFFFFA8FD05FFA8FFA8A8A8FFA8A8A8FFFFFFA8
%FD06FFA8A87DA8FFA87DA8FFFFFFA8FD0FFFA8F3A8F37DA87DA8FFA87DA8
%FFFFFFA8A8F3A8F3A8F37DA87DFF7DA87D7DFFFFFFA8A8F3A8F3A8F37DA8
%7DFF7DA87D7DFD04FF52F3A8F3A8FD07FF7DFF7DA87DA8FFA87DFFFFFF7D
%FD05FF7DFF7DA87DFF7DA87DFFFFFF7DFD06FFA87DA87DFF7DA87DFFFFFF
%7DFD10FFF3F3F3FD04A8FFA8A87DFFFFFFA8FD06F3A8A8A8FFA8A8A87DFF
%FFFFA8FD06F3A8A8A8FFA8A8A87DFD04FFA8F3F3F3FD08FFA8FFFD04A8FF
%A8A8FFFFFFA8FD05FFA8FFA8A8A8FFA8A8A8FFFFFFA8FD06FFFD04A8FFA8
%A8A8FFFFFFA8FD0FFFA8F3A8F37DA87DA8FFA87DA8FFFFFFA8A8F3A8F3A8
%F37DA87DFF7DA87DA8FFFFFFA8A8F3A8F3A8F37DA87DFF7DA87D7DFD04FF
%52F3A8F3A8FD07FF7DFF7DA87DA8FFA87DFFFFFF7DFD05FF7DFF7DA87DFF
%7DA87DFFFFFF7DFD06FFA87DA87DFF7DA87DFFFFFF7DFD10FFF3F3F3A87D
%A8A8FF7DA87DFFFFFFA8A8FD05F3A8A8A8FFA8A8A852FFFFFF7DA8FD05F3
%A87DA8FFA87DA87DFFFFFFA8A8F3F3F3FD08FFA8FFA8A8A87DFFA8A8FFFF
%A8A87DFD04FFA8FFA87DA8FFA87DA8FFFFA8A87DFD05FF7DA8A8A8FFA8A8
%A8FFFFA8A87DFD0EFFA8F3A8F37DA87DA8FFA87DA8FFA8A8FF7D7DA8F3A8
%F37DA87DFF7DA87D7DFFFFA8FFA8A8A8F3A8F37DA87DFF7DA87D7DFFA8A8
%FFA852A8F3A8FD07FF7DFF7DA87DA8FFA87DFF7DFFFF7DFD04FF7DFF7DA8
%7DFF7DA87DFF7DA8FFA852FD04FFA87DA87DFF7DA87DFFA8FFFFA852FD0E
%FFF3F3F3A8A8FFA8FFA8FF7DA8FFFFA8FF52FD04F3A8A8A8FFFFA8A87DFF
%A8FFA8FF7DFD04F3A8A8FFFFA8A8FF7DA8A8FFA8A87DF3F3FD08FFA8FFFF
%A8A8A8FFA8A8A8FFFFA87DFD04FFA8FFA8A8FFFFFD04A8FFFFFF7DA8FD04
%FFA8FFA8A8FFFFA8A8A8FFFFA8A8A8FD0DFFA8F3A8A8A8FD06FF7DA8FF7D
%FF7DF3A8F3A8A8A8FD06FF7D7DFFA8A87DF3A8F3A8FFA8FD07FF7DFFA8FF
%7DA8A8F3FD08FF7DFD07FF52FFFD04A8FD04FF7DFD07FF52FFFFA87DA8FD
%04FFA8A8FD06FF52FFFFA87DA8FD0FFFF3A8A8FD08FFA87DA852FD04F3FF
%A8FD08FFA87DFF7DFD05F37DFD09FF7DFF7DFD04F3FD07FF7DFD09FF7DA8
%7DFD05FFA8FD09FF7DA8A8FD05FFA8FD09FF7DA8A8A8FD0FFFA8F37DA827
%7D52A87DA827A87D7D7DF3A8F3A8F37DA87D5252A87DA827A87D7D52F3A8
%F3A8F3A87D7D5252A87DA8527D7D7D52F3A8F3A8F3A8FD06FF7D7D7D52A8
%7DA852FD047DFD06FFA87D7D52A87DA852FD047DFD06FFA87D7D52A87DA8
%7D527DA852FD12FFFD09F3A8FD11F3A8FD11F3A8FD09F3FD0EFFA8FD11FF
%A8FD12FFA8FD14FFA8F3A8F3A8F3A8F3A8F37DF3A8F3A8F3A8F3A8F3A8F3
%A8F3A8F3A8F37DF3A8F3A8F3A8F3A8F3A8F3A8F3A8F3A8F37DF3A8F3A8F3
%A8F3A8F3A8FD0DFF7DFD11FF7DFD12FFA8FD15FFFD09F3A8FD11F3A8FD11
%F3A8FD09F3FD0EFFA8FD11FFA8FD12FFA8FD1EFF7DFD11FF7DFD11FF7DFD
%17FF7DFD11FF7DFD12FFA8FD0AFF7D527D527D527D527D527D527D527D52
%7D527D527D527D527D527D527D527D527D527D527D527D527D527D527D52
%7D527D527D527D527D5252527D527D527D527D527DA8FD04FFA8527D527D
%527D5252527D527D527D527D527D527D527D527D5252527D527D527D527D
%527D527D527D527D527D527D527D527D527D527D527DA87DA87DA87DA87D
%A852A87DA87DA87DA87DA87DA87DA87DA87DA87D7D7DA87DA87DA87DA87D
%A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8FD
%04FFA8A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8
%7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8FD0A
%FFA8FD12FF7DFD2CFF7D7DFFA8A8FD32FFA87DA87DA87DA87DA852A87DA8
%7DA87DA87DA87DA87DA87DA87DA87D7D7DA87DA87DA87DA87DFD23FF7DFF
%7D7D7DFF52FD057D52FFFF7D7DA852A8FD23FF7DFD08EB7DFD12EB52FD09
%EBFD23FF7D7DFF7DA8FFA87DA87DA87D7DFFFF7DA8A87DFD24FFA87DEBEB
%EB7DEBEB7D277D527D527D52EB7DEBEBEB7DEBEBEB7D7D527D527D527D27
%EBEBEB7DFD5AFFA8FD05EB52A8FD06FF7D7DFD08EB7DA8FD06FF7D7DFD04
%EBFD5AFFA8EBEB7DEB52A8FD06FF7DFF7DEBEBEB7DEBEBEB52A8FD06FF7D
%FF7DEB7DEBEBFD5AFFA8EBEBEB7DFD07FFA8FFFFA8FD06EB7DFD07FF7DFF
%FFA8FD04EBFD5AFFA8EBEB27A87DA87DA87DA852FFFFFF7DEBEBEB7DEBEB
%7D7DA87DA87DA852FFFFFF7DEB7DEBEBFD5AFF7DEBEB7DA8FD067DA8FFFF
%FFA8FD06EBA8FD057D52A8FFFFFFA8FD04EBFD5AFFA87DEB52FF7DA87DA8
%7DA87DFFFFFF7DEB7DEBEBEB7DA87DA87DA87DA87DFFFFFF7DEBEBEB7DFD
%5AFF7DEBEB7DFD07FFA8FFFFFFA8FD06EBA8FD06FFA8FFFFFFA8FD04EBFD
%5AFFA87DEB52FD07FF7DFFFFFF7DEB7DEBEBEB7DA8FD06FF7DFFFFFF7DEB
%EBEB7DFD5AFFA8EBEB7DFD07FFA8FFFFFFA8FD06EB7DFD06FFA8FFFFFFA8
%FD04EBFD5AFFA8EBEB52FD07FF7DFFFFFF7DEBEBEB7DEBEBA8FD06FF7DFF
%FFFF7DEB7DEBEBFD5AFFA8EBEB7DFFFFA8FFFFFFA8A8FFFFFFA8FD06EBA8
%FFA8FFFFFFA8A8FFFFFFA8FD04EBFD5AFFA8EBEB52FF7DA87DFF7DA87DFF
%FFFF7DEBEBEB7DEBEBA87DA87DFF7DA87DFFFFFF7DEB7DEBEBFD5AFF7DEB
%EB7DFFA8A8A8FFA8A8A8FFFFFFA8FD06EBA8A87DA8FFA87DA8FFFFFFA8FD
%04EBFD5AFFA87DEB52FF7DA87DFF7DA87DFFFFFF7DEB7DEBEBEB7DA87DA8
%7DFF7DA87DFFFFFF7DEBEBEB7DFD5AFF7DEBEB7DFFA8A8A8FFA8A8A8FFFF
%FFA8FD06EBFD04A8FFA8A8A8FFFFFFA87DEBEBEBFD5AFFA87DEB52FF7DA8
%7DFF7DA87DFFFFA8A87D7DEBEBEB7DA87DA87DFF7DA87DFFFFA8A8A87DEB
%7DFD5AFFA8EBEB7DFFA87DA8FFA87DA8FFA8FFFFA87DFD04EB7DA8A8A8FF
%A8A8A8FFA8FFFFA87DEBEBFD5AFFA8EBEB52FFA8A8A8FFA8A852A8FFFF7D
%A827EB7DEBEBA8A8FFA8FFA8FF52A8FFFF7DA827EBEBFD5AFFA8EBEBA8FD
%08FFA8FFA8A87DFD04EBA8FD07FFA8A8FFA8A852EBEBEBFD07FFA87DFD07
%A87D7DFD48FFA8EB7DFFFF52A87DA87DA8FFFF527D7DEBEBEB7D7DFFFF27
%A87DA87DA8FFA87DA87DEB7DEBEBFD07FF7DA87DA87DA87DA87DFF527DFD
%47FF7DEB7DA827A8EBEBEB7D7DA87DA8FD06EB52A8A8A8FD04EB27A8A87D
%FD06EBFD07FFA8A8FD07F3A87D7DFD47FFA87DEBEBEB7DEBEBEB52EBEBEB
%7DEBEBEB7DEBEBEB7DEBEBEB7DEBEB7D7DEBEBEB7DEBEBEB7DFD07FF7DA8
%A8F3A8F3A8F3A8A852A8FD47FF7DFD08EB7DFD12EB52FD09EBFD07FFA8A8
%FD07F3A87DA8FD47FFA87DEBEBEB7DEBEBEB52EBEBEB7DEBEBEB7DEBEBEB
%7DEBEBEB7DEBEB7D7DEBEBEB7DEBEBEB7DFD07FF7DA8A8F3A8F3A8F3A8A8
%52A8FD50FFA8FD12FFA8FD10FFA87DFD07F37D7DA8FD46FFFD0A27F8FD23
%2752A8A8F3A8F3A8F3A8A852A8FD74FFA8A8A87DA87DA87DA8A87DA8FD48
%FF7DA8FD0DFFA8FD04FFA8FD17FFA8A82752527D7DA827A827A87DFD47FF
%A8A8FF52A87DA8A87D7DFF52FFA8A852A87DA8527DFD17FFA8A8FF52A852
%A852FFA8FF7DA8FD47FFFD057DA8FFA87DA8FFFD067DA87D7D7DFD17FF52
%A87DA87DA8527D27A87DFF7DFD73FFA87DA87DA87D7D52A87DFF7DFD74FF
%52A87DA8A8FF7D7D7DA87DFD79FFA87DA8A87D52FDC7FFFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI5 1.0 1
%%Title: (Typography Operators)
%%Version: 1.0 1
%%CreationDate:(6/10/1996) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI5 68 dict dup begin
put
/initialize
{
 begin
 begin
	Adobe_typography_AI5 begin
	Adobe_typography_AI5
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
 end
 end
	Adobe_typography_AI5 begin
} def
/terminate
{
	currentdict Adobe_typography_AI5 eq
	{
	 end
	} if
} def
/modifyEncoding
{
	/_tempEncode exch ddef
	/_pntr 0 ddef
	{
		counttomark -1 roll
		dup type dup /marktype eq
		{
			pop pop exit
		}
		{
			/nametype eq
			{
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				/_pntr exch ddef
			} ifelse
		} ifelse
	} loop
	_tempEncode
} def
/havefont
{
	systemdict /languagelevel known
		{
		/Font resourcestatus dup
			{ exch pop exch pop }
		if
		}
		{
		systemdict /FontDirectory get 1 index known
			{ pop true }
			{
			systemdict /fileposition known
				{
				dup length 6 add exch
				Ss 6 250 getinterval
				cvs pop
				Ss exch 0 exch getinterval
				status
					{ pop pop pop pop true }
					{ false }
				ifelse
				}
				{
				pop false
				}
			ifelse
			}
		ifelse
		}
	ifelse
} def
/TE
{
	StandardEncoding 256 array copy modifyEncoding
	/_nativeEncoding exch def
} def
/subststring {
	exch 2 index exch search
	{
		exch pop
		exch dup () eq
		{
			pop exch concatstring
		}
		{
			3 -1 roll
			exch concatstring
			concatstring
		} ifelse
		exch pop true
	}
	{
		pop pop false
	} ifelse
} def
/concatstring {
	1 index length 1 index length
	1 index add
	string
	dup 0 5 index putinterval
	dup 2 index 4 index putinterval
	4 1 roll pop pop pop
} def
%
/TZ
{
	dup type /arraytype eq
	{
		/_wv exch def
	}
	{
		/_wv 0 def
	} ifelse
	/_useNativeEncoding exch def
	2 index havefont
	{
		3 index
		255 string
		cvs
		
		dup
		(_Symbol_)
		eq
		{
			pop
			2 index
			findfont
			
		}
		{
			1 index 0 eq
			{
				dup length 1 sub
				1 exch
				getinterval
				
				cvn
				findfont
			}
			{
				pop 2 index findfont
			} ifelse
		} ifelse
	}
	{
		dup 1 eq
		{
			2 index 64 string cvs
			dup (-90pv-RKSJ-) (-83pv-RKSJ-) subststring
			{
				exch pop dup havefont
				{
					findfont false
				}
				{
					pop true
				} ifelse
			}
			{
				pop	dup
				(-90ms-RKSJ-) (-Ext-RKSJ-) subststring
				{
					exch pop dup havefont
					{
						findfont false
					}
					{
						pop true
					} ifelse
				}
				{
					pop pop true
				} ifelse
			} ifelse
			{
				1 index 1 eq
				{
					/Ryumin-Light-Ext-RKSJ-V havefont
					{/Ryumin-Light-Ext-RKSJ-V}
					{/Courier}
					ifelse
				}
				{
					/Ryumin-Light-83pv-RKSJ-H havefont
					{/Ryumin-Light-83pv-RKSJ-H}
					{/Courier}
					ifelse
				} ifelse
				findfont
				[1 0 0.5 1 0 0] makefont
			} if
		}
		{
			/Courier findfont
		} ifelse
	} ifelse
	_wv type /arraytype eq
	{
		_wv makeblendedfont
	} if
	dup length 10 add dict
 begin
	mark exch
	{
		1 index /FID ne
		{
			def
		} if
		cleartomark mark
	} forall
	pop
	/FontScript exch def
	/FontDirection exch def
	/FontRequest exch def
	/FontName exch def
	counttomark 0 eq
	{
		1 _useNativeEncoding eq
		{
			/Encoding _nativeEncoding def
		} if
		cleartomark
	}
	{
		/Encoding load 256 array copy
		modifyEncoding /Encoding exch def
	} ifelse
	FontName currentdict
 end
	definefont pop
} def
/tr
{
	_ax _ay 3 2 roll
} def
/trj
{
	_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
	/Tx
	{
		dup
		currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
	} ddef
	/Tj
	{
		dup
		currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
	} ddef
} def
/a1
{
W B
} def
/e0
{
	/Tx
	{
		tr _psf
	} ddef
	/Tj
	{
		trj _pjsf
	} ddef
} def
/e1
{
W F 
} def
/i0
{
	/Tx
	{
		tr sp
	} ddef
	/Tj
	{
		trj jsp
	} ddef
} def
/i1
{
	W N
} def
/o0
{
	/Tx
	{
		tr sw rmoveto
	} ddef
	/Tj
	{
		trj swj rmoveto
	} ddef
} def
/r0
{
	/Tx
	{
		tr _ctm _pss
	} ddef
	/Tj
	{
		trj _ctm _pjss
	} ddef
} def
/r1
{
W S
} def
/To
{
	pop _ctm currentmatrix pop
} def
/TO
{
	iTe _ctm setmatrix newpath
} def
/Tp
{
	pop _tm astore pop _ctm setmatrix
	_tDict begin
	/W
	{
	} def
	/h
	{
	} def
} def
/TP
{
 end
	iTm 0 0 moveto
} def
/Tr
{
	_render 3 le
	{
		currentpoint newpath moveto
	} if
	dup 8 eq
	{
		pop 0
	}
	{
		dup 9 eq
		{
			pop 1
		} if
	} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm
{
	_ctm setmatrix _tm concat
	_shift aload pop _lineorientation 1 eq { exch } if translate
	_scale aload pop _lineorientation 1 eq _yokoorientation 1 eq or { exch } if scale
} def
/Tm
{
	_tm astore pop iTm 0 0 moveto
} def
/Td
{
	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
	_render -1 eq
	{
	}
	{
		_renderEnd _render get dup null ne
		{
			load exec
		}
		{
			pop
		} ifelse
	} ifelse
	/_render -1 ddef
} def
/Ta
{
	pop
} def
/Tf
{
	1 index type /nametype eq
	{
		dup 0.75 mul 1 index 0.25 mul neg
	} if
	/_fontDescent exch ddef
	/_fontAscent exch ddef
	/_fontSize exch ddef
	/_fontRotateAdjust _fontAscent _fontDescent add 2 div neg ddef
	/_fontHeight _fontSize ddef
	findfont _fontSize scalefont setfont
} def
/Tl
{
	pop neg 0 exch
	_leading astore pop
} def
/Tt
{
	pop
} def
/TW
{
	3 npop
} def
/Tw
{
	/_cx exch ddef
} def
/TC
{
	3 npop
} def
/Tc
{
	/_ax exch ddef
} def
/Ts
{
	0 exch
	_shift astore pop
	currentpoint
	iTm
	moveto
} def
/Ti
{
	3 npop
} def
/Tz
{
	count 1 eq { 100 } if
	100 div exch 100 div exch
	_scale astore pop
	iTm
} def
/TA
{
	pop
} def
/Tq
{
	pop
} def
/Tg
{
	pop
} def
/TG
{
	pop
} def
/Tv
{
	/_lineorientation exch ddef
} def
/TV
{
	/_charorientation exch ddef
} def
/Ty
{
	dup /_yokoorientation exch ddef 1 sub neg Tv
} def
/TY
{
	pop
} def
/T~
{
	Tx
} def
/Th
{
	pop pop pop pop pop
} def
/TX
{
	pop
} def
/Tk
{
	_fontSize mul 1000 div
	_lineorientation 0 eq { neg 0 } { 0 exch } ifelse
	rmoveto
	pop
} def
/TK
{
	2 npop
} def
/T*
{
	_leading aload pop
	_lineorientation 0 ne { exch } if
	Td
} def
/T*-
{
	_leading aload pop
	_lineorientation 0 ne { exch } if
	exch neg exch neg
	Td
} def
/T-
{
	_ax neg 0 rmoveto
	_lineorientation 1 eq _charorientation 0 eq and { 1 TV _hyphen Tx 0 TV } { _hyphen Tx } ifelse
} def
/T+
{
} def
/TR
{
	_ctm currentmatrix pop
	_tm astore pop
	iTm 0 0 moveto
} def
/TS
{
	currentfont 3 1 roll
	/_Symbol_ findfont _fontSize scalefont setfont
	
	0 eq
	{
		Tx
	}
	{
		Tj
	} ifelse
	setfont
} def
/Xb
{
	pop pop
} def
/Tb /Xb load def
/Xe
{
	pop pop pop pop
} def
/Te /Xe load def
/XB
{
} def
/TB /XB load def
currentdict readonly pop
end
setpacking
%
/X^
{
	currentfont 5 1 roll
	dup havefont
		{
		findfont _fontSize scalefont setfont
		}
		{
		pop
		exch
		} ifelse
	2 index 0 eq
	{
		Tx
	}
	{
		Tj
	} ifelse
	pop	pop
	setfont
} def
/T^	/X^	load def
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Helvetica
userdict /_useSmoothShade false put
userdict /_aicmykps true put
userdict /_forceToCMYK true put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI55J_Tsume: None
%AI3_BeginEncoding: _Helvetica Helvetica
[/_Helvetica/Helvetica 0 0 1 TZ
%AI3_EndEncoding AdobeType
[161/degree 173/notequal 176/infinity/plusminus/lessequal/greaterequal
181/mu/partialdiff/summation/product/pi/integral 189/Omega 
195/radical 197/approxequal 198/Delta 214/divide/lozenge 240/apple
/_Symbol_/Symbol 0 0 0 TZ
%AI5_BeginPalette
0 0 Pb
1 1 1 1 ([Registration]) 0 Xs
([Registration]) Pc
PB
%AI5_EndPalette
%AI5_Begin_NonPrinting
Np
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (Art Brush Tool)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (Art Brush Tool)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Undo New Calligraphic Brush) (Calligraphic Brush Tool)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool)
%AI5_End_NonPrinting--
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 0 79 128 255 0 50 Lb
(Layer 1) Ln
0 A
0 R
0 G
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
17.5117 -141.0039 m
129.062 -141.0039 l
S
1 Ap
0 O
0.65 g
110.2061 -135.0107 m
20.5146 -135.0107 L
20.5146 -73.7954 L
110.2061 -73.7954 L
110.2061 -135.0107 L
f
0 Ap
0 R
0 G
0.5 w
87.0503 -141.0146 m
87.0503 -67.7959 l
S
43.7178 -141.0146 m
43.7178 -67.7959 l
S
210.3809 -67.8027 m
210.3809 5.416 l
S
297.0732 -67.8027 m
297.0732 -53.7871 l
S
253.7324 -67.8027 m
253.7324 -53.7871 l
S
1 Ap
0 O
0.85 g
1 w
175.209 -61.7939 m
42.1743 -61.7939 L
42.1743 -0.5781 L
175.209 -0.5781 L
175.209 -61.7939 L
f
0 Ap
0 R
0 G
0.5 w
152.0542 -67.8027 m
152.0542 5.416 l
S
0 To
1 0 0 1 41.7441 2.4663 0 Tp
0 Tv
TP
0 Tr
0 O
0 g
1 w
%_ 0 50 XQ
/_Helvetica 9 8.379 -2.0251 Tf
0 Ts
100 100 Tz
0 Tt
%_0 0 100 100 Xu
%AI55J_GlyphSubst: GlyphSubstNone 
0 TA
%_ 0 XL
0 TY
0 TV
36 0 Xb
XB
0 0 5 TC
100 100 200 TW
25 TG
0 0 0 Ti
0 Ta
0 1 2 2 3 Th
0 Tq
240 Tg
10 0 Tl
0 Tc
0 Tw
(Same net) Tx 
(\r) TX 
TO
0 To
1 0 0 1 20.0591 -150.6582 0 Tp
0 Tv
TP
0 Tr
(Same subnet) Tx 
(\r) TX 
TO
0 To
1 0 0 1 192.4639 -77.3804 0 Tp
0 Tv
TP
0 Tr
(Different net) Tx 
(\r) TX 
TO
-8008.001 111.4004 m
8375 111.4004 L
(N) *
-0.0005 8072.3999 m
-0.0005 -8310.5996 L
(N) *
-8008.001 -248.5996 m
8375 -248.5996 L
(N) *
359.999 8072.3999 m
359.999 -8310.5996 L
(N) *
u
u
u
u
u
1 Ap
0 O
1 g
0 R
0 G
1 j 0.5 w
150.9243 -157.6641 m
149.9536 -158.5703 L
149.9575 -157.3945 L
150.9204 -156.4863 L
150.9243 -157.6641 L
b
/BBAccumRotation (-0.121842) XT
149.9614 -158.5762 m
147.0806 -158.2109 L
147.0845 -157.207 L
149.9556 -157.4102 L
149.9614 -158.5762 L
b
/BBAccumRotation (-0.121842) XT
U
u
156.3989 -152.1895 m
155.4282 -153.0957 L
155.4321 -151.9199 L
156.395 -151.0117 L
156.3989 -152.1895 L
b
/BBAccumRotation (-0.121842) XT
155.436 -153.1016 m
152.5552 -152.7363 L
152.5591 -151.7324 L
155.4302 -151.9355 L
155.436 -153.1016 L
b
/BBAccumRotation (-0.121842) XT
U
u
132.0991 -155.4219 m
131.1284 -156.3281 L
131.1323 -155.2969 L
131.6304 -155.3516 L
132.0991 -155.4219 L
b
/BBAccumRotation (-0.121842) XT
131.1362 -156.3184 m
128.2554 -155.9551 L
128.2593 -154.9492 L
131.1304 -155.2891 L
131.1362 -156.3184 L
b
/BBAccumRotation (-0.121842) XT
U
u
u
u
u
0 Ap
1 J
149.6724 -151.9414 m
149.6724 -157.6289 L
156.397 -151.2852 L
156.397 -146.5508 L
149.6313 -151.3926 L
149.6724 -151.9414 L
b
U
149.6724 -151.416 m
156.4126 -146.5547 L
156.4282 -146.5039 156.3208 -146.4609 156.2563 -146.4551 C
138.4995 -144.7285 L
138.437 -144.7266 138.3901 -144.7559 138.3413 -144.7949 C
128.3472 -149.1953 L
128.3472 -149.2109 L
149.6724 -151.416 L
b
149.6001 -155.0254 m
149.6372 -155.0293 149.6665 -155 149.6665 -154.9609 C
149.6646 -151.4727 L
149.6646 -151.4316 149.6372 -151.3965 149.6001 -151.3926 C
128.3491 -149.1973 L
128.3179 -149.1934 128.2905 -149.2227 128.2905 -149.2598 C
128.2905 -152.5371 L
128.2905 -152.5742 128.3179 -152.6074 128.3491 -152.6113 C
149.6001 -155.0254 L
b
0 J 0 j
147.647 -152.4102 m
147.6548 -152.4102 147.6646 -152.416 147.6704 -152.4238 C
147.6782 -152.4316 147.6821 -152.4414 147.6821 -152.4512 C
147.6821 -153.3711 L
147.6821 -153.4023 147.6528 -153.4063 147.6431 -153.4063 C
147.2739 -153.4141 146.5845 -153.375 145.9087 -153.3262 c
145.2349 -153.2754 144.5767 -153.2148 144.2603 -153.1797 c
143.9419 -153.1445 143.2876 -153.0625 142.6255 -152.9688 c
141.9653 -152.873 141.2954 -152.7656 140.9399 -152.6777 C
140.9302 -152.6758 140.9028 -152.666 140.9028 -152.6367 C
140.9028 -151.7344 L
140.9028 -151.7246 140.9067 -151.7148 140.9126 -151.709 C
140.9185 -151.7031 140.9282 -151.6992 140.936 -151.7012 C
147.647 -152.4102 L
b
u
1 J 1 j
147.0903 -149.8926 m
133.7827 -148.3574 L
133.7827 -148.3574 L
135.4155 -147.3164 140.0845 -145.582 141.395 -145.168 C
151.229 -146.3027 L
147.0903 -149.8926 L
b
u
153.5688 -126.5527 m
155.4673 -126.3086 L
155.4673 -141.1621 L
153.4048 -143.5664 L
B
153.5688 -126.5527 m
155.4673 -126.3086 L
153.5142 -126.2969 L
B
u
0.25 w
151.4106 -145.9434 m
151.4106 -146.377 151.811 -146.752 152.4927 -146.3574 c
153.1743 -145.9609 153.6548 -145.0742 153.6548 -144.6406 C
153.6548 -124.1016 L
153.6548 -123.668 153.1743 -123.3359 152.4927 -123.7246 c
151.811 -124.1152 151.4106 -124.9551 151.4106 -125.3887 C
151.4106 -145.9434 L
b
0.5 w
129.2534 -144.4727 m
129.0972 -144.4199 129.0249 -144.2031 129.0249 -144.0176 C
129.0249 -125.0742 L
129.0249 -124.6758 129.396 -123.9023 130.0229 -123.541 c
130.2729 -123.3984 130.4937 -123.3613 130.6694 -123.3945 C
153.0728 -123.5527 153.0747 -123.5527 V
153.4321 -123.5586 153.6548 -123.8066 153.6548 -124.1016 C
153.6548 -144.6406 L
153.6548 -145.0742 153.1743 -145.9609 152.4927 -146.3574 c
152.2251 -146.5117 152.0024 -146.5469 151.8286 -146.5078 C
149.8696 -146.3867 147.7759 -146.2344 145.8032 -146.082 c
143.8091 -145.9277 141.936 -145.7715 140.438 -145.6406 c
138.9565 -145.5117 137.146 -145.3477 135.269 -145.166 c
133.4194 -144.9863 130.9839 -144.6699 129.2534 -144.4727 C
b
151.4106 -145.9434 m
151.4106 -146.377 151.811 -146.752 152.4927 -146.3574 c
153.1743 -145.9609 153.6548 -145.0742 153.6548 -144.6406 C
153.6548 -124.1016 L
153.6548 -123.668 153.1743 -123.3359 152.4927 -123.7246 c
151.811 -124.1152 151.4106 -124.9551 151.4106 -125.3887 C
151.4106 -145.9434 L
b
146.5493 -147.3418 m
146.5493 -147.5469 145.9653 -147.9258 145.6958 -147.9629 c
144.7603 -148.0898 143.1782 -148.0293 142.4751 -147.9629 c
141.7759 -147.8984 140.4009 -147.6836 139.5015 -147.3906 c
139.2437 -147.3066 139.1245 -147.0957 139.1245 -146.8965 C
B
0.85 g
139.7651 -143.0098 m
137.6479 -142.8477 133.603 -142.5195 131.0796 -142.2617 C
131.0444 -142.2578 131.0171 -142.2227 131.0171 -142.1816 C
131.0171 -127.2305 L
131.0171 -127.1895 131.0444 -127.1563 131.0796 -127.1563 C
133.519 -127.2734 137.7417 -127.3848 139.7651 -127.4277 c
141.8208 -127.4707 146.3208 -127.5449 149.0396 -127.5332 C
149.0786 -127.5332 149.1099 -127.5703 149.1099 -127.6133 C
149.1099 -143.5508 L
149.1099 -143.5938 149.0786 -143.627 149.0396 -143.625 C
146.2271 -143.4824 141.9165 -143.1738 139.7651 -143.0098 c
b
1 g
147.4653 -147.1895 m
146.5649 -147.2324 141.0532 -146.9375 139.8599 -146.8203 C
138.6812 -146.7227 133.4604 -146.0488 132.646 -145.8574 C
132.646 -144.873 L
135.271 -145.1367 137.8647 -145.373 139.8599 -145.5469 c
141.8872 -145.7207 144.606 -145.9434 147.4653 -146.1523 C
B
147.4653 -147.1895 m
148.5513 -146.2871 L
147.7329 -146.2246 L
147.6294 -146.2207 147.5396 -146.1953 147.4653 -146.1504 C
B
U
U
U
U
U
U
149.6587 -155.0176 m
128.2769 -152.6055 L
128.2769 -152.8848 L
128.2769 -155.0723 L
128.2827 -155.2051 L
149.4692 -157.7344 L
149.5063 -157.7383 149.6724 -157.668 149.6724 -157.6289 C
149.6587 -155.0176 L
b
U
1 Ap
0 J 0 j 1 w
156.3579 -123.4238 m
128.2144 -123.4238 L
128.2144 -158.5957 L
156.3579 -158.5957 L
156.3579 -123.4238 L
n
U
U
U
u
u
u
0 R
0 G
2 J 0.5 w
82.5356 -48.0342 m
82.5356 -45.5049 l
79.1128 -42.0186 L
79.1128 -6.7393 L
S
0 O
1 g
1 j
50.9927 -14.2705 m
50.9927 -49.7881 L
48.1948 -52.8213 l
48.1948 -55.8037 L
53.2095 -55.8037 L
53.2095 -53.8193 l
67.1938 -53.8193 l
67.1938 -55.8037 L
72.7241 -55.8037 L
72.7241 -53.2744 l
69.2388 -49.7881 L
69.2388 -14.335 L
B
0 J 0 j
82.5063 -48.0205 m
72.7202 -55.79 L
B
1 j
69.0972 -14.0947 m
50.9751 -14.0947 L
61.0669 -6.5654 L
79.1313 -6.5654 L
69.0972 -14.0947 L
b
u
0.75 g
0 j
67.1938 -19.1104 m
53.2153 -19.1104 L
53.2153 -17.1182 L
67.1938 -17.1182 L
67.1938 -19.1104 L
b
0 Ap
1 J
54.2563 -32.0967 m
54.2563 -48.0498 l
S
57.2563 -32.0967 m
57.2563 -48.0498 l
S
60.2563 -32.0967 m
60.2563 -48.0498 l
S
63.2563 -32.0967 m
63.2563 -48.0498 l
S
66.2563 -32.0967 m
66.2563 -48.0498 l
S
U
1 Ap
0 J 1 w
82.5288 -6.5713 m
48.186 -6.5713 L
48.186 -55.7998 L
82.5288 -55.7998 L
82.5288 -6.5713 L
n
0 O
1 g
0 R
0 G
1 j 0.5 w
79.1089 -42.021 m
79.1089 -6.7417 L
79.1274 -6.5679 L
69.0933 -14.0972 L
69.2349 -14.3374 L
69.2349 -49.7905 L
72.7202 -53.2769 L
72.7202 -55.8062 L
72.7163 -55.7925 L
82.5024 -48.0229 L
82.5317 -48.0366 L
82.5317 -45.5073 L
79.1089 -42.021 L
b
0 j
82.5132 -45.4932 m
72.7271 -53.2627 L
S
69.2417 -49.7783 m
79.0278 -42.0068 L
S
U
0 O
1 g
2 J 1 j
55.7495 -53.8184 m
53.2104 -53.8184 l
53.2104 -55.8027 L
53.2251 -55.8174 L
55.7651 -53.8184 L
55.7495 -53.8184 L
b
U
u
u
0 j
125.8794 -48.0342 m
125.8794 -45.5049 l
122.4565 -42.0186 L
122.4565 -6.7393 L
S
0 O
1 g
1 j
94.3364 -14.2705 m
94.3364 -49.7881 L
91.5386 -52.8213 l
91.5386 -55.8037 L
96.5532 -55.8037 L
96.5532 -53.8193 l
110.5376 -53.8193 l
110.5376 -55.8037 L
116.0679 -55.8037 L
116.0679 -53.2744 l
112.5825 -49.7881 L
112.5825 -14.335 L
B
0 J 0 j
125.8501 -48.0205 m
116.064 -55.79 L
B
1 j
112.4409 -14.0947 m
94.3188 -14.0947 L
104.4106 -6.5654 L
122.4751 -6.5654 L
112.4409 -14.0947 L
b
u
0.75 g
0 j
110.5376 -19.1104 m
96.5591 -19.1104 L
96.5591 -17.1182 L
110.5376 -17.1182 L
110.5376 -19.1104 L
b
0 Ap
1 J
97.6001 -32.0967 m
97.6001 -48.0498 l
S
100.6001 -32.0967 m
100.6001 -48.0498 l
S
103.6001 -32.0967 m
103.6001 -48.0498 l
S
106.6001 -32.0967 m
106.6001 -48.0498 l
S
109.6001 -32.0967 m
109.6001 -48.0498 l
S
U
1 Ap
0 J 1 w
125.8726 -6.5713 m
91.5298 -6.5713 L
91.5298 -55.7998 L
125.8726 -55.7998 L
125.8726 -6.5713 L
n
0 O
1 g
0 R
0 G
1 j 0.5 w
122.4526 -42.021 m
122.4526 -6.7417 L
122.4712 -6.5679 L
112.437 -14.0972 L
112.5786 -14.3374 L
112.5786 -49.7905 L
116.064 -53.2769 L
116.064 -55.8062 L
116.0601 -55.7925 L
125.8462 -48.0229 L
125.8755 -48.0366 L
125.8755 -45.5073 L
122.4526 -42.021 L
b
0 j
125.8569 -45.4932 m
116.0708 -53.2627 L
S
112.5854 -49.7783 m
122.3716 -42.0068 L
S
U
0 O
1 g
2 J 1 j
99.0933 -53.8184 m
96.5542 -53.8184 l
96.5542 -55.8027 L
96.5688 -55.8174 L
99.1089 -53.8184 L
99.0933 -53.8184 L
b
U
u
u
0 j
169.2231 -48.0342 m
169.2231 -45.5049 l
165.8003 -42.0186 L
165.8003 -6.7393 L
S
0 O
1 g
1 j
137.6802 -14.2705 m
137.6802 -49.7881 L
134.8823 -52.8213 l
134.8823 -55.8037 L
139.897 -55.8037 L
139.897 -53.8193 l
153.8813 -53.8193 l
153.8813 -55.8037 L
159.4116 -55.8037 L
159.4116 -53.2744 l
155.9263 -49.7881 L
155.9263 -14.335 L
B
0 J 0 j
169.1938 -48.0205 m
159.4077 -55.79 L
B
1 j
155.7847 -14.0947 m
137.6626 -14.0947 L
147.7544 -6.5654 L
165.8188 -6.5654 L
155.7847 -14.0947 L
b
u
0.75 g
0 j
153.8813 -19.1104 m
139.9028 -19.1104 L
139.9028 -17.1182 L
153.8813 -17.1182 L
153.8813 -19.1104 L
b
0 Ap
1 J
140.9438 -32.0967 m
140.9438 -48.0498 l
S
143.9438 -32.0967 m
143.9438 -48.0498 l
S
146.9438 -32.0967 m
146.9438 -48.0498 l
S
149.9438 -32.0967 m
149.9438 -48.0498 l
S
152.9438 -32.0967 m
152.9438 -48.0498 l
S
U
1 Ap
0 J 1 w
169.2163 -6.5713 m
134.8735 -6.5713 L
134.8735 -55.7998 L
169.2163 -55.7998 L
169.2163 -6.5713 L
n
0 O
1 g
0 R
0 G
1 j 0.5 w
165.7964 -42.021 m
165.7964 -6.7417 L
165.8149 -6.5679 L
155.7808 -14.0972 L
155.9224 -14.3374 L
155.9224 -49.7905 L
159.4077 -53.2769 L
159.4077 -55.8062 L
159.4038 -55.7925 L
169.1899 -48.0229 L
169.2192 -48.0366 L
169.2192 -45.5073 L
165.7964 -42.021 L
b
0 j
169.2007 -45.4932 m
159.4146 -53.2627 L
S
155.9292 -49.7783 m
165.7153 -42.0068 L
S
U
0 O
1 g
2 J 1 j
142.437 -53.8184 m
139.8979 -53.8184 l
139.8979 -55.8027 L
139.9126 -55.8174 L
142.4526 -53.8184 L
142.437 -53.8184 L
b
U
U
u
u
u
0 j
60.876 -121.251 m
60.876 -118.7217 l
57.4531 -115.2354 L
57.4531 -79.9565 L
S
0 O
1 g
1 j
29.333 -87.4878 m
29.333 -123.0049 L
26.5352 -126.0381 l
26.5352 -129.0205 L
31.5498 -129.0205 L
31.5498 -127.0361 l
45.5342 -127.0361 l
45.5342 -129.0205 L
51.0645 -129.0205 L
51.0645 -126.4912 l
47.5791 -123.0049 L
47.5791 -87.5522 L
B
0 J 0 j
60.8467 -121.2373 m
51.0605 -129.0068 L
B
1 j
47.4375 -87.312 m
29.3154 -87.312 L
39.4072 -79.7827 L
57.4717 -79.7827 L
47.4375 -87.312 L
b
u
0.75 g
0 j
45.5342 -92.3276 m
31.5557 -92.3276 L
31.5557 -90.3354 L
45.5342 -90.3354 L
45.5342 -92.3276 L
b
0 Ap
1 J
32.5967 -105.3135 m
32.5967 -121.2666 l
S
35.5967 -105.3135 m
35.5967 -121.2666 l
S
38.5967 -105.3135 m
38.5967 -121.2666 l
S
41.5967 -105.3135 m
41.5967 -121.2666 l
S
44.5967 -105.3135 m
44.5967 -121.2666 l
S
U
1 Ap
0 J 1 w
60.8691 -79.7886 m
26.5264 -79.7886 L
26.5264 -129.0166 L
60.8691 -129.0166 L
60.8691 -79.7886 L
n
0 O
1 g
0 R
0 G
1 j 0.5 w
57.4492 -115.2383 m
57.4492 -79.959 L
57.4678 -79.7852 L
47.4336 -87.3145 L
47.5752 -87.5547 L
47.5752 -123.0078 L
51.0605 -126.4941 L
51.0605 -129.0234 L
51.0566 -129.0098 L
60.8428 -121.2402 L
60.8721 -121.2539 L
60.8721 -118.7246 L
57.4492 -115.2383 L
b
0 j
60.8535 -118.71 m
51.0674 -126.4795 L
S
47.582 -122.9951 m
57.3682 -115.2236 L
S
U
0 O
1 g
2 J 1 j
34.0898 -127.0361 m
31.5508 -127.0361 l
31.5508 -129.0205 L
31.5654 -129.0342 L
34.1055 -127.0361 L
34.0898 -127.0361 L
b
U
u
u
0 j
104.2197 -121.251 m
104.2197 -118.7217 l
100.7969 -115.2354 L
100.7969 -79.9565 L
S
0 O
1 g
1 j
72.6768 -87.4878 m
72.6768 -123.0049 L
69.8789 -126.0381 l
69.8789 -129.0205 L
74.8936 -129.0205 L
74.8936 -127.0361 l
88.8779 -127.0361 l
88.8779 -129.0205 L
94.4082 -129.0205 L
94.4082 -126.4912 l
90.9229 -123.0049 L
90.9229 -87.5522 L
B
0 J 0 j
104.1904 -121.2373 m
94.4043 -129.0068 L
B
1 j
90.7813 -87.312 m
72.6592 -87.312 L
82.751 -79.7827 L
100.8154 -79.7827 L
90.7813 -87.312 L
b
u
0.75 g
0 j
88.8779 -92.3276 m
74.8994 -92.3276 L
74.8994 -90.3354 L
88.8779 -90.3354 L
88.8779 -92.3276 L
b
0 Ap
1 J
75.9404 -105.3135 m
75.9404 -121.2666 l
S
78.9404 -105.3135 m
78.9404 -121.2666 l
S
81.9404 -105.3135 m
81.9404 -121.2666 l
S
84.9404 -105.3135 m
84.9404 -121.2666 l
S
87.9404 -105.3135 m
87.9404 -121.2666 l
S
U
1 Ap
0 J 1 w
104.2129 -79.7886 m
69.8701 -79.7886 L
69.8701 -129.0166 L
104.2129 -129.0166 L
104.2129 -79.7886 L
n
0 O
1 g
0 R
0 G
1 j 0.5 w
100.793 -115.2383 m
100.793 -79.959 L
100.8115 -79.7852 L
90.7773 -87.3145 L
90.9189 -87.5547 L
90.9189 -123.0078 L
94.4043 -126.4941 L
94.4043 -129.0234 L
94.4004 -129.0098 L
104.1865 -121.2402 L
104.2158 -121.2539 L
104.2158 -118.7246 L
100.793 -115.2383 L
b
0 j
104.1973 -118.71 m
94.4111 -126.4795 L
S
90.9258 -122.9951 m
100.7119 -115.2236 L
S
U
0 O
1 g
2 J 1 j
77.4336 -127.0361 m
74.8945 -127.0361 l
74.8945 -129.0205 L
74.9092 -129.0342 L
77.4492 -127.0361 L
77.4336 -127.0361 L
b
U
U
u
u
0 j
227.5557 -48.0342 m
227.5557 -45.5049 l
224.1318 -42.0186 L
224.1318 -6.7393 L
S
0 O
1 g
1 j
196.0127 -14.2705 m
196.0127 -49.7881 L
193.2148 -52.8213 l
193.2148 -55.8037 L
198.2295 -55.8037 L
198.2295 -53.8193 l
212.2139 -53.8193 l
212.2139 -55.8037 L
217.7441 -55.8037 L
217.7441 -53.2744 l
214.2588 -49.7881 L
214.2588 -14.335 L
B
0 J 0 j
227.5264 -48.0205 m
217.7393 -55.79 L
B
1 j
214.1162 -14.0947 m
195.9941 -14.0947 L
206.0859 -6.5654 L
224.1514 -6.5654 L
214.1162 -14.0947 L
b
u
0.75 g
0 j
212.2139 -19.1104 m
198.2354 -19.1104 L
198.2354 -17.1182 L
212.2139 -17.1182 L
212.2139 -19.1104 L
b
0 Ap
1 J
199.2764 -32.0967 m
199.2764 -48.0498 l
S
202.2764 -32.0967 m
202.2764 -48.0498 l
S
205.2764 -32.0967 m
205.2764 -48.0498 l
S
208.2764 -32.0967 m
208.2764 -48.0498 l
S
211.2764 -32.0967 m
211.2764 -48.0498 l
S
U
1 Ap
0 J 1 w
227.5479 -6.5713 m
193.2061 -6.5713 L
193.2061 -55.7998 L
227.5479 -55.7998 L
227.5479 -6.5713 L
n
0 O
1 g
0 R
0 G
1 j 0.5 w
224.1279 -42.021 m
224.1279 -6.7417 L
224.1475 -6.5679 L
214.1123 -14.0972 L
214.2549 -14.3374 L
214.2549 -49.7905 L
217.7393 -53.2769 L
217.7393 -55.8062 L
217.7354 -55.7925 L
227.5225 -48.0229 L
227.5518 -48.0366 L
227.5518 -45.5073 L
224.1279 -42.021 L
b
0 j
227.5322 -45.4932 m
217.7471 -53.2627 L
S
214.2607 -49.7783 m
224.0479 -42.0068 L
S
U
0 O
1 g
2 J 1 j
200.7686 -53.8184 m
198.2305 -53.8184 l
198.2305 -55.8027 L
198.2441 -55.8174 L
200.7852 -53.8184 L
200.7686 -53.8184 L
b
U
u
u
0 j
270.8984 -48.0342 m
270.8984 -45.5049 l
267.4766 -42.0186 L
267.4766 -6.7393 L
S
0 O
1 g
1 j
239.3564 -14.2705 m
239.3564 -49.7881 L
236.5576 -52.8213 l
236.5576 -55.8037 L
241.5732 -55.8037 L
241.5732 -53.8193 l
255.5566 -53.8193 l
255.5566 -55.8037 L
261.0869 -55.8037 L
261.0869 -53.2744 l
257.6025 -49.7881 L
257.6025 -14.335 L
B
0 J 0 j
270.8691 -48.0205 m
261.083 -55.79 L
B
1 j
257.46 -14.0947 m
239.3389 -14.0947 L
249.4307 -6.5654 L
267.4941 -6.5654 L
257.46 -14.0947 L
b
u
0.75 g
0 j
255.5566 -19.1104 m
241.5781 -19.1104 L
241.5781 -17.1182 L
255.5566 -17.1182 L
255.5566 -19.1104 L
b
0 Ap
1 J
242.6191 -32.0967 m
242.6191 -48.0498 l
S
245.6191 -32.0967 m
245.6191 -48.0498 l
S
248.6191 -32.0967 m
248.6191 -48.0498 l
S
251.6191 -32.0967 m
251.6191 -48.0498 l
S
254.6191 -32.0967 m
254.6191 -48.0498 l
S
U
1 Ap
0 J 1 w
270.8916 -6.5713 m
236.5488 -6.5713 L
236.5488 -55.7998 L
270.8916 -55.7998 L
270.8916 -6.5713 L
n
0 O
1 g
0 R
0 G
1 j 0.5 w
267.4727 -42.021 m
267.4727 -6.7417 L
267.4902 -6.5679 L
257.4561 -14.0972 L
257.5977 -14.3374 L
257.5977 -49.7905 L
261.083 -53.2769 L
261.083 -55.8062 L
261.0791 -55.7925 L
270.8652 -48.0229 L
270.8945 -48.0366 L
270.8945 -45.5073 L
267.4727 -42.021 L
b
0 j
270.877 -45.4932 m
261.0898 -53.2627 L
S
257.6055 -49.7783 m
267.3916 -42.0068 L
S
U
0 O
1 g
2 J 1 j
244.1123 -53.8184 m
241.5732 -53.8184 l
241.5732 -55.8027 L
241.5889 -55.8174 L
244.1279 -53.8184 L
244.1123 -53.8184 L
b
U
u
u
0 j
314.2432 -48.0342 m
314.2432 -45.5049 l
310.8193 -42.0186 L
310.8193 -6.7393 L
S
0 O
1 g
1 j
282.7002 -14.2705 m
282.7002 -49.7881 L
279.9023 -52.8213 l
279.9023 -55.8037 L
284.917 -55.8037 L
284.917 -53.8193 l
298.9014 -53.8193 l
298.9014 -55.8037 L
304.4316 -55.8037 L
304.4316 -53.2744 l
300.9463 -49.7881 L
300.9463 -14.335 L
B
0 J 0 j
314.2139 -48.0205 m
304.4268 -55.79 L
B
1 j
300.8037 -14.0947 m
282.6816 -14.0947 L
292.7734 -6.5654 L
310.8389 -6.5654 L
300.8037 -14.0947 L
b
u
0.75 g
0 j
298.9014 -19.1104 m
284.9229 -19.1104 L
284.9229 -17.1182 L
298.9014 -17.1182 L
298.9014 -19.1104 L
b
0 Ap
1 J
285.9639 -32.0967 m
285.9639 -48.0498 l
S
288.9639 -32.0967 m
288.9639 -48.0498 l
S
291.9639 -32.0967 m
291.9639 -48.0498 l
S
294.9639 -32.0967 m
294.9639 -48.0498 l
S
297.9639 -32.0967 m
297.9639 -48.0498 l
S
U
1 Ap
0 J 1 w
314.2354 -6.5713 m
279.8936 -6.5713 L
279.8936 -55.7998 L
314.2354 -55.7998 L
314.2354 -6.5713 L
n
0 O
1 g
0 R
0 G
1 j 0.5 w
310.8154 -42.021 m
310.8154 -6.7417 L
310.835 -6.5679 L
300.7998 -14.0972 L
300.9424 -14.3374 L
300.9424 -49.7905 L
304.4268 -53.2769 L
304.4268 -55.8062 L
304.4229 -55.7925 L
314.21 -48.0229 L
314.2393 -48.0366 L
314.2393 -45.5073 L
310.8154 -42.021 L
b
0 j
314.2197 -45.4932 m
304.4346 -53.2627 L
S
300.9482 -49.7783 m
310.7354 -42.0068 L
S
U
0 O
1 g
2 J 1 j
287.4561 -53.8184 m
284.918 -53.8184 l
284.918 -55.8027 L
284.9316 -55.8174 L
287.4727 -53.8184 L
287.4561 -53.8184 L
b
U
0 Ap
0 J 0 j 1 w
17.4995 -67.792 m
178.2026 -67.792 l
S
0.5 w
65.3623 -67.8027 m
65.3623 -53.7871 l
S
108.7036 -67.8027 m
108.7036 -53.7871 l
S
1 w
323.2646 -67.792 m
190.2021 -67.792 l
S
134.6787 5.4268 m
276.0234 5.4268 l
S
17.4839 -8310.5996 m
(N) *
17.4839 8072.3999 m
(N) *
42.1714 -8311.0371 m
(N) *
42.1714 8071.9634 m
(N) *
193.1865 -8310.5996 m
(N) *
193.1865 8072.3999 m
(N) *
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_typography_AI5 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
