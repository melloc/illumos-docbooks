%!PS-Adobe-2.0 EPSF-2.0
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 9.0
%%For: (Keith  Yarwood) (Sun Microsystems, Inc.)
%%Title: (basic-leased.eps)
%%CreationDate: 1/26/01 12:44 PM
%%BoundingBox: -212 -206 150 59
%%HiResBoundingBox: -211.1377 -205.9385 149.3555 58.4077
%%DocumentProcessColors: Black
%%DocumentFonts: Helvetica
%%DocumentNeededFonts: Helvetica
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_typography_AI5 1.0 1
%%+ procset AGM_Gradient 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%%AI5_FileFormat 4.0
%%BeginPreview: 360 264 1 264
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000C0000200000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000C0001A00030000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000C7BDDEF78F0000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000C7FFFEFF830000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000CCFFFB9FC30000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000CCEFFB9CC30000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000FFFFFEFCC30000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000FFBDEEF4C30000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800000000000000000000000000000000000000000000000
% 800000000000000000000000000000000000000000800000000000000000000000000000000000000000000000
% 800000000000000000000000000000000000000000800000000000000000000000000000000000000000000000
% 800000000000000000000000000000000000000000800000000000000000000000000000000000000000000000
% 800000000000000000000000000000000000000000800000000000000000000000000000000000000000000000
% 800000000000000000000000000000000000000000800000000000000000000000000000000000000000000000
% 800000000000000000000000000000000000000000800000000000000000000000000000000000000000000000
% 8000000000000000000000000007C0006000000000800000000000000000000000000000000000000000000000
% 8000000000000000000000000007C0006000000000800000000000000000000000000000000000000000000000
% 8000000000000000000000000006F7F7FFBFEFDBC0800000000000000000000000000000000000000000000000
% 8000000000000000000000000007FFFFFFFFFFDFC0800000000000000000000000000000000000000000000000
% 8000000000000000000000000003FFBFEF6F7BDB80800000000000000000000000000000000000000000000000
% 800000000000000000000000000EFFBDEF6F7BFFC0800000000000000000000000000000000000000000000000
% 8000000000000000000000000007CDBFEF7F7F7FC0800000000000000000000000000000000000000000000000
% 80000000000000000000000000039DB76F3B6E7B80800000000000000000000000000000000000000000000000
% 800000000000000000000000000018000000000000800000000000000000000000000000000000000000000000
% 800000000000000000000000006018000000000000800000000000000000000000000000000000000000000000
% 800000000000000000000000018400008000000000800000000000000000000000000000000000000000000000
% 80000000000000000000000006040C018000000000800000000000000000000000000000000000000000000000
% 8000000000000000000000000805FFEFFBDE000000800000000000000000000000000000000000000000000000
% 8000000000000000000000003005FFEFFFFE000000800000000000000000000000000000000000000000000000
% 8000000000000000000000004005BFEDFF7F000000800000000000000000000000000000000000000000000000
% 800000000001FFFFFFFFFFE180053FE9FFFF000000800000000000000000000000000000000000000000000000
% 80000000000100000000002100053FE9FFFE000000800000000000000000000000000000000000000000000000
% 800000000001000000000020000537C9BDDE000000800000000000000000000000000000000000000000000000
% 800000000001000F8000003C000000000000000000800000000000000000000000000000000000000000000000
% 800000000001000FF8DE0024000000000000000000800000000000000000000000000000000000000000000000
% 800000000001000FFFFE0024000000000000000000800000000001FFFFFFFFFFF0000000000000000000000000
% 800000000001000FFFFC0024000000000000000000800000000001000000000010000000000000000000000000
% 800000000001000C7FF80024000000000000000000800000000001000000000010000000000000000000000000
% 800000000001000C7FF80024000000000000000000800000000001000000000010000000000000000000000000
% 800000000001000C7DF80024000000000000000000800000000001000000000010000000000000000000000000
% 800000000001000000000024000000000000000000800000000001000000000010000000000000000000000000
% 800000000001000000000024000000000000000000800000000001001F84000010000000000000000000000000
% 800000003FFF000000000027FFFFFE000000000000800000000001001F84000010000000000000000000000000
% 8000000020010180030060240000020000000000008000000000010006F5EF0010000000000000000000000000
% 80000000200103776FBBE0240000020000000000008000000000010006FDFF0010000000000000000000000000
% 800000002001037FEFFFB0240000020000000000008000000000010007FFBB0010000000000000000000000000
% 800000002001037DEF7FB0240000020000000000008000000000010007FF7B0010000000000000000000000000
% 800000002001036DEF7F30240000020000000000008000000000010006F5FF0010000000000000000000000000
% 800000002001036FFFFF30240000020000000000008000000000010006F5EE0010000000000000000000000000
% 800000002001036F7DFB7024000002000000000000800000000001000000000010000000000000000000000000
% 800000002001018000006024000002000000000000800000000001000000000010000000000000000000000000
% 80000000200101800000603C000002000000000000800000000001000000C00010000000000000000000000000
% 800000002001000000000020000002000000000000800000000001000003C00010000000000000000000000000
% 80000000200100000000002000000200000000000080000000000101FE7FFBFC10000000000000000000000000
% 800000002001FFFFFFFFFFE000000200000000000080000000000103FE7FFFFC10000000000000000000000000
% 800000002000000000000000000002000000000000800000000001037CCFDFF810000000000000000000000000
% 800000002000000000000000000002000000000000800001FCFE7F0378EFDFF010000000000000000000000000
% 80000000200000000000000000000200000000000080000000000103F87FDFF010000000000000000000000000
% 80000000200000000000000000000200000000000080000000000101D839DBB010000000000000000000000000
% 800000002000000000000000000002000000000000800002000001000000000010000000000000000000000000
% 800000002000000000000000000002000000000000800002000001000000000010000000000000000000000000
% 8000000020000000000000000000020000000000008000020000010000018C0010000000000000000000000000
% 8000000020000000000000000000020000000000008000020000010000018C0010000000000000000000000000
% 80000000200000000000000000000200000000000080000200000107DFF7FFDC10000000000000000000000000
% 80000000200000000000000000000200000000000080000200000107DFF7FFFC10000000000000000000000000
% 8000000FA000000000000000000002000000000000800002000001067E7FEFF810000000000000000000000000
% 80000078F00000000000000000000200000000000080000000000106F6FDEFF810000000000000000000000000
% 800000C03FFC00000000000000000200000000000080000000000107D7DDFFF810000000000000000000000000
% 800001800C0780000000000000000200000000000080000200000107938DBDD810000000000000000000000000
% 800003000000E00000000000000002000000000000800002000001060000000010000000000000000000000000
% 800006000000300000000000000002000000000000800002000001060000000010000000000000000000000000
% 80000C000000180000000000000002000000000000800002000001000000000010000000000000000000000000
% 800018000000080000000000000002000000000000800002000001000000000010000000000000000000000000
% 8000100000000C0000000000000002000000000000800002000001000000000010000000000000000000000000
% 800030000000040000000000000002000000000000800002000001000000000010000000000000000000000000
% 800020000000040000000000000002000000000000800000000001000000000010000000000000000000000000
% 800060000000040000000000000002000000000000800000000001000000000010000000000000000000000000
% 803FC0000000040000000000000002000000000000800002000001FFFFFFFFFFF0000000000000000000000000
% 80E0000000000C0000000000000002000000000000800002000000000000000000000000000000000000000000
% 8180000000000C0000000000000002000000000000800002000000000000000000000000000000000000000000
% 8100000000000F0000000000000002000000000000800002000000000000000000000000000000000000000000
% 8307C000000301C000000000000002000000000000800002000000000000000000000000000000000000000000
% 8207E4321093306000000000000002000000000000800002000000000000000000000000000000000000000000
% 82067FFF7BFFF83000000000000002000000000000800002000000000000000000000000000000000000000000
% 820C1BEFEFFBF81800000000000002000000000000800000000000000000000000000000000000000000000000
% 820E7BC9CF7BFC0800000000000002000000000000800000000000000000000000000000000000000000000000
% 8207FBCFFF7BFC0C00000000000002000000000000800002000000000000000000000000000000000000000000
% 8207DFCF7B7FF80400000000000002000000000000800002000000000000000000000000000000000000000000
% 820000080000000400000000000002000000000000800002000000000000000000000000000000000000000000
% 820000080000000400000000000002000000000000800002000000000000000000000000000000000000000000
% 82000000000000040000000000001FC00000000000800002000000000000000000000000000000000000000000
% 820000180004000400000000000010400000000000800002000000000000000000000000000000000000000000
% 82001098020C000400000000000010400000000000800002000000000000000000000000000000000000000000
% 82007FFEDFFD800400000000000010400000000000800000000000000000000000000000000000000000000000
% 83007FFBFDF7800C00000000000010400000000000800000000000000000000000000000000000000000000000
% 81006FFBFDE7000800000000000010400000000000800002000000000000000000000000000000000000000000
% 81006FFBFFE7800800000000000010400000000000800002000000000000000000000000000000000000000000
% 81006FFFE7E5C01800000000000010400000000000800002000000000000000000000000000000000000000000
% 818000000000001000000000000010400000000000800002000000000000000000000000000000000000000000
% 80C000000000003000000000000010400000000000800002000000000000000000000000000000000000000000
% 804000000000006000000000000010400000000000800002000000000000000000000000000000000000000000
% 807000E0000000C000000000000010400000000000800002000000000000000000000000000000000000000000
% 801C0FA00000018000000000000010400000000000800000000000000000000000000000000000000000000000
% 8007F8300000030000000000000010400000000000800000000000000000000000000000000000000000000000
% 8000001800039E0000000000000010400000000000800002000000000000000000000000000000000000000000
% 8000000C000FF00000000000000010400000000000800002000000000000000000000000000000000000000000
% 800000060018000000000000000010400000000000800002000000000000000000000000000000000000000000
% 8000000380F0000000000000000010400000000000800002000000000000000000000000000000000000000000
% 80000000FF8000000000000000001FC00000000000800002000000000000000000000000000000000000000000
% 800000000000000000000000000002000000000000800002000000000000000000000000000000000000000000
% 8000000000000000000000000000C2000000000000800002000000000000000000000000000000000000000000
% 800000000000000000000000000302000000000000800000000000000000000000000000000000000000000000
% 800000000000F00018000000000402000000000000800000000000000000000000000000000000000000000000
% 800000000001F80018000000001802000000000000800002000000000000000000000000000000000000000000
% 800000000001FEFDFF7F7BDBF02002000000000000800002000000000000000000C0000F000780000000000000
% 800000000001F6FFFF7FFFFBF0C002000000000000800002000000000000000000C39DFF7787C0000000000000
% 800000000000FFFFBB79FF7BF30002000000000000800002000000000000000000C7FFFFFFCDC0000000000000
% 8000000000019BB7B959EF7FFA0002000000000000800002000000000000000000C6FFEFDEC380000000000000
% 800000000001FBB7F94FEFFFF80002000000000000800002000000000000000000C6F7EFDEC700000000000000
% 800000000000F337F94F6FDFF00002000000000000800002000000000000000000FFFFFFFECFC0000000000000
% 800000000000070000000000000002000000000000800000000000000000000000FBDDFF7ECFC0000000000000
% 800000000000060000000000000002000000000000800000000000000000000000000000000000000000000000
% 80000000000000000001E000C00002000000000000800002000000000000000000000000000000000000000000
% 80000000000000000001E000F0000200000000000080000200003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
% 800000000000000003BDE37EF80002000000000000800002000020000000000000000000000000000000000000
% 800000000000000007FFE37FF80002000000000000800002000020000000000000000000000000000000000000
% 800000000000000007FFE37FF0000200000000000080001FE00020000000000000000000000000000000000000
% 800000000000000006FFE3FBF0000200000000000080001FE00020000000000000000000000000000000000000
% 800000000000000007FFE3FBF8000200000000000080000FC00020000000000000000000000000000000000000
% 8000000000000000039FE3FBD80002000000000007F0000F8001FC000000000000000000000000000000000000
% 800000000000000000000000000002000000000004100007800104000000000000000000000000000000000000
% 800000000000000000000000000002000000000004100003000104000000000000000000000000000000000000
% 800000000000000000000000000003FFFFFFFFFFFC1FFFFFFFFF07FFFFFFFFFFFFFFFFFFF80000000000000000
% 800000000000000000000000000000000000000004100000000104000000000000000000080000000000000000
% 800000000000000000000000000000000000000004100000000104000000000000000000080000000000000000
% 800000000000000000000000000000000000000007F100000011FC000000000000000000080000000000000000
% 800000000000000000000000000000000000000000810000001020000000000000000000080000000000000000
% 800000000000000000000000000000000000000060810F7BDEF0210000000000000000007F0000000000000000
% 800000000000000000000000000000000000000080810F7BFFF021800000000000000000410000000000000000
% 800000000000000000000000000000000000000300811FFBFFB020400000000000000000410000000000000000
% 800000000000000000000000000000000600400400811FFFFFB020300180100000000000410000000000000000
% 8000000000000000000000000000000006E340180081FFFFFFF0200C0180100000000000410000000000000000
% 8000000000000000000000000000000007FFDC600081FF3FDCF0200201FFFE0000000000410000000000000000
% 8000000000000000000000000000000007FFF880008000000000200181FFFC0000000000410000000000000000
% 8000000000000000000000000000000037FC798000800000000020006DFF1C0000000000410000000000000000
% 800000000000000000000000000000003FFFD800008003C0000020000FFFFE0000000000410000000000000000
% 800000000000000000000000000000001FFFDC00008003C0000020000FFFF60000000000410000000000000000
% 8000000000000000000000000000000000000000008003FEF00020000200000000000000410000000000000000
% 8000000000000000000000000000000000000000008003FEF00020000000000000000000410000000000000000
% 8000000000000000000000000000000000000000008003F7F80020000000000000000000410000000000000000
% 8000000000000000000000000000000000000000008003F3F80020000000000000000000410000000000000000
% 8000000000000000000000000000000000000000008003F2F00020000000000000000000410000000000000000
% FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8003F2F00020000000000000000000410000000000000000
% 000000000000000000000000000000000000000000000000000020000000000000000000410000000000000000
% 000000000000000000000000000000000000000000000000000020000000000000000000410000000000000000
% 0000000000000000000000000000000000000000000000000000200000000000000000007F0000000000000000
% 000000000000000000000000000000000000000000000000000020000000000000000003080000000000000000
% 00000000000000000000000000000000000000000000000000002000000000000000000C080000000000000000
% 000000000000000000000000000000000000000000000000000020038000000000000030080000000000000000
% 00000000000000000000000000000000000000000000000000002007C000600000000040080000000000000000
% 00000000000000000000000000000000000000000000000000002007F3E77BBBCEDB8180080000000000000000
% 00000000000000000000000000000000000000000000000000002007B7FFFFFFFFDFC200080003FFFFFFFFFFE0
% 00000000000000000000000000000000000000000000000000002007DFBFEFEF7BDFCC00080002000000000020
% 0000000000000000000000000000000000000000000000000000200CFFBDEF6F7BDFD800080002000000000020
% 00000000000000000000000000000000000000000000000000002007DDBFEF7F7FFFC00008001E001E00000020
% 00000000000000000000000000000000000000000000000000002007CDB76F3B6F7BC000080012001F80000020
% 000000000000000000000000000000000000000000000000000020001C00000000000000080012001BFBDC0020
% 000000000000000000000000000000000000000000000000000020001800000000000000080012001FFBFC0020
% 000000000000000000000000000000000000000000000000000020000000000000000000080012001FFFF80020
% 000000000000000000000000000000000000000000000000000020000000000D000680000800120018FFF80020
% 0000000000000000000000000000000000000000000000000000200000001EED1BFFC00008001200187FF80020
% 0000000000000000000000000000000000000000000000000000200000001FFD1BFFC00008001200187BD80020
% 0000000000000000000000000000000000000000000000000000200000003FFD1BDE8000080012000000000020
% 00000000000000000000000000000000000000000000000000002000000033FD1BDE80000FFFF2000000000020
% 0000000000000000000000000000000000000000000000000000200000001FFD1FDEC00000001201000000C020
% 0000000000000000000000000000000000000000000000000000200000001EFD1FDEC00000001203000300C020
% 000000000000000000000000000000000000000000000000000020000000000000000000000012037F4F7FE020
% 000000000000000000000000000000000000000000000000000020000000000000000000000012067F4FFFE020
% 0000000000000000000000000000000000000000000000000000200000000000000000000000120679CBFF6020
% 0000000000000000000000000000000000000000000000000000200000000000000000000000120659FBFE6020
% 000000000000000000000000000000000000000000000000000020000000000000000000000012065F7BFE6020
% 000000000000000000000000000000000000000000000000000020000000000000000000000012034F7B7E6020
% 00000000000000000000000000000000000000000000000000002000000000000000000000001E03000000C020
% 00000000000000000000000000000000000000000000000000002000000000000000000000000201000000C020
% 000000000000000000000000000000000000000000000000000020000000000000000000000042000000000020
% 000000000000000000000000000000000000000000000000000020000000000000000000000082000000000020
% 000000000000000000000000000000000000000000000000000020000000000000000000000303FFFFFFFFFFE0
% 000000000000000000000000000000000000000000000000000020000000F00008000000000C00000008000000
% 000000000000000000000000000000000000000000000000000020000001F80008000000001000000008000000
% 000000000000000000000000000000000000000000000000000020000001DEFDEF7F7BDBF06000000008000000
% 000000000000000000000000000000000000000000000000000020000001FEFFFF7FFFFBF98000000008000000
% 000000000000000000000000000000000000000000000000000020000001FFF78979EF7BF30000000008000000
% 000000000000000000000000000000000000000000000000000020000001BBB7F96DEF7FF80000000008000000
% 000000000000000000000000000000000000000000000000000020000001FBB7F96FEFFFF80000000008000000
% 000000000000000000000000000000000000000000000000000020000000F336C9666D8F700000000008000000
% 000000000000000000000000000000000000000000000000000020000000070000000000000000000008000000
% 000000000000000000000000000000000000000000000000000020000000000000000000000000000008000000
% 000000000000000000000000000000000000000000000000000020000000000020000C00000000000008000000
% 000000000000000000000000000000000000000000000000000020000000000020600C00000000000008000000
% 00000000000000000000000000000000000000000000000000002000000000002FFF7FDEF00000000008000000
% 00000000000000000000000000000000000000000000000000002000000000002FFF7FFFF80000000008000000
% 00000000000000000000000000000000000000000000000000002000000000002DFF6FF9F80000000008000000
% 00000000000000000000000000000000000000000000000000002000000000002DFF4FFFF80000000008000000
% 00000000000000000000000000000000000000000000000000002000000000002DFF4FFFF00000000008000000
% 00000000000000000000000000000000000000000000000000002000000000002DB64DAE600000000008000000
% 000000000000000000000000000000000000000000000000000020000000000000000000000000000008000000
% 000000000000000000000000000000000000000000000000000020000000000000000000000000000008000000
% 000000000000000000000000000000000000000000000000000020000000000000000000000000000008000000
% 000000000000000000000000000000000000000000000000000020000000000000000000000000000008000000
% 000000000000000000000000000000000000000000000000000020000000000000000000000000000008000000
% 000000000000000000000000000000000000000000000000000020000000000000000000000000000008000000
% 00000000000000000000000000000000000000000000000000003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000008180000C000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000008988484C000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000BFFDFFFE000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000BFBFFFFC000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000B7FFB7FC000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000B7BFB7FC000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000B7FDB7F6000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
%%EndPreview
%AI3_ColorUsage: Color
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%CMYKProcessColor: 1 1 1 1 ([Registration])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 18 0 0 0 0 0 0 0 0 65535 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: -32.9609 -127.1826 -32.9609 -127.1826
%AI3_TileBox: -330.46 -477.6826 261.54 260.3174
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 612 792
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI8_OpenToView: -320.4609 80.3174 1.5 786 553 26 1 1 7 40 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:-330.46 -477.6826
%%AI3_PaperRect:-9 783 603 -9
%%AI3_Margin:9 -40 -9 9
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI7_Thumbnail: 128 96 8
%%BeginData: 9528 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD96FF7DFFA8A87DFF7D7DA8A8A87DA8FF7DFD71FFA8A8A87D7DA8
%7D52A8A8A87DA8FFA8FD5BFF7D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D
%7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA8
%7D7D7DA87D7D7DA8FD047DFD44FFA8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FF7DFD44FF7DFD3AA87DFD44FFA8A8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FF7DFFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FF7DFD44FF7DFD
%25A8FD047D527D7DA852FD0A7DA8A87DFD44FFA8A8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A87DA8
%52FD067DFF7D7D7DA8FD057DFF7DFD44FF7DFD23A87D7DA8A8A87DFD11A8
%7DFD44FF7DA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FF7DA8A8A87D7D52A87D7D527DA8A87D7DA8FFA8FFA8
%FFA8FF7DFD44FF7DFD0FA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D
%A8A8A8FD047D527D7D7D527D7D7D52FD08A87DFD44FFA8A8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8A8FD04FFA8A8FD09FF7DA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FF7DFD44FF7DFD0FA87DFD04FF7D7DFD05
%A8FD04FF7D7DFD19A87DFD10FF7DA87DA87DA87DA87DA87DA87DA87DA87D
%FD23FFA8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8FD04FFA8FF52FD047DFD
%04FFA87DFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7D
%FD10FFA8FD0FFFA8FD23FF7DFD0BA8FD047D52FD0BFFA8FFFFFFFD0A7DFD
%11A87DFD10FF7DFFFFFFA8A8A8FFA8FD07FF7DFD23FFA8A8FFA8FFA8FFA8
%FFA8FFA8A8A8FFA8A8FFFF7DFD05A87DFD04A8FFFFA87DFFA8FFA8FFA8FF
%A8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7DFD10FFA8FD04FFA8FF7DA8
%A8FF7DFD04FFA8FD23FF7DFD0BA87DA8A8A87DFFFFA87DA87D7D7DA852A8
%7DA8FFFF7DFD09A87DFD10A87DFD10FF7DFD04FFA87D7D52A8A87DFD04FF
%7DFD23FF7DA8FFA8FFA8FFA8FFA8FFA87DA8FFA8A8FFFFA8FD09FFA8FFFF
%7D7DFFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7DFD10
%FFA8FD08FFA8FD06FFA8FD23FF7DFD0BA87DA8A8A87DFD0FFF7DFD09A87D
%FD10A87DFD10FF7DFFFFA8A87DA8A8527D7DA8A87DFFFF7DFD23FFA8A8FF
%A8FFA8FFA8FFA8FFA8A8A8FFA8A87DA87DA87DA87DA87DA87DA87DA87DA8
%A8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7DFD08FF
%A8A8FFA8A8FFA8A8A8FFFF7DA87DFFA87D7DA87D7D7DFFFFA8FD23FF7DFD
%0BA87DFD1DA87DFD10A87DFD10FF7DFD0FFF7DFD23FFA8A8FFA8FFA8FFA8
%FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA87DA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7DFD07FF7DFD08FFA8
%FD0FFFA8FD23FF7DFD0BA87DFD1DA87DFD10A87DFD07FFA8FD08FF7DFFFF
%7DA8A87DA8A8A852A87D7DFFFF7DFD23FFA8A8FFA8FFA8FFA8A87DA87DA8
%A8A87DA8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7DFD10FFA8FFFF7D7DA8A87DA8FD
%047DA8FFFFA8FD23FF7DFD06A87D7DFFA8FFA8FFA8FFA87D7DFD17A87DFD
%10A87DFD07FFA8FD08FF7DFFFFA8FD0CFF7DFD23FF7DA8FFA8FFA8A87DFD
%09FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FF7DFD07FFA8FD08FFA8FD0FFFA8FD23FF
%7DFD05A87DFD0BFF7DFD17A87DFD10A87DFD10FF7DFD0FFF7DFD23FFA8A8
%FF7DA8A8FD0CFFA8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7DFD07FFA8FD08FFFD10A8FD
%24FF7DA87DFFA8A8A8FD09FFA8FFA8A87DFD15A87DFD10A87DFD07FFA8FD
%3CFFFD05A8FFFF7DA8A87DFD04A87D7DA8A8FFA87DFFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA87DA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7DFD
%07FFA8FD3CFF7DA87DFFA8A87D7D52FF52A87D7DA8527D7D52FFFD16A87D
%FD10A87DFD07FFA8FD3CFFFD04A8FD06FFA8FD0AFFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FF7D7DA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7D
%FD07FFA8FD3CFF7DA87DFFFFFF7DA87DA8527DA8A8A87D7DFFFFFFFD16A8
%FFFD10A87DFD07FFA8FD3CFF7DA8A8A8FFFFA8A8FD047DA87DA8A87DA8FF
%FFFF7DFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7DFF7DFFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FF7DFD07FFA8FD3CFF7DA87DA8A8FD0FFFA87DFD14
%A8FFFD10A87DFD07FFA8FD3CFFA8A8FF7DFFA8FFFFFFA8FD09FFA87DA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7DFFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FF7DFD07FFA8FD3CFF7DA8A8A87DA87DA8A87DA8FD05FFA8FF
%7D7DFD16A8FFFD10A87DFD44FFA8A8FFA8FFA8FFA8FFA87DA8FFFFFF7DA8
%7DA8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7DFFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FF7DFD07FF7DFD3CFF7DFD0BA87DA87DFD19A8
%7D7D52FD10A87DFD07FFA8FD3CFFA8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FF7DA8A8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8A87DFFA8A8A8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FF7DFD44FF7DFD10A8FD067DA852A8FD077D
%A87DA8A87D7DA8A8A87DFD10A87DFD07FFA8FD1AFFA8FD0CFFA8FD14FF7D
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7D7D52FD087DA8FD047D527D7DA8
%A8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7DFD07FFA8FD1AFF
%A8FFA8A8FFA8A852FFA8A8A8FFA8A8FD13FF7DFD29A87DFD10A87DFD22FF
%52A87D7DA87D7DA8A87D7DA8A87DA8FD13FFA8A8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8A8A8FFA8FFA8FFA8
%A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7DFD07FFA8FD06FFA87DA87DA8
%7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8
%7DA87DA87DA87DA87DA87DA87DA87DA87DA87D7DFD17A8FD077DA8FD047D
%FD06A87DFD10A87DFD06FF7D5252A8FD04FF7DFD34A87DA8A8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA87D7D7D527D7DA852FD047DFFA8
%FFA8FFA87DA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A87DA8FD05FFA8F852FD
%04FFA87D7DFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7D7DFD29
%A852FD0F7D52FF7DA87DA87DA87D7D7DA87DA87D7DFFFD1D7DFD17A87DA8
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A87D
%FD0CFF7DA87DFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FF7DFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7D7DFD
%3AA87DFFFF7DFF7DA87DFD04A87D7DFF7DA87DFD19A87D7D7DFD16A87D7D
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7D7DA8FF7DFF
%FF7DA87D7D7DA87D527D7DA8FFA8A8FF7DA8A8FFA8A8A8FFA8A8A8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8A8FFA8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FF7D7DFD2EA8FD067DA87DFD04A87DFD0EFF7DA8A8A87D7DA8
%A8FD047D52FD0FA87DFF7DFD16A87DA8A8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8A87D7D527D7D7DA8FFA8FFA8FF7DFD0EFFA8A8FFA8FFA8A87DA852FD04
%7DFFA8FFA8FFA8FFA8FFA8FFA8FFA8A8FFA8A8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FF7D7DFD3AA87DFD05FF7D7DA8A8A8FD04FF7DFD1B
%A87DFF7DFD16A8FD057DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7D
%A87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D
%7D7DA87D7D52FD05FFA8A87D7D7DFD04FFA8A8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8FFA8A8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FF7DFD4AFF7DFD1BA87DA852FD16A87DFD4AFFA8A8
%FFA8A87DFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A87DFF7DFFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7DFD4AFF7DA8A8A87D
%7D7DA8FD067DA8FD047DA87D7D52A8A87D7DA8A87DFD17A87DFD4AFFA8A8
%FFA8A87DA8527D7D7D527D7DA8FD0A7DA8FFA8FF7DFFA8FFA8FFA87DA8A8
%7DA8A8A87DA8A8A87DA8A8A87DFF7DFD4AFF7DFD1CA87DFD05A87D52FD04
%FFA8A8FD08FFA8A87DFD4AFFA8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8
%FFA8FFA8A8A8FFA8FFA8FF7DFFA8FFA8FF7DA8FD04FF7DA87DA8A8A8FD04
%FFA8FF7DFD4AFF7DFD0BA87DA87D7D7DA87D7D52A852FD06A87DFD06A87D
%FD04FFA8FF52527D7DFD04FFA8A87DFD4AFFA8A8FFA8FFA8FFA8FFA8FFA8
%FD057DA8FD057DA8FFA8FFA8FF7DA87D7D7DA87D7DFD0EFFA8FF7DFD4AFF
%7DFD23A87DFFFFA87DA8A8A852A87DA87DFFFFA8A87DFD4AFFA8A8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8A8FFFFA8A87DA8FD047DA8A8FFFFA8FF7DFD4AFF7DFD22A87D7DFFFFA8
%FD08FFA8FFFFA8A87DFD4AFFA8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A87DA8A87DA8A8A87DA8A8A87D
%A8A8A87DFF7DFD4AFF7DFD0BA87DFD13A87DFD0AA87DFD09A87DFD4AFFA8
%A8FFA8FFA8FFA8FFA8FF7D7D7DA852A8FD057DA852A87DA87DA87DA87DFF
%A8FFA8FFA8FFA8FFA8FF7DFFA8FFA8FFA8FFA8FF7DFD4AFF7DFD0AA87D52
%FD0E7D527D7DFD0DA87DFD09A87DFD4AFFA8A8FFA8FFA8FFA8FFA8FFA8FF
%7DFFA8FFA8FFA8A8A8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%7DFFA8FFA8FFA8FFA8FF7DFD4AFF7DFD10A87D7D7D527D7D7D527D7DA87D
%7DFD0DA87DFD09A87DFD4AFFA8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7D
%A87D7D527D7D7D52A87D7D52FFA8FFA8FFA8FFA8FFA8FFA8FF7DFFA8FFA8
%FFA8FFA8FF7DFD4AFF7DFD2AA87DFD09A87DFD4AFFA8A8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FF7DFFA8FFA8FFA8FFA8FF7DFD4AFFFD2B7D52FD0A7DFD75FFA8FD
%7FFFA8FD7FFFA8FD7CFFFD05A8FFA8FFA8FD76FFA8FFA8FFFFFFA8FFA8FF
%A8FD74FFA8FFA8FD09FFA8FD73FFA8A8FD7AFFA8A8A8FFA8FD0BFFA8FD70
%FFA8FD0FFFA8FD6EFFA8FFFFFFA8FD09FFA8FFFFFFA8FD71FFA87DA87DA8
%A8A87DFFA87DFD04FFA8FD6CFFA8FFFFFF7DA87D7D527D7DA8A87D7DFFFF
%FFA8A8FD6DFFA8FD11FFA8FD6CFFA8FD11FFA8FD6EFFA8FD0FFFA8FD70FF
%A8FFA8FFA8FFA8FD05FFA8FFA8A8A8FD7AFFA8FFA8FD78FFA8A8A8FFA8FD
%FCFFFD0AFFFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI5 1.0 1
%%Title: (Typography Operators)
%%Version: 1.0 1
%%CreationDate:(6/10/1996) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI5 68 dict dup begin
put
/initialize
{
 begin
 begin
	Adobe_typography_AI5 begin
	Adobe_typography_AI5
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
 end
 end
	Adobe_typography_AI5 begin
} def
/terminate
{
	currentdict Adobe_typography_AI5 eq
	{
	 end
	} if
} def
/modifyEncoding
{
	/_tempEncode exch ddef
	/_pntr 0 ddef
	{
		counttomark -1 roll
		dup type dup /marktype eq
		{
			pop pop exit
		}
		{
			/nametype eq
			{
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				/_pntr exch ddef
			} ifelse
		} ifelse
	} loop
	_tempEncode
} def
/havefont
{
	systemdict /languagelevel known
		{
		/Font resourcestatus dup
			{ exch pop exch pop }
		if
		}
		{
		systemdict /FontDirectory get 1 index known
			{ pop true }
			{
			systemdict /fileposition known
				{
				dup length 6 add exch
				Ss 6 250 getinterval
				cvs pop
				Ss exch 0 exch getinterval
				status
					{ pop pop pop pop true }
					{ false }
				ifelse
				}
				{
				pop false
				}
			ifelse
			}
		ifelse
		}
	ifelse
} def
/TE
{
	StandardEncoding 256 array copy modifyEncoding
	/_nativeEncoding exch def
} def
/subststring {
	exch 2 index exch search
	{
		exch pop
		exch dup () eq
		{
			pop exch concatstring
		}
		{
			3 -1 roll
			exch concatstring
			concatstring
		} ifelse
		exch pop true
	}
	{
		pop pop false
	} ifelse
} def
/concatstring {
	1 index length 1 index length
	1 index add
	string
	dup 0 5 index putinterval
	dup 2 index 4 index putinterval
	4 1 roll pop pop pop
} def
%
/TZ
{
	dup type /arraytype eq
	{
		/_wv exch def
	}
	{
		/_wv 0 def
	} ifelse
	/_useNativeEncoding exch def
	2 index havefont
	{
		3 index
		255 string
		cvs
		
		dup
		(_Symbol_)
		eq
		{
			pop
			2 index
			findfont
			
		}
		{
			1 index 0 eq
			{
				dup length 1 sub
				1 exch
				getinterval
				
				cvn
				findfont
			}
			{
				pop 2 index findfont
			} ifelse
		} ifelse
	}
	{
		dup 1 eq
		{
			2 index 64 string cvs
			dup (-90pv-RKSJ-) (-83pv-RKSJ-) subststring
			{
				exch pop dup havefont
				{
					findfont false
				}
				{
					pop true
				} ifelse
			}
			{
				pop	dup
				(-90ms-RKSJ-) (-Ext-RKSJ-) subststring
				{
					exch pop dup havefont
					{
						findfont false
					}
					{
						pop true
					} ifelse
				}
				{
					pop pop true
				} ifelse
			} ifelse
			{
				1 index 1 eq
				{
					/Ryumin-Light-Ext-RKSJ-V havefont
					{/Ryumin-Light-Ext-RKSJ-V}
					{/Courier}
					ifelse
				}
				{
					/Ryumin-Light-83pv-RKSJ-H havefont
					{/Ryumin-Light-83pv-RKSJ-H}
					{/Courier}
					ifelse
				} ifelse
				findfont
				[1 0 0.5 1 0 0] makefont
			} if
		}
		{
			/Courier findfont
		} ifelse
	} ifelse
	_wv type /arraytype eq
	{
		_wv makeblendedfont
	} if
	dup length 10 add dict
 begin
	mark exch
	{
		1 index /FID ne
		{
			def
		} if
		cleartomark mark
	} forall
	pop
	/FontScript exch def
	/FontDirection exch def
	/FontRequest exch def
	/FontName exch def
	counttomark 0 eq
	{
		1 _useNativeEncoding eq
		{
			/Encoding _nativeEncoding def
		} if
		cleartomark
	}
	{
		/Encoding load 256 array copy
		modifyEncoding /Encoding exch def
	} ifelse
	FontName currentdict
 end
	definefont pop
} def
/tr
{
	_ax _ay 3 2 roll
} def
/trj
{
	_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
	/Tx
	{
		dup
		currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
	} ddef
	/Tj
	{
		dup
		currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
	} ddef
} def
/a1
{
W B
} def
/e0
{
	/Tx
	{
		tr _psf
	} ddef
	/Tj
	{
		trj _pjsf
	} ddef
} def
/e1
{
W F 
} def
/i0
{
	/Tx
	{
		tr sp
	} ddef
	/Tj
	{
		trj jsp
	} ddef
} def
/i1
{
	W N
} def
/o0
{
	/Tx
	{
		tr sw rmoveto
	} ddef
	/Tj
	{
		trj swj rmoveto
	} ddef
} def
/r0
{
	/Tx
	{
		tr _ctm _pss
	} ddef
	/Tj
	{
		trj _ctm _pjss
	} ddef
} def
/r1
{
W S
} def
/To
{
	pop _ctm currentmatrix pop
} def
/TO
{
	iTe _ctm setmatrix newpath
} def
/Tp
{
	pop _tm astore pop _ctm setmatrix
	_tDict begin
	/W
	{
	} def
	/h
	{
	} def
} def
/TP
{
 end
	iTm 0 0 moveto
} def
/Tr
{
	_render 3 le
	{
		currentpoint newpath moveto
	} if
	dup 8 eq
	{
		pop 0
	}
	{
		dup 9 eq
		{
			pop 1
		} if
	} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm
{
	_ctm setmatrix _tm concat
	_shift aload pop _lineorientation 1 eq { exch } if translate
	_scale aload pop _lineorientation 1 eq _yokoorientation 1 eq or { exch } if scale
} def
/Tm
{
	_tm astore pop iTm 0 0 moveto
} def
/Td
{
	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
	_render -1 eq
	{
	}
	{
		_renderEnd _render get dup null ne
		{
			load exec
		}
		{
			pop
		} ifelse
	} ifelse
	/_render -1 ddef
} def
/Ta
{
	pop
} def
/Tf
{
	1 index type /nametype eq
	{
		dup 0.75 mul 1 index 0.25 mul neg
	} if
	/_fontDescent exch ddef
	/_fontAscent exch ddef
	/_fontSize exch ddef
	/_fontRotateAdjust _fontAscent _fontDescent add 2 div neg ddef
	/_fontHeight _fontSize ddef
	findfont _fontSize scalefont setfont
} def
/Tl
{
	pop neg 0 exch
	_leading astore pop
} def
/Tt
{
	pop
} def
/TW
{
	3 npop
} def
/Tw
{
	/_cx exch ddef
} def
/TC
{
	3 npop
} def
/Tc
{
	/_ax exch ddef
} def
/Ts
{
	0 exch
	_shift astore pop
	currentpoint
	iTm
	moveto
} def
/Ti
{
	3 npop
} def
/Tz
{
	count 1 eq { 100 } if
	100 div exch 100 div exch
	_scale astore pop
	iTm
} def
/TA
{
	pop
} def
/Tq
{
	pop
} def
/Tg
{
	pop
} def
/TG
{
	pop
} def
/Tv
{
	/_lineorientation exch ddef
} def
/TV
{
	/_charorientation exch ddef
} def
/Ty
{
	dup /_yokoorientation exch ddef 1 sub neg Tv
} def
/TY
{
	pop
} def
/T~
{
	Tx
} def
/Th
{
	pop pop pop pop pop
} def
/TX
{
	pop
} def
/Tk
{
	_fontSize mul 1000 div
	_lineorientation 0 eq { neg 0 } { 0 exch } ifelse
	rmoveto
	pop
} def
/TK
{
	2 npop
} def
/T*
{
	_leading aload pop
	_lineorientation 0 ne { exch } if
	Td
} def
/T*-
{
	_leading aload pop
	_lineorientation 0 ne { exch } if
	exch neg exch neg
	Td
} def
/T-
{
	_ax neg 0 rmoveto
	_lineorientation 1 eq _charorientation 0 eq and { 1 TV _hyphen Tx 0 TV } { _hyphen Tx } ifelse
} def
/T+
{
} def
/TR
{
	_ctm currentmatrix pop
	_tm astore pop
	iTm 0 0 moveto
} def
/TS
{
	currentfont 3 1 roll
	/_Symbol_ findfont _fontSize scalefont setfont
	
	0 eq
	{
		Tx
	}
	{
		Tj
	} ifelse
	setfont
} def
/Xb
{
	pop pop
} def
/Tb /Xb load def
/Xe
{
	pop pop pop pop
} def
/Te /Xe load def
/XB
{
} def
/TB /XB load def
currentdict readonly pop
end
setpacking
%
/X^
{
	currentfont 5 1 roll
	dup havefont
		{
		findfont _fontSize scalefont setfont
		}
		{
		pop
		exch
		} ifelse
	2 index 0 eq
	{
		Tx
	}
	{
		Tj
	} ifelse
	pop	pop
	setfont
} def
/T^	/X^	load def
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Helvetica
userdict /_useSmoothShade true put
userdict /_aicmykps true put
userdict /_forceToCMYK true put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI55J_Tsume: None
%AI3_BeginEncoding: _Helvetica Helvetica
[/_Helvetica/Helvetica 0 0 1 TZ
%AI3_EndEncoding AdobeType
[161/degree 173/notequal 176/infinity/plusminus/lessequal/greaterequal
181/mu/partialdiff/summation/product/pi/integral 189/Omega 
195/radical 197/approxequal 198/Delta 214/divide/lozenge 240/apple
/_Symbol_/Symbol 0 0 0 TZ
%AI5_Begin_NonPrinting
Np
4 Bn
%AI5_BeginGradient: (Black, White)
(Black, White) 0 2 Bd
[
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
0 %_Br
[
0 0 50 100 %_BS
%_0 0 50 100 Bs
1 0 50 0 %_BS
%_1 0 50 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Chrome)
(Chrome) 0 6 Bd
[
0
<
464646454545444444444343434342424241414141404040403F3F3F3E3E3E3E3D3D3D3C3C3C3C3B
3B3B3B3A3A3A39393939383838383737373636363635353535343434333333333232323131313130
3030302F2F2F2E2E2E2E2D2D2D2D2C2C2C2B2B2B2B2A2A2A2A292929282828282727272626262625
2525252424242323232322222222212121202020201F1F1F1F1E1E1E1D1D1D1D1C1C1C1B1B1B1B1A
1A1A1A1919191818181817171717161616151515151414141413131312121212111111101010100F
0F0F0F0E0E0E0D0D0D0D0C0C0C0C0B0B0B0A0A0A0A09090909080808070707070606060505050504
04040403030302020202010101010000
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
<
1F1E1E1E1E1E1E1E1E1E1D1D1D1D1D1D1D1D1C1C1C1C1C1C1C1C1B1B1B1B1B1B1B1B1B1A1A1A1A1A
1A1A1A19191919191919191818181818181818181717171717171717161616161616161615151515
15151515151414141414141414131313131313131312121212121212121211111111111111111010
1010101010100F0F0F0F0F0F0F0F0F0E0E0E0E0E0E0E0E0D0D0D0D0D0D0D0D0C0C0C0C0C0C0C0C0C
0B0B0B0B0B0B0B0B0A0A0A0A0A0A0A0A090909090909090909080808080808080807070707070707
07060606060606060606050505050505050504040404040404040303030303030303030202020202
02020201010101010101010000000000
>
1 %_Br
0
0.275
1
<
6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544
434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F
>
1 %_Br
0
<
00000101010102020202030303040404040505050506060607070707080808090909090A0A0A0A0B
0B0B0C0C0C0C0D0D0D0D0E0E0E0F0F0F0F1010101011111112121212131313141414141515151516
161617171717181818181919191A1A1A1A1B1B1B1C1C1C1C1D1D1D1D1E1E1E1F1F1F1F2020202021
212122222222232323232424242525252526262626272727282828282929292A2A2A2A2B2B2B2B2C
2C2C2D2D2D2D2E2E2E2E2F2F2F303030303131313132323233333333343434353535353636363637
373738383838393939393A3A3A3B3B3B3B3C3C3C3D3D3D3D3E3E3E3E3F3F3F404040404141414142
42424343434344444444454545464646
>
<
000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F2021222324252627
28292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F
505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F7071727374757677
78797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9F
A0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7
C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF
F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF
>
<
00000101020203030304040505050606070708080809090A0A0B0B0B0C0C0D0D0D0E0E0F0F101010
1111121212131314141515151616171718181819191A1A1A1B1B1C1C1D1D1D1E1E1F1F1F20202121
222222232324242525252626272727282829292A2A2A2B2B2C2C2D2D2D2E2E2F2F2F303031313232
32333334343435353636373737383839393A3A3A3B3B3C3C3C3D3D3E3E3F3F3F4040414142424243
434444444545464647474748484949494A4A4B4B4C4C4C4D4D4E4E4F4F4F50505151515252535354
54545555565657575758585959595A5A5B5B5C5C5C5D5D5E5E5E5F5F606061616162626363646464
6565666666676768686969696A6A6B6B
>
1 %_Br
1
0 %_Br
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
<
4D4C4C4C4B4B4B4A4A4A4A4949494848484747474746464645454544444444434343424242414141
414040403F3F3F3E3E3E3E3D3D3D3C3C3C3B3B3B3B3A3A3A39393938383838373737363636353535
35343434333333323232323131313030302F2F2F2E2E2E2E2D2D2D2C2C2C2B2B2B2B2A2A2A292929
282828282727272626262525252524242423232322222222212121202020201F1F1F1E1E1E1D1D1D
1D1C1C1C1B1B1B1A1A1A1A1919191818181717171616161615151514141413131313121212111111
101010100F0F0F0E0E0E0D0D0D0D0C0C0C0B0B0B0A0A0A0A09090908080807070707060606050505
04040404030303020202010101010000
>
0
0
1 %_Br
[
1 0 50 92 %_BS
%_1 0 50 92 Bs
0 0.275 1 0.12 1 50 59 %_BS
%_0 0.275 1 0.12 1 50 59 Bs
0 0.275 1 0.42 1 50 50 %_BS
%_0 0.275 1 0.42 1 50 50 Bs
1 0 50 49 %_BS
%_1 0 50 49 Bs
1 0 50 41 %_BS
%_1 0 50 41 Bs
1 0.3 0 0 1 50 0 %_BS
%_1 0.3 0 0 1 50 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Rainbow)
(Rainbow) 0 6 Bd
[
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
1
0
0
1 %_Br
1
<
0708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E
2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F50515253545556
5758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E
7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6
A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCE
CFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6
F7F8F9FAFBFCFDFEFF
>
0
0
1 %_Br
1
<
00000000000000000000000000000000000001010101010101010101010101010101010101010101
01010101010101010101010101010202020202020202020202020202020202020202020202020202
02020202020202020202030303030303030303030303030303030303030303030303030303030303
03030303030304040404040404040404040404040404040404040404040404040404040404040404
04040505050505050505050505050505050505050505050505050505050505050505050505050606
06060606060606060606060606060606060606060606060606060606060606060607070707070707
07070707070707070707070707070707
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
0
1 %_Br
<
000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F2021222324252627
28292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F
505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F7071727374757677
78797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9F
A0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7
C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF
F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF
>
0
1
0
1 %_Br
0
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
1
0
1 %_Br
[
0 1 0 0 1 50 100 %_BS
%_0 1 0 0 1 50 100 Bs
1 1 0 0 1 50 80 %_BS
%_1 1 0 0 1 50 80 Bs
1 0.0279 0 0 1 50 60 %_BS
%_1 0.0279 0 0 1 50 60 Bs
1 0 1 0 1 50 40 %_BS
%_1 0 1 0 1 50 40 Bs
0 0 1 0 1 50 20 %_BS
%_0 0 1 0 1 50 20 Bs
0 1 1 0 1 50 0 %_BS
%_0 1 1 0 1 50 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Yellow & Orange Radial)
(Yellow & Orange Radial) 1 2 Bd
[
0
<
0001010203040506060708090A0B0C0C0D0E0F10111213131415161718191A1B1C1D1D1E1F202122
232425262728292A2B2B2C2D2E2F303132333435363738393A3B3C3D3E3E3F404142434445464748
494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F60606162636465666768696A6B6C6D6E6F
707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C
>
<
FFFFFFFFFEFEFEFEFEFEFEFDFDFDFDFDFDFCFCFCFCFCFCFBFBFBFBFBFBFAFAFAFAFAFAF9F9F9F9F9
F9F8F8F8F8F8F8F7F7F7F7F7F7F6F6F6F6F6F6F5F5F5F5F5F5F4F4F4F4F4F3F3F3F3F3F3F2F2F2F2
F2F2F1F1F1F1F1F0F0F0F0F0F0EFEFEFEFEFEFEEEEEEEEEEEDEDEDEDEDEDECECECECECEBEBEBEBEB
EBEAEAEAEAEAE9E9E9E9E9E9E8E8E8E8E8E8E7E7E7E7E7E6E6E6E6E6E6
>
0
1 %_Br
[
0 0 1 0 1 52 19 %_BS
%_0 0 1 0 1 52 19 Bs
0 0.55 0.9 0 1 50 100 %_BS
%_0 0.55 0.9 0 1 50 100 Bs
BD
%AI5_EndGradient
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI3_BeginPattern: (Brick)
(Brick) 0 0 72 72 [
%AI3_Tile
(0 O 0 R 0.3 0.85 0.85 0 k
 0.3 0.85 0.85 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
0 0 m
0 72 L
72 72 L
72 0 L
0 0 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d
0 XR
0 68.4097 m
72 68.4097 l
S
0 61.209 m
72 61.209 L
S
0 54.0088 m
72 54.0088 L
S
0 46.8076 m
72 46.8076 L
S
0 39.6084 m
72 39.6084 L
S
0 32.4072 m
72 32.4072 L
S
0 25.207 m
72 25.207 L
S
0 18.0059 m
72 18.0059 L
S
0 10.8057 m
72 10.8057 L
S
0 3.6064 m
72 3.6064 L
S
68.4102 68.4097 m
68.4102 61.2217 l
S
54.0098 68.4097 m
54.0098 61.2217 L
S
39.6094 68.4097 m
39.6094 61.2217 L
S
25.21 68.4097 m
25.21 61.2217 L
S
10.8105 68.4097 m
10.8105 61.2217 L
S
68.4102 53.9717 m
68.4102 46.7842 l
S
54.0098 53.9717 m
54.0098 46.7842 L
S
39.6094 53.9717 m
39.6094 46.7842 L
S
25.21 53.9717 m
25.21 46.7842 L
S
10.8105 53.9717 m
10.8105 46.7842 L
S
68.4102 39.5967 m
68.4102 32.4092 l
S
54.0098 39.5967 m
54.0098 32.4092 L
S
39.6094 39.5967 m
39.6094 32.4092 L
S
25.21 39.5967 m
25.21 32.4092 L
S
10.8105 39.5967 m
10.8105 32.4092 L
S
68.4102 25.2217 m
68.4102 18.0342 l
S
54.0098 25.2217 m
54.0098 18.0342 L
S
39.6094 25.2217 m
39.6094 18.0342 L
S
25.21 25.2217 m
25.21 18.0342 L
S
10.8105 25.2217 m
10.8105 18.0342 L
S
68.4102 10.7842 m
68.4102 3.5967 l
S
54.0098 10.7842 m
54.0098 3.5967 L
S
39.6094 10.7842 m
39.6094 3.5967 L
S
25.21 10.7842 m
25.21 3.5967 L
S
10.8105 10.7842 m
10.8105 3.5967 L
S
61.1973 3.5967 m
61.1973 0 L
S
46.7969 3.5967 m
46.7969 0 L
S
32.3965 3.5967 m
32.3965 0 L
S
17.9971 3.5967 m
17.9971 0 L
S
3.5967 3.5967 m
3.5967 0 l
S
61.1973 18.0342 m
61.1973 10.8467 L
S
46.7969 18.0342 m
46.7969 10.8467 L
S
32.3965 18.0342 m
32.3965 10.8467 L
S
17.9971 18.0342 m
17.9971 10.8467 L
S
3.5967 18.0342 m
3.5967 10.8467 l
S
61.1973 32.4092 m
61.1973 25.2217 L
S
46.7969 32.4092 m
46.7969 25.2217 L
S
17.9971 32.4092 m
17.9971 25.2217 L
S
3.5967 32.4092 m
3.5967 25.2217 l
S
61.1973 46.7842 m
61.1973 39.5967 L
S
46.7969 46.7842 m
46.7969 39.5967 L
S
32.3965 46.7842 m
32.3965 39.5967 L
S
17.9971 46.7842 m
17.9971 39.5967 L
S
3.5967 46.7842 m
3.5967 39.5967 l
S
61.1973 61.2217 m
61.1973 54.0347 L
S
46.7969 61.2217 m
46.7969 54.0347 L
S
32.3965 61.2217 m
32.3965 54.0347 L
S
17.9971 61.2217 m
17.9971 54.0347 L
S
3.5967 61.2217 m
3.5967 54.0347 l
S
61.1973 71.959 m
61.1973 68.4717 L
S
46.7969 71.959 m
46.7969 68.4717 L
S
32.3965 71.959 m
32.3965 68.4717 L
S
17.9971 71.959 m
17.9971 68.4717 L
S
3.5967 71.959 m
3.5967 68.4717 l
S
32.3965 32.4092 m
32.3965 25.2217 L
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Confetti)
(Confetti) 4.85 3.617 76.85 75.617 [
%AI3_Tile
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
4.85 3.617 m
4.85 75.617 L
76.85 75.617 L
76.85 3.617 L
4.85 3.617 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 g
 0 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d
0 XR
10.6 64.867 m
7.85 62.867 l
S
9.1 8.617 m
6.85 6.867 l
S
78.1 68.617 m
74.85 67.867 l
S
76.85 56.867 m
74.35 55.117 l
S
79.6 51.617 m
76.6 51.617 l
S
76.35 44.117 m
73.6 45.867 l
S
78.6 35.867 m
76.6 34.367 l
S
76.1 23.867 m
73.35 26.117 l
S
78.1 12.867 m
73.85 13.617 l
S
68.35 14.617 m
66.1 12.867 l
S
76.6 30.617 m
73.6 30.617 l
S
62.85 58.117 m
60.956 60.941 l
S
32.85 59.617 m
31.196 62.181 l
S
47.891 64.061 m
49.744 66.742 l
S
72.814 2.769 m
73.928 5.729 l
S
67.976 2.633 m
67.35 5.909 l
S
61.85 27.617 m
59.956 30.441 l
S
53.504 56.053 m
51.85 58.617 l
S
52.762 1.779 m
52.876 4.776 l
S
45.391 5.311 m
47.244 7.992 l
S
37.062 3.375 m
35.639 5.43 l
S
55.165 34.828 m
57.518 37.491 l
S
20.795 3.242 m
22.12 5.193 l
S
14.097 4.747 m
15.008 8.965 l
S
9.736 1.91 m
8.073 4.225 l
S
31.891 5.573 m
32.005 8.571 l
S
12.1 70.367 m
15.6 68.867 l
S
9.35 54.867 m
9.6 58.117 l
S
12.85 31.867 m
14.35 28.117 l
S
10.1 37.367 m
12.35 41.117 l
S
34.1 71.117 m
31.85 68.617 l
S
38.35 71.117 m
41.6 68.367 l
S
55.1 71.117 m
58.35 69.117 l
S
57.35 65.117 m
55.35 61.867 l
S
64.35 66.367 m
69.35 68.617 l
S
71.85 62.867 m
69.35 61.117 l
S
23.6 70.867 m
23.6 67.867 l
S
20.6 65.867 m
17.35 65.367 l
S
24.85 61.367 m
25.35 58.117 l
S
25.85 65.867 m
29.35 66.617 l
S
14.1 54.117 m
16.85 56.117 l
S
12.35 11.617 m
12.6 15.617 l
S
12.1 19.867 m
14.35 22.367 l
S
26.1 9.867 m
23.6 13.367 l
S
34.6 47.117 m
32.1 45.367 l
S
62.6 41.867 m
59.85 43.367 l
S
31.6 35.617 m
27.85 36.367 l
S
36.35 26.117 m
34.35 24.617 l
S
33.85 14.117 m
31.1 16.367 l
S
37.1 9.867 m
35.1 11.117 l
S
34.35 20.867 m
31.35 20.867 l
S
44.6 56.617 m
42.1 54.867 l
S
47.35 51.367 m
44.35 51.367 l
S
44.1 43.867 m
41.35 45.617 l
S
43.35 33.117 m
42.6 30.617 l
S
43.85 23.617 m
41.1 25.867 l
S
44.35 15.617 m
42.35 16.867 l
S
67.823 31.1 m
64.823 31.1 l
S
27.1 32.617 m
29.6 30.867 l
S
31.85 55.117 m
34.85 55.117 l
S
19.6 40.867 m
22.1 39.117 l
S
16.85 35.617 m
19.85 35.617 l
S
20.1 28.117 m
22.85 29.867 l
S
52.1 42.617 m
54.484 44.178 l
S
52.437 50.146 m
54.821 48.325 l
S
59.572 54.133 m
59.35 51.117 l
S
50.185 10.055 m
53.234 9.928 l
S
51.187 15.896 m
53.571 14.075 l
S
58.322 19.883 m
59.445 16.823 l
S
53.1 32.117 m
50.6 30.367 l
S
52.85 24.617 m
49.6 25.617 l
S
61.85 9.117 m
59.1 10.867 l
S
69.35 34.617 m
66.6 36.367 l
S
67.1 23.617 m
65.1 22.117 l
S
24.435 46.055 m
27.484 45.928 l
S
25.437 51.896 m
27.821 50.075 l
S
62.6 47.117 m
65.321 46.575 l
S
19.85 19.867 m
20.35 16.617 l
S
21.85 21.867 m
25.35 22.617 l
S
37.6 62.867 m
41.6 62.117 l
S
38.323 42.1 m
38.823 38.6 l
S
69.35 52.617 m
66.85 53.867 l
S
14.85 62.117 m
18.1 59.367 l
S
9.6 46.117 m
7.1 44.367 l
S
20.6 51.617 m
18.6 50.117 l
S
46.141 70.811 m
47.994 73.492 l
S
69.391 40.561 m
71.244 43.242 l
S
38.641 49.311 m
39.35 52.117 l
S
25.141 16.811 m
25.85 19.617 l
S
36.6 32.867 m
34.6 31.367 l
S
6.1 68.617 m
2.85 67.867 l
S
4.85 56.867 m
2.35 55.117 l
S
7.6 51.617 m
4.6 51.617 l
S
6.6 35.867 m
4.6 34.367 l
S
6.1 12.867 m
1.85 13.617 l
S
4.6 30.617 m
1.6 30.617 l
S
72.814 74.769 m
73.928 77.729 l
S
67.976 74.633 m
67.35 77.909 l
S
52.762 73.779 m
52.876 76.776 l
S
37.062 75.375 m
35.639 77.43 l
S
20.795 75.242 m
22.12 77.193 l
S
9.736 73.91 m
8.073 76.225 l
S
10.1 23.617 m
6.35 24.367 l
S
73.217 18.276 m
71.323 21.1 l
S
28.823 39.6 m
29.505 42.389 l
S
49.6 38.617 m
47.6 37.117 l
S
60.323 73.6 m
62.323 76.6 l
S
60.323 1.6 m
62.323 4.6 l
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Leaves - Fall )
(Leaves - Fall ) 0 0 64.0781 78.9336 [
%AI3_Tile
(0 O 0 R 0.05 0.2 1 0 k
 0.05 0.2 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
64.0781 78.9336 m
64.0781 0 L
0 0 L
0 78.9336 L
64.0781 78.9336 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.83 0 1 0 k
 0.83 0 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
29.7578 0.9902 m
30.4346 1.1914 30.7246 1.3428 V
29.2559 4.0547 33.707 8.3359 34.627 9.0762 C
35.2275 8.8506 35.3477 6.3184 34.6699 4.9805 C
35.5137 5.1035 37.7031 3.7256 38.4609 2.4365 C
38.5254 3.125 40.0957 6.0664 40.9219 6.4434 C
40.002 6.8408 39.3359 8.3135 38.5742 9.7617 C
39.5957 9.9287 40.9961 9.0078 42.4668 8.1025 C
42.9814 8.9043 44.3555 9.875 45.6143 10.3916 C
44.5264 11.0781 44.0313 11.8203 43.5352 13.2793 C
42.4922 12.7139 40.3057 12.5645 39.7764 12.8516 C
40.291 13.9648 42.5371 14.5078 43.2676 14.4551 C
43.0137 15.3164 42.8652 17.4697 43.0391 20.0625 C
41.3789 18.7461 39.834 17.4297 38.1738 17.4883 C
38.4434 16.0664 37.8076 14.2607 37.4307 13.7676 C
36.8574 14.5117 36.4463 15.3389 36.8008 17.3164 C
35.3486 17.8008 34.1113 18.3467 32.7373 19.6045 C
32.7373 17.7734 32.166 16.5723 31.2969 15.2959 C
32.5576 14.8076 33.8301 13.6045 33.8252 12.5664 C
32.9775 12.7178 31.2852 13.4619 30.793 14.4551 C
30.0742 13.707 28.3906 12.3984 26.7871 12.3945 C
27.9746 11.5391 28.8945 10.5059 28.9893 8.5938 C
30.2422 9.5645 32.6953 10.1797 34.0752 9.582 C
29.2344 5.3457 29.7031 2.3125 29.7578 0.9902 C
f
13.8525 29.9844 m
13.3281 29.5127 13.1309 29.25 V
15.623 27.4326 13.3691 21.6074 12.8555 20.5439 C
12.2168 20.4883 10.8096 23.2285 10.8457 24.7266 C
9.7129 23.9707 8.0488 24.0918 6.4463 24.3779 C
7.0186 23.2891 6.6172 21.3447 5.8164 20.5439 C
6.8184 20.5801 8.1699 19.8652 9.4785 18.8838 C
8.6436 18.0645 6.8164 18.2246 4.9004 18.8838 C
4.9004 17.5107 4.0781 15.7734 3.2412 14.5918 C
4.5576 14.6484 5.7031 13.9629 6.5605 12.9316 C
7.2256 14.5 9.2598 15.6133 10.166 15.5645 C
10.1826 14.1992 8.6094 12.1094 7.5879 11.7109 C
8.1875 11.041 9.207 9.5107 10.166 7.0947 C
10.9648 9.0205 12.1348 10.2627 13.3672 11.1953 C
12.2256 12.7578 12.3994 13.6289 12.7988 15.1074 C
13.541 14.5664 14.5723 14.1338 14.7441 12.1309 C
16.4609 12.416 17.5957 12.3447 19.0938 11.4434 C
18.6387 13.1055 18.6348 14.707 18.9551 16.4063 C
17.1055 16.2666 15.5449 16.4795 14.5156 17.9688 C
15.3457 18.1953 17.6055 18.2549 18.4795 17.3223 C
18.8066 18.3047 19.7012 19.7109 21.1475 20.4043 C
19.707 20.6641 18.7227 21.7637 17.8135 23.4492 C
17.1006 22.0332 14.873 20.3691 13.3711 20.3145 C
15.373 24.3779 15.373 27.2959 13.8525 29.9844 C
f
41.2324 26.0742 m
41.5518 26.7021 41.7549 26.959 V
44.1523 25.0176 48.958 28.3262 49.8535 29.0957 C
49.7432 29.7266 47.6182 30.8643 45.9004 29.834 C
46.3408 31.123 45.4395 33.084 44.2402 34.126 C
45.9805 34.0254 48.126 35.3867 48.6484 36.1289 C
48.8701 35.1514 50.0527 33.8809 51.3379 32.8672 C
51.6895 33.8398 50.9941 35.958 50.0781 37.5605 C
51.3125 38.0605 52.4248 38.9912 52.8828 40.25 C
53.3398 38.9336 54.3428 38.2598 55.6875 37.5039 C
54.5273 36.0762 53.7471 33.9023 54.0273 33.0391 C
55.3496 33.374 56.9209 36.0918 57.0439 37.1816 C
57.9189 36.415 59.4727 35.7285 62.0537 35.4219 C
60.3535 34.3438 59.9902 32.3516 59.4063 30.9219 C
58.2588 31.3682 56.0898 31.4277 55.1152 30.8643 C
55.8281 30.2852 57.168 29.7344 59.1777 29.7207 C
59.1777 28.1758 59.6406 27.043 60.8945 25.8281 C
59.1719 25.8418 57.0723 25.3555 55.5762 24.9629 C
55.3281 26.292 54.4844 27.8887 53.3398 28.2891 C
53.334 27.4277 53.5996 25.1797 54.4844 24.5117 C
53.6201 23.9443 52.3672 22.5674 51.9102 20.8496 C
51.2881 22.1758 50.4268 23.4805 48.5645 23.9238 C
49.749 24.9766 50.584 26.9941 50.25 28.4609 C
45.1973 24.4785 42.5215 25.7773 41.2324 26.0742 C
f
27.7578 38.7324 m
28.4346 38.9316 28.7246 39.084 V
27.2559 41.7969 31.707 46.0776 32.627 46.8169 C
33.2275 46.5918 33.3477 44.0586 32.6699 42.7227 C
33.5137 42.8457 35.7031 41.4678 36.4609 40.1787 C
36.5254 40.8652 38.0957 43.8066 38.9219 44.1846 C
38.002 44.582 37.3359 46.0547 36.5742 47.5039 C
37.5957 47.6709 38.9961 46.7485 40.4668 45.8438 C
40.9814 46.6445 42.3555 47.6177 43.6143 48.1328 C
42.5264 48.8198 42.0313 49.5615 41.5352 51.0205 C
40.4922 50.4556 38.3057 50.3057 37.7764 50.5938 C
38.291 51.7056 40.5371 52.2485 41.2676 52.1958 C
41.0137 53.0576 40.8652 55.2109 41.0391 57.8037 C
39.3789 56.4878 37.834 55.1719 36.1738 55.2285 C
36.4434 53.8076 35.8076 52.002 35.4307 51.5088 C
34.8574 52.2529 34.4463 53.0796 34.8008 55.0576 C
33.3486 55.5425 32.1113 56.0879 30.7373 57.3467 C
30.7373 55.5146 30.166 54.314 29.2969 53.0366 C
30.5576 52.5488 31.8301 51.3467 31.8252 50.3076 C
30.9775 50.46 29.2852 51.2036 28.793 52.1958 C
28.0742 51.4497 26.3906 50.1396 24.7871 50.1357 C
25.9746 49.2817 26.8945 48.2466 26.9893 46.335 C
28.2422 47.3057 30.6953 47.9209 32.0752 47.3237 C
27.2344 43.0869 27.7031 40.0547 27.7578 38.7324 C
f
13.5195 70.3916 m
12.9941 69.9209 12.7988 69.6587 V
15.2891 67.8418 13.0352 62.0146 12.5225 60.9517 C
11.8828 60.8955 10.4766 63.6367 10.5117 65.1348 C
9.3809 64.3789 7.7148 64.4995 6.1133 64.7856 C
6.6855 63.6987 6.2842 61.7529 5.4834 60.9517 C
6.4854 60.9878 7.8359 60.2729 9.1455 59.2925 C
8.3105 58.4717 6.4834 58.6338 4.5674 59.2925 C
4.5674 57.9189 3.7461 56.1816 2.9082 54.9995 C
4.2246 55.0576 5.3691 54.3706 6.2275 53.3408 C
6.8926 54.9097 8.9258 56.0215 9.832 55.9727 C
9.8496 54.6079 8.2764 52.5176 7.2539 52.1187 C
7.8545 51.4497 8.873 49.9189 9.832 47.5039 C
10.6309 49.4297 11.8008 50.6719 13.0342 51.6045 C
11.8926 53.1655 12.0664 54.0366 12.4648 55.5146 C
13.209 54.9746 14.2393 54.5415 14.4102 52.5386 C
16.127 52.8247 17.2637 52.7529 18.7598 51.8525 C
18.3057 53.5137 18.3027 55.1147 18.623 56.8149 C
16.7725 56.6748 15.2129 56.8887 14.1826 58.377 C
15.0117 58.6035 17.2725 58.6626 18.1465 57.731 C
18.4736 58.7129 19.3691 60.1187 20.8145 60.8125 C
19.375 61.0728 18.3896 62.1719 17.4805 63.8579 C
16.7676 62.4429 14.541 60.7769 13.0371 60.7227 C
15.041 64.7856 15.041 67.7046 13.5195 70.3916 C
f
41.2324 64.4824 m
41.5518 65.1113 41.7549 65.3682 V
44.1523 63.4272 48.958 66.7354 49.8535 67.5034 C
49.7432 68.1362 47.6182 69.2725 45.9004 68.2422 C
46.3408 69.5313 45.4395 71.4922 44.2402 72.5342 C
45.9805 72.4341 48.126 73.7954 48.6484 74.5371 C
48.8701 73.5601 50.0527 72.29 51.3379 71.2754 C
51.6895 72.249 50.9941 74.3662 50.0781 75.9683 C
51.3125 76.4692 52.4248 77.3994 52.8828 78.6582 C
53.3398 77.3423 54.3428 76.667 55.6875 75.9111 C
54.5273 74.4844 53.7471 72.3101 54.0273 71.4473 C
55.3496 71.7822 56.9209 74.5 57.0439 75.5903 C
57.9189 74.8232 59.4727 74.1372 62.0537 73.8311 C
60.3535 72.7534 59.9902 70.7612 59.4063 69.3301 C
58.2588 69.7773 56.0898 69.8364 55.1152 69.2725 C
55.8281 68.6934 57.168 68.1431 59.1777 68.1284 C
59.1777 66.583 59.6406 65.4512 60.8945 64.2373 C
59.1719 64.249 57.0723 63.7632 55.5762 63.3721 C
55.3281 64.7002 54.4844 66.2974 53.3398 66.6973 C
53.334 65.8364 53.5996 63.5874 54.4844 62.9214 C
53.6201 62.353 52.3672 60.9751 51.9102 59.2583 C
51.2881 60.583 50.4268 61.8882 48.5645 62.333 C
49.749 63.3862 50.584 65.4033 50.25 66.8691 C
45.1973 62.8872 42.5215 64.1851 41.2324 64.4824 C
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Stripes)
(Stripes) 8.45 4.6001 80.45 76.6001 [
%AI3_Tile
(0 O 0 R 1 0.07 1 0 k
 1 0.07 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 3.6 w 4 M []0 d
0 XR
8.2 8.2 m
80.7 8.2 L
S
8.2 22.6001 m
80.7 22.6001 L
S
8.2 37.0002 m
80.7 37.0002 L
S
8.2 51.4 m
80.7 51.4 L
S
8.2 65.8001 m
80.7 65.8001 L
S
8.2 15.4 m
80.7 15.4 L
S
8.2 29.8001 m
80.7 29.8001 L
S
8.2 44.2 m
80.7 44.2 L
S
8.2 58.6001 m
80.7 58.6001 L
S
8.2 73.0002 m
80.7 73.0002 L
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginBrushPattern
(New Pattern 1)
0 A
u
1 Ap
0 J 0 j 1 w 4 M []0 d
0 XR
-8174.21 8064.3169 m
-8174.21 8040.3169 L
-8224.21 8040.3169 L
-8224.21 8064.3169 L
-8174.21 8064.3169 L
n
u
0 Ap
0 O
1 g
-8194.21 8062.3169 m
-8206.4199 8065.3706 -8214.9043 8055.377 -8224.21 8048.269 C
F
-8184.21 8062.3169 m
-8200.5879 8066.4121 -8210.2617 8047.04 -8224.21 8042.6318 C
F
-8224.21 8042.3169 m
-8204.21 8037.3169 -8194.21 8067.3169 -8174.21 8062.3169 C
F
-8214.209 8042.3169 m
-8197.8301 8038.2222 -8188.1602 8057.5938 -8174.21 8062 C
F
-8204.21 8042.3169 m
-8192 8039.2632 -8183.5166 8049.2559 -8174.21 8056.3657 C
F
-8184.21 8042.3169 m
-8180.5879 8041.4121 -8177.2954 8041.6577 -8174.21 8042.6318 C
F
-8214.209 8062.3169 m
-8217.8311 8063.2222 -8221.125 8062.9761 -8224.21 8062 C
F
-8184.2417 8042.4409 m
-8190.3599 8040.9326 -8194.2412 8042.4409 V
-8198.3369 8040.9648 -8204.2412 8042.4409 V
-8209.2051 8040.7666 -8214.2412 8042.4409 V
-8220.2568 8040.8906 -8224.2412 8042.4409 V
-8224.2412 8062.1265 L
-8221.1563 8063.1006 -8217.7559 8063.3081 -8213.8398 8062.2241 C
-8207.6738 8063.8081 -8203.9229 8062.2241 V
-8198.9229 8063.8081 -8193.8398 8062.1406 V
-8189.5054 8063.7246 -8183.8394 8062.2241 V
-8178.3394 8063.6401 -8174.2417 8062.4409 V
-8174.2417 8042.7568 L
-8176.9849 8041.7456 -8180.1118 8041.2446 -8184.2417 8042.4409 C
f
0 R
0 G
1 J 1 j 0.5 w
-8204.21 8062.3169 m
-8212 8064.2632 -8218.2725 8060.9009 -8224.21 8056.3657 C
S
-8194.21 8062.3169 m
-8206.4199 8065.3706 -8214.9043 8055.377 -8224.21 8048.269 C
S
-8184.21 8062.3169 m
-8200.5879 8066.4121 -8210.2617 8047.04 -8224.21 8042.6318 C
S
-8224.21 8042.3169 m
-8204.21 8037.3169 -8194.21 8067.3169 -8174.21 8062.3169 C
S
-8214.209 8042.3169 m
-8197.8301 8038.2222 -8188.1602 8057.5938 -8174.21 8062 C
S
-8204.21 8042.3169 m
-8192 8039.2632 -8183.5166 8049.2559 -8174.21 8056.3657 C
S
-8194.21 8042.3169 m
-8186.4199 8040.3706 -8180.1465 8043.731 -8174.21 8048.269 C
S
-8184.21 8042.3169 m
-8180.5879 8041.4121 -8177.2954 8041.6577 -8174.21 8042.6318 C
S
-8214.209 8062.3169 m
-8217.8311 8063.2222 -8221.125 8062.9761 -8224.21 8062 C
S
U
U
%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(New Pattern 10)
0 A
u
0 J 0 j 1 w 4 M []0 d
0 XR
-8223.46 8063.3169 m
-8173.3506 8063.3169 L
-8173.3506 8007.292 L
-8223.46 8007.292 L
-8223.46 8063.3169 L
n
u
0 O
0.1 1 1 0 k
-8186.3618 8028.8921 m
-8188.1777 8022.4121 -8198.2852 8025.7822 Y
-8198.25 8025.8462 L
-8208.3594 8022.4785 -8210.1748 8028.957 V
-8216.1348 8046.3232 -8210.9512 8053.0625 V
-8204.2119 8062.6528 -8200.0645 8062.6528 V
-8196.4697 8062.5874 L
-8192.3242 8062.5874 -8185.585 8052.9985 Y
-8180.3999 8046.2593 -8186.3618 8028.8921 Y
f
u
0 0 0 1 k
-8190.853 8007.292 m
-8191.5762 8008.7358 -8192.3848 8009.792 V
-8191.8657 8009.3809 -8190.9746 8008.5088 -8190.853 8007.292 C
f
-8204.5234 8009.8008 m
-8205.3301 8008.749 -8206.0547 8007.3022 Y
-8205.9316 8008.5176 -8205.042 8009.3906 -8204.5234 8009.8008 C
f
U
0 0.61 0.74 0 k
-8190.0562 8031.7778 m
-8191.3638 8027.1118 -8198.6426 8029.5376 Y
-8198.6162 8029.584 L
-8205.8965 8027.1592 -8207.2002 8031.8242 V
-8211.4932 8044.3281 -8207.7617 8049.1792 V
-8202.9092 8056.084 -8199.9229 8056.084 V
-8197.3359 8056.04 L
-8194.3477 8056.04 -8189.4966 8049.1328 Y
-8185.7642 8044.2798 -8190.0562 8031.7778 Y
f
u
1 Ap
0.73 0.43 1 0.22 k
0 R
0 0 0 1 K
-8194.084 8034.5918 m
-8193.2734 8034.5918 -8192.6152 8033.9336 -8192.6152 8033.1265 c
-8192.6152 8032.3169 -8193.2734 8031.6592 -8194.084 8031.6592 c
-8194.8916 8031.6592 -8195.5469 8032.3169 -8195.5469 8033.1265 c
-8195.5469 8033.9336 -8194.8916 8034.5918 -8194.084 8034.5918 c
b
-8193.8242 8046.3154 m
-8192.541 8046.3154 -8191.501 8045.437 -8191.501 8044.3584 c
-8191.501 8043.2793 -8192.541 8042.4033 -8193.8242 8042.4033 c
-8195.1055 8042.4033 -8196.1445 8043.2793 -8196.1445 8044.3584 c
-8196.1445 8045.437 -8195.1055 8046.3154 -8193.8242 8046.3154 c
b
-8193.293 8058.1025 m
-8191.7407 8058.1025 -8190.4839 8057.4482 -8190.4839 8056.6377 c
-8190.4839 8055.8281 -8191.7407 8055.1704 -8193.293 8055.1704 c
-8194.8467 8055.1704 -8196.1055 8055.8281 -8196.1055 8056.6377 c
-8196.1055 8057.4482 -8194.8467 8058.1025 -8193.293 8058.1025 c
b
-8189.0703 8029.8433 m
-8188.3286 8029.8433 -8187.7266 8029.1313 -8187.7266 8028.2529 c
-8187.7266 8027.376 -8188.3286 8026.6641 -8189.0703 8026.6641 c
-8189.813 8026.6641 -8190.4146 8027.376 -8190.4146 8028.2529 c
-8190.4146 8029.1313 -8189.813 8029.8433 -8189.0703 8029.8433 c
b
-8187.4639 8051.3984 m
-8188.3423 8051.0513 -8188.6094 8049.6504 -8188.063 8048.2705 c
-8187.5166 8046.8921 -8186.3618 8046.0537 -8185.4834 8046.4014 c
-8184.605 8046.749 -8184.3369 8048.1489 -8184.8818 8049.5313 c
-8185.4297 8050.9121 -8186.585 8051.749 -8187.4639 8051.3984 c
b
u
-8202.5176 8034.4766 m
-8203.3262 8034.4766 -8203.9844 8033.8184 -8203.9844 8033.0088 c
-8203.9844 8032.2002 -8203.3262 8031.5425 -8202.5176 8031.5425 c
-8201.709 8031.5425 -8201.0498 8032.2002 -8201.0498 8033.0088 c
-8201.0498 8033.8184 -8201.709 8034.4766 -8202.5176 8034.4766 c
b
-8202.7754 8046.1968 m
-8204.0596 8046.1968 -8205.0986 8045.3208 -8205.0986 8044.2417 c
-8205.0986 8043.1626 -8204.0596 8042.2866 -8202.7754 8042.2866 c
-8201.4941 8042.2866 -8200.4551 8043.1626 -8200.4551 8044.2417 c
-8200.4551 8045.3208 -8201.4941 8046.1968 -8202.7754 8046.1968 c
b
-8203.3047 8057.9873 m
-8204.8574 8057.9873 -8206.1162 8057.3311 -8206.1162 8056.52 c
-8206.1162 8055.7104 -8204.8574 8055.0542 -8203.3047 8055.0542 c
-8201.7529 8055.0542 -8200.4941 8055.7104 -8200.4941 8056.52 c
-8200.4941 8057.3311 -8201.7529 8057.9873 -8203.3047 8057.9873 c
b
-8207.5273 8029.7256 m
-8208.2715 8029.7256 -8208.8711 8029.0142 -8208.8711 8028.1377 c
-8208.8711 8027.2617 -8208.2715 8026.5488 -8207.5273 8026.5488 c
-8206.7871 8026.5488 -8206.1826 8027.2617 -8206.1826 8028.1377 c
-8206.1826 8029.0142 -8206.7871 8029.7256 -8207.5273 8029.7256 c
b
-8209.1357 8051.2832 m
-8208.2578 8050.936 -8207.9902 8049.5361 -8208.5352 8048.1553 c
-8209.084 8046.7729 -8210.2383 8045.936 -8211.1162 8046.2832 c
-8211.9941 8046.6328 -8212.2637 8048.0337 -8211.7168 8049.4126 c
-8211.1689 8050.7935 -8210.0146 8051.6318 -8209.1357 8051.2832 c
b
U
U
0 Ap
0 0 0 1 k
-8198.5918 8029.9712 m
-8198.5918 8062.6294 l
F
u
-8182.8511 8015.8462 m
-8183.541 8015.1538 -8186.479 8016.0176 Y
-8187.689 8016.1904 -8187.5166 8018.6113 Y
-8186.479 8020.6846 -8187.1689 8020.5103 Y
-8187.7593 8020.5103 -8189.3154 8020.4302 -8190.2422 8020.3809 C
-8190.5806 8018.9858 -8192.0732 8017.792 -8194.1816 8017.0854 C
-8192.2168 8013.7935 -8193.9785 8013.1113 -8195.7529 8013.1074 C
-8195.7705 8013.0176 -8195.793 8012.9326 -8195.8193 8012.8496 C
-8193.5684 8012.896 -8193.0996 8010.5752 Y
-8192.8652 8010.3809 -8192.6211 8010.1025 -8192.3848 8009.792 C
-8192.6025 8009.9648 -8192.7549 8010.0552 Y
-8193.7188 8010.0552 -8195.3379 8011.8105 -8195.957 8012.5234 C
-8196.3789 8011.7598 -8197.3125 8011.2271 -8198.4023 8011.2271 c
-8199.5293 8011.2271 -8200.4932 8011.7969 -8200.8916 8012.6006 C
-8201.459 8011.9409 -8203.1572 8010.0664 -8204.1543 8010.0664 C
-8204.3066 8009.9746 -8204.5234 8009.8008 V
-8204.2871 8010.1113 -8204.043 8010.3906 -8203.8066 8010.584 C
-8203.3242 8012.9727 -8200.9844 8012.8496 V
-8201.0039 8012.9048 -8201.0273 8012.9609 -8201.041 8013.0176 C
-8204.3848 8013.0088 -8203.3965 8015.6328 -8202.6689 8016.9761 C
-8205.0527 8017.6929 -8206.7246 8019.0176 -8206.9844 8020.5664 C
-8207.9063 8020.6162 -8209.1309 8020.6753 -8209.6396 8020.6753 C
-8210.332 8020.8472 -8209.2949 8018.7744 V
-8209.123 8016.355 -8210.332 8016.1826 V
-8213.2695 8015.3174 -8213.9609 8016.0088 V
-8214.6523 8016.8721 -8215.5176 8015.6641 V
-8214.6523 8017.3921 -8212.752 8016.8721 V
-8210.1582 8016.1826 -8210.8516 8017.9102 V
-8211.3682 8021.3662 -8209.6396 8022.0552 V
-8207.4941 8023.1704 -8205.7422 8023.4048 V
-8205.3682 8023.731 -8204.9238 8024.0273 -8204.418 8024.292 C
-8207.0146 8024.3633 -8209.6836 8025.2368 -8210.5352 8028.271 C
-8210.9746 8029.5601 -8211.5117 8031.5601 V
-8212.5625 8032.1416 -8213.7627 8033.3232 -8215.001 8035.5801 C
-8215.8535 8038.7666 -8216.627 8034.0288 V
-8217.8574 8030.9648 -8219.1104 8030.8545 V
-8217.9307 8032.603 -8218.3643 8033.7329 V
-8216.7598 8038.2329 -8215.0732 8037.2158 V
-8213.5586 8036.5361 -8212.1484 8034.1313 V
-8212.5293 8035.8145 -8212.8926 8037.7329 -8213.1348 8039.707 C
-8213.9492 8039.7134 L
-8215.8105 8038.7969 -8215.7871 8042.2754 V
-8216.582 8046.2617 -8215.8184 8048.9985 V
-8215.1064 8051.4673 -8217.5859 8050.248 V
-8218.7432 8050.6401 -8219.4443 8050.104 V
-8221.8467 8048.731 -8223.46 8050.4409 V
-8221.6074 8050.1968 -8220.9092 8050.7329 V
-8219.4385 8050.8774 -8219.3564 8051.4961 V
-8216.415 8052.1729 -8215.6484 8051.3945 V
-8213.877 8050.5313 -8214.5918 8047.6777 V
-8215.3398 8039.7969 -8213.7803 8041.7222 V
-8213.5781 8041.7393 -8213.3389 8041.835 V
-8213.6123 8045.749 -8213.2627 8049.6416 -8211.4551 8052.167 C
-8214.9141 8044.6489 -8209.7578 8029.6201 Y
-8208.4199 8024.8462 -8202.5869 8025.4194 -8199.6055 8026.0513 C
-8199.5322 8027.4482 -8199.2979 8029.2666 -8198.5918 8029.9712 C
-8197.6738 8028.0142 -8197.6963 8026.3906 V
-8196.5352 8026.0376 -8189.7407 8024.1626 -8186.9087 8027.6528 C
-8187.8911 8025.1294 -8190.2866 8024.3345 -8192.6602 8024.2344 C
-8192.127 8023.9473 -8191.6626 8023.6206 -8191.2847 8023.2666 C
-8189.501 8023.1025 -8187.1689 8021.8945 Y
-8185.4414 8021.2026 -8185.9609 8017.749 Y
-8186.6514 8016.0176 -8184.0591 8016.7104 Y
-8182.1602 8017.2271 -8181.2954 8015.5 Y
-8182.1602 8016.7104 -8182.8511 8015.8462 Y
f
-8177.3682 8050.269 m
-8178.0674 8050.8066 -8179.2222 8050.4102 Y
-8181.7046 8051.6294 -8180.9922 8049.165 Y
-8180.229 8046.4272 -8181.0249 8042.4385 Y
-8181.001 8038.9609 -8182.8618 8039.876 Y
-8183.4946 8039.8721 L
-8183.7798 8037.9297 -8184.1641 8036.0713 -8184.5503 8034.4873 C
-8183.1719 8036.7358 -8181.7378 8037.3809 Y
-8180.0498 8038.3984 -8178.4473 8033.896 Y
-8178.8809 8032.7666 -8177.7007 8031.0176 Y
-8178.9521 8031.1289 -8180.1846 8034.1934 Y
-8180.957 8038.9321 -8181.8105 8035.7432 Y
-8183.0386 8033.5073 -8184.229 8032.3262 -8185.2729 8031.7393 C
-8185.6626 8030.3809 -8185.9458 8029.5552 Y
-8186.1602 8028.7886 -8186.4927 8028.165 -8186.9087 8027.6528 C
-8186.8394 8027.8286 -8186.7778 8028.0142 -8186.7241 8028.208 C
-8180.7622 8045.5752 -8185.9458 8052.3154 V
-8192.6836 8061.9033 -8196.8301 8061.9033 V
-8200.4258 8061.9678 L
-8204.5742 8061.9678 -8211.3125 8052.3774 Y
-8211.3643 8052.312 -8211.4063 8052.2402 -8211.4551 8052.167 C
-8211.1973 8052.731 -8210.8965 8053.2578 -8210.5352 8053.7256 C
-8203.7959 8063.3169 -8199.6484 8063.3169 V
-8196.0547 8063.251 L
-8191.9087 8063.251 -8185.1689 8053.6606 Y
-8183.0386 8050.8945 -8182.7886 8046.3345 -8183.2354 8041.9214 C
-8183.1138 8041.8921 -8183.0303 8041.8838 Y
-8181.4722 8039.9648 -8182.2202 8047.8418 Y
-8182.9346 8050.6953 -8181.1631 8051.5566 Y
-8180.3945 8052.3345 -8177.4546 8051.6592 Y
-8177.373 8051.043 -8175.9038 8050.8975 Y
-8175.2046 8050.3618 -8173.3506 8050.604 Y
-8174.9634 8048.8945 -8177.3682 8050.269 Y
f
U
U
U
%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(New Pattern 2)
0 A
u
0 J 0 j 1 w 4 M []0 d
0 XR
-8223.46 8063.3169 m
-8158.647 8063.3169 L
-8158.647 7999.2192 L
-8223.46 7999.2192 L
-8223.46 8063.3169 L
n
u
0 O
0 g
-8189.1582 8021.7456 m
-8191.0698 7999.2192 L
-8192.9805 8021.7456 L
-8192.3613 8021.6216 -8191.7246 8021.5566 -8191.0698 8021.5566 c
-8190.4146 8021.5566 -8189.7759 8021.6216 -8189.1582 8021.7456 C
f
-8200.7012 8029.7134 m
-8223.46 8031.6465 L
-8200.5742 8033.5889 L
-8200.7441 8032.8633 -8200.8457 8032.1089 -8200.8457 8031.333 c
-8200.8457 8030.7793 -8200.7871 8030.2417 -8200.7012 8029.7134 C
f
-8195.9795 8022.8906 m
-8209.6221 8014.1216 L
-8199.6738 8026.6929 L
-8198.8184 8025.1074 -8197.5322 8023.792 -8195.9795 8022.8906 C
f
-8192.9414 8040.9233 m
-8191.0386 8063.3169 L
-8189.1362 8040.9126 L
-8189.7617 8041.04 -8190.4058 8041.1074 -8191.0698 8041.1074 c
-8191.709 8041.1074 -8192.333 8041.04 -8192.9414 8040.9233 C
f
-8181.4199 8032.8242 m
-8158.647 8030.8906 L
-8181.543 8028.9458 L
-8181.543 8029.1665 L
-8181.3857 8029.8657 -8181.293 8030.5854 -8181.293 8031.333 c
-8181.293 8031.8398 -8181.3457 8032.3369 -8181.4199 8032.8242 C
f
-8199.5742 8036.1416 m
-8209.623 8048.8457 L
-8195.7373 8039.9214 L
-8197.3428 8039.0464 -8198.6719 8037.7329 -8199.5742 8036.1416 C
f
-8182.4546 8026.7104 m
-8172.335 8013.9214 L
-8186.2266 8022.8472 L
-8184.6367 8023.7568 -8183.3218 8025.0962 -8182.4546 8026.7104 C
f
-8186.1489 8039.7681 m
-8172.333 8048.645 L
-8182.4258 8035.8906 L
-8183.2793 8037.5054 -8184.5762 8038.8472 -8186.1489 8039.7681 C
f
-8182.3481 8035.9297 m
-8181.8462 8034.98 -8181.5034 8033.939 -8181.335 8032.8369 c
-8181.2578 8032.3457 -8181.209 8031.8433 -8181.209 8031.333 c
-8181.209 8030.5801 -8181.2998 8029.853 -8181.4585 8029.147 c
-8181.6553 8028.2729 -8181.9639 8027.4409 -8182.377 8026.6704 c
-8183.2559 8025.04 -8184.5791 8023.6914 -8186.1826 8022.772 c
-8187.0889 8022.2534 -8188.083 8021.8706 -8189.1401 8021.6626 c
-8189.7642 8021.5376 -8190.4082 8021.4697 -8191.0698 8021.4697 c
-8191.73 8021.4697 -8192.375 8021.5376 -8192.998 8021.6626 c
-8194.084 8021.877 -8195.0986 8022.2729 -8196.0215 8022.812 c
-8197.5918 8023.7256 -8198.8877 8025.0537 -8199.752 8026.6504 c
-8200.2559 8027.5854 -8200.6055 8028.6128 -8200.7871 8029.6992 c
-8200.875 8030.2329 -8200.9316 8030.7744 -8200.9316 8031.333 c
-8200.9316 8032.1182 -8200.8301 8032.877 -8200.6572 8033.6089 c
-8200.4414 8034.5234 -8200.1016 8035.3906 -8199.6475 8036.1865 c
-8198.7383 8037.7886 -8197.3994 8039.1182 -8195.7773 8039.9985 c
-8194.9092 8040.4712 -8193.9609 8040.8145 -8192.9551 8041.0088 c
-8192.3457 8041.1289 -8191.7134 8041.1953 -8191.0698 8041.1953 c
-8190.4014 8041.1953 -8189.749 8041.125 -8189.1182 8040.9985 c
-8188.0386 8040.7832 -8187.0273 8040.3809 -8186.106 8039.8433 c
-8184.5166 8038.9126 -8183.2114 8037.5601 -8182.3481 8035.9297 c
f
U
U
%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(New Pattern 3)
0 A
u
1 Ap
0 J 0 j 1 w 4 M []0 d
0 XR
-8214.209 8064.3169 m
-8214.209 8040.3169 L
-8224.21 8040.3169 L
-8224.21 8064.3169 L
-8214.209 8064.3169 L
n
u
u
0 Ap
0 O
1 g
-8214.8652 8055.853 m
-8214.4473 8054.752 -8214.209 8053.563 -8214.209 8052.3169 c
-8214.209 8050.4536 -8214.7285 8048.7168 -8215.6143 8047.2241 c
-8217.3574 8044.2905 -8220.5498 8042.3169 -8224.21 8042.3169 C
-8224.21 8062.3169 L
-8223.8896 8062.3169 -8223.5752 8062.2974 -8223.2617 8062.269 c
-8221.3721 8062.0913 -8219.6416 8061.3809 -8218.2041 8060.2993 c
-8216.707 8059.1704 -8215.54 8057.6353 -8214.8652 8055.853 c
f
0 R
0 G
1 J 1 j 0.5 w
-8224.21 8042.6328 m
-8221.1807 8043.5913 -8218.3525 8045.248 -8215.6143 8047.2241 C
S
-8224.21 8048.269 m
-8221.0596 8050.6738 -8218.002 8053.4033 -8214.8652 8055.853 C
S
-8218.2041 8060.2993 m
-8220.2705 8059.208 -8222.2588 8057.8496 -8224.21 8056.3584 C
S
-8223.2617 8062.269 m
-8223.5791 8062.1841 -8223.8975 8062.1016 -8224.21 8062.0034 C
S
-8218.2041 8060.2993 m
-8219.6416 8061.3809 -8221.3721 8062.0913 -8223.2617 8062.269 C
S
-8214.8652 8055.853 m
-8214.4473 8054.752 -8214.209 8053.563 -8214.209 8052.3169 c
-8214.209 8050.4536 -8214.7285 8048.7168 -8215.6143 8047.2241 C
S
-8224.21 8062.3169 m
-8223.8896 8062.3169 -8223.5752 8062.2974 -8223.2617 8062.269 C
S
-8218.2041 8060.2993 m
-8216.707 8059.1704 -8215.54 8057.6353 -8214.8652 8055.853 C
S
-8215.6143 8047.2241 m
-8217.3574 8044.2905 -8220.5498 8042.3169 -8224.21 8042.3169 C
S
U
U
U
%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(New Pattern 34)
0 A
u
0 J 0 j 1 w 4 M []0 d
0 XR
-8223.4854 8063.3442 m
-8167.5142 8063.3442 L
-8167.5142 8001.8496 L
-8223.4854 8001.8496 L
-8223.4854 8063.3442 L
n
u
u
0 O
0.0745 0.9 0.9019 0.18 k
0 R
0 0 0 1 K
1 J 1 j 0.0518 w
-8197.0596 8040.0376 m
-8196.8184 8050.8374 -8202.3389 8061.1553 v
-8201.8594 8063.3169 -8200.4189 8063.3169 v
-8200.6602 8059.957 -8199.6973 8059.4785 v
-8195.3799 8047.4766 -8196.0986 8039.5566 v
-8197.0596 8040.0376 l
b
-8197.0596 8040.0376 m
-8198.7383 8045.3169 -8210.498 8046.5176 v
-8214.8184 8046.9966 -8215.0586 8048.4385 v
-8208.5801 8038.8369 -8207.6211 8039.0767 v
-8220.8193 8033.3169 -8223.46 8028.0361 v
-8218.4189 8030.917 -8215.0586 8028.7568 v
-8207.1406 8028.5176 -8202.1016 8030.6777 v
-8198.2617 8032.5986 -8206.1816 8016.5176 v
-8202.3389 8028.2769 -8198.7383 8001.877 v
-8197.7803 8007.1577 -8196.3398 8008.5986 v
-8190.3394 8016.2769 -8191.2998 8018.4385 v
-8191.7798 8022.2769 -8187.2202 8016.0366 v
-8187.4609 8025.6377 -8189.8599 8028.9966 v
-8192.0186 8032.5986 -8186.0186 8030.4385 v
-8180.0186 8028.5176 -8174.7378 8030.1968 v
-8169.2202 8031.6377 -8167.5391 8028.7568 v
-8179.2998 8041.2368 -8185.0591 8040.9966 v
-8183.3794 8044.5986 l
-8180.979 8049.3975 -8181.4609 8050.5986 v
-8196.7266 8041.2002 -8197.0596 8040.0376 v
b
-8197.0596 8040.0376 m
-8194.4189 8021.5566 -8197.0596 8013.877 v
-8199.459 8003.3169 -8198.7383 8001.877 v
S
-8195.6211 8028.7568 m
-8189.6206 8023.957 -8188.4194 8018.6777 v
S
-8195.6211 8028.0361 m
-8204.498 8020.3569 -8206.1816 8016.5176 v
S
-8167.5391 8028.7568 m
-8168.7378 8030.917 -8196.8184 8039.0767 y
-8201.8594 8033.5586 -8213.3799 8031.1577 v
-8221.0596 8030.1968 -8223.46 8028.0361 v
S
-8214.0986 8046.9966 m
-8202.5801 8037.8774 -8196.8184 8039.0767 y
-8182.6602 8045.3169 -8181.4609 8050.5986 v
S
U
U
U
%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(New Pattern 36)
0 A
u
0 J 0 j 1 w 4 M []0 d
0 XR
-8223.3096 8063.312 m
-8173.4199 8063.312 L
-8173.4199 8012.2417 L
-8223.3096 8012.2417 L
-8223.3096 8063.312 L
n
u
0 O
0.025 0.1 0.475 0 k
-8201.6094 8031.2222 m
-8203.9375 8030.1289 -8206.1514 8029.7598 -8207.833 8030.2402 c
-8208.5117 8030.4336 -8209.1055 8030.7632 -8209.584 8031.2402 c
-8210.0605 8031.7183 -8210.3887 8032.312 -8210.584 8032.9878 c
-8211.4688 8036.0898 -8209.4697 8040.9946 -8205.3828 8045.083 c
-8201.293 8049.1694 -8196.3887 8051.167 -8193.2891 8050.2832 c
-8192.6123 8050.0898 -8192.0186 8049.7598 -8191.541 8049.2817 c
-8191.063 8048.8066 -8190.7354 8048.2129 -8190.541 8047.5337 c
-8189.9785 8045.5625 -8190.5806 8042.8608 -8192.1465 8040.1074 c
-8193.042 8038.5254 -8194.25 8036.9297 -8195.7383 8035.4385 c
-8197.6094 8033.5713 -8199.6504 8032.1406 -8201.6094 8031.2222 c
f
u
0.0035 0.014 0.0665 0 k
-8200.6777 8030.2896 m
-8203.291 8029.3374 -8205.8574 8029.2866 -8207.833 8030.2402 C
-8206.1514 8029.7598 -8203.9375 8030.1289 -8201.6094 8031.2222 c
-8201.0781 8031.4702 -8200.541 8031.7598 -8200.0029 8032.084 C
-8198.3594 8031.3706 L
-8199.127 8030.9336 -8199.9043 8030.5713 -8200.6777 8030.2896 c
f
0.015 0.06 0.285 0 k
-8198.3594 8031.3706 m
-8200.0029 8032.084 L
-8198.5566 8032.9512 -8197.1016 8034.0767 -8195.7383 8035.4385 c
-8195.6152 8035.5664 -8195.4932 8035.6953 -8195.3711 8035.8223 C
-8194.6738 8034.1792 L
-8195.8301 8033.04 -8197.0781 8032.0986 -8198.3594 8031.3706 C
f
U
u
0.039 0.156 0.741 0 k
-8189.1465 8018.7222 m
-8189.4351 8019.0078 -8200.6777 8030.2896 Y
-8199.9043 8030.5713 -8199.127 8030.9336 -8198.3594 8031.3706 C
-8184.875 8017.8862 L
-8186.521 8017.416 -8188.1006 8017.6738 -8189.1465 8018.7222 c
f
0.025 0.1 0.475 0 k
-8184.875 8017.8862 m
-8198.3594 8031.3706 L
-8197.0439 8032.1201 -8195.7559 8033.0913 -8194.5742 8034.2729 c
-8194.5449 8034.3022 -8194.5176 8034.333 -8194.4883 8034.3618 C
-8180.8018 8020.6738 L
-8180.9858 8020.4497 -8181.1807 8020.2305 -8181.3906 8020.0176 c
-8182.4697 8018.939 -8183.689 8018.2241 -8184.875 8017.8862 C
f
U
u
0.0115 0.046 0.2185 0 k
-8175.3945 8027.708 m
-8172.9922 8025.3066 -8172.7954 8021.4063 -8174.5986 8018.0142 C
-8175.7554 8018.4336 L
-8173.5537 8021.812 -8173.2998 8025.6113 -8175.3945 8027.708 c
f
0.015 0.06 0.285 0 k
-8182.9922 8012.9121 m
-8182.042 8012.2417 L
-8184.665 8011.668 -8187.2905 8012.2305 -8189.0806 8014.0225 c
-8187.6313 8012.5742 -8185.3682 8012.248 -8182.9922 8012.9121 C
f
0.0295 0.118 0.5605 0 k
-8182.9922 8012.9121 m
-8185.3682 8012.248 -8187.6313 8012.5742 -8189.0806 8014.0225 c
-8190.479 8015.4214 -8190.8306 8017.5801 -8190.2559 8019.8633 C
-8188.3262 8016.8608 -8184.8682 8017.8706 V
-8183.0449 8012.9473 L
-8182.9922 8012.9121 L
f
*u
1 D
0.048 0.192 0.912 0 k
-8175.3945 8027.708 m
-8176.7407 8029.0542 -8178.793 8029.4297 -8180.9839 8028.9424 C
-8191.1313 8039.0898 L
-8191.229 8038.8838 -8191.229 8038.8838 -8191.1313 8039.0898 c
-8189.6841 8042.1304 -8189.4297 8045.2329 -8190.541 8047.5337 C
-8189.9785 8045.5625 -8190.5806 8042.8608 -8192.1465 8040.1074 c
-8192.9648 8038.6592 -8194.0527 8037.2026 -8195.3711 8035.8223 C
-8194.6738 8034.1792 L
-8194.6426 8034.2114 -8194.6055 8034.2402 -8194.5742 8034.2729 c
-8194.5449 8034.3066 -8194.5176 8034.3345 -8194.4873 8034.3633 c
-8194.4883 8034.3633 -8194.4883 8034.3633 -8194.4883 8034.3618 C
-8180.8018 8020.6738 L
-8175.7866 8018.4448 L
-8175.7554 8018.4336 L
-8173.5537 8021.812 -8173.2998 8025.6113 -8175.3945 8027.708 c
f
*U
0 D
0.0215 0.086 0.4085 0 k
-8182.042 8012.2417 m
-8182.9922 8012.9121 L
-8181.145 8013.4272 -8179.2266 8014.5449 -8177.5737 8016.2002 c
-8176.8662 8016.9048 -8176.2598 8017.6577 -8175.7554 8018.4336 C
-8174.5986 8018.0142 L
-8175.1138 8017.04 -8175.7969 8016.1089 -8176.6401 8015.269 c
-8178.229 8013.6753 -8180.1362 8012.6592 -8182.042 8012.2417 C
f
0.0205 0.082 0.3895 0 k
-8175.7554 8018.4336 m
-8176.2598 8017.6577 -8176.8662 8016.9048 -8177.5737 8016.2002 c
-8179.2266 8014.5449 -8181.145 8013.4272 -8182.9922 8012.9121 C
-8183.0449 8012.9473 L
-8184.8682 8017.8706 L
-8183.6719 8018.2402 -8182.4473 8018.9609 -8181.3906 8020.0176 c
-8181.1807 8020.2305 -8180.9858 8020.4497 -8180.8018 8020.6738 C
-8175.7866 8018.4448 L
-8175.7554 8018.4336 L
f
U
u
0.445 0.356 0.267 0 k
-8223.3096 8063.312 m
-8201.417 8040.2866 L
-8201.6602 8039.9648 -8202.0361 8039.9297 -8202.3477 8039.9761 C
-8206.6396 8044.6064 -8217.7734 8056.772 -8222.1875 8061.5952 C
-8223.0244 8062.668 -8223.46 8063.3096 -8223.3096 8063.312 C
f
0.15 0.12 0.09 0 k
-8223.2939 8063.312 m
-8222.1211 8063.019 -8201.1533 8041.3193 Y
-8201.1533 8040.8184 -8201.2578 8040.4912 -8201.417 8040.2866 C
-8223.3096 8063.312 L
-8223.3037 8063.312 -8223.3018 8063.3169 -8223.2939 8063.312 c
f
0.2 0.16 0.12 0 k
-8222.1875 8061.5952 m
-8217.7734 8056.772 -8206.6396 8044.6064 -8202.3477 8039.9761 C
-8202.6602 8040.021 -8202.9131 8040.1465 Y
-8204.0635 8040.4497 -8218.0352 8056.2793 -8222.1875 8061.5952 C
f
U
U
U
%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(New Pattern 37)
0 A
u
0 J 0 j 1 w 4 M []0 d
0 XR
-8222.4111 8062.5488 m
-8172.4985 8062.5488 L
-8172.4985 7998.4321 L
-8222.4111 7998.4321 L
-8222.4111 8062.5488 L
n
u
0 O
0 0 0 1 k
0 R
0 0 0 1 K
0 w
-8172.6958 7998.4321 m
-8173.0649 7998.5649 -8173.4463 7998.6001 -8173.8418 7998.52 c
-8173.9458 7998.4849 l
-8173.9849 7998.4766 -8174.0303 7998.4961 -8174.061 7998.5161 c
-8174.4014 7998.708 l
-8178.1719 8000.6128 -8181.5562 8003.2129 -8183.9609 8006.7632 c
-8185.4233 8008.9072 -8186.583 8011.1953 -8188.2578 8013.1729 c
-8188.6313 8013.5249 -8188.6362 8014.0898 -8188.293 8014.4482 c
-8187.9551 8014.8169 -8187.377 8014.8242 -8187.021 8014.481 c
-8186.8633 8014.5254 l
-8186.7246 8014.4448 -8186.5337 8014.3872 -8186.4834 8014.2729 c
-8185.313 8011.52 -8184.6489 8008.8296 -8182.8926 8006.4561 c
-8180.6313 8003.4121 -8177.6367 8001.3105 -8174.4897 7999.3384 c
-8173.8281 7998.9214 L
-8173.957 7998.9512 L
-8173.229 7998.9585 l
-8173.2505 7998.9282 -8173.2607 7998.9121 -8173.2817 7998.8818 C
-8173.0649 7998.8398 -8172.8369 7998.7905 -8172.6226 7998.7505 c
-8172.5361 7998.7393 -8172.4766 7998.6558 -8172.4985 7998.5552 c
-8172.5098 7998.4697 -8172.5986 7998.4248 -8172.6958 7998.4321 c
-8172.6958 7998.4321 l
b
-8188.6826 8012.312 m
-8189.0342 8012.123 -8189.4258 8011.9878 -8189.709 8011.7046 c
-8195.9102 8005.4878 -8206.1406 8004.5889 -8213.5098 8011.002 C
-8213.6191 8011.0986 -8213.6191 8011.2729 -8213.5234 8011.3809 C
-8210.5117 8010.2593 -8202.3438 8011.6914 -8198.7813 8014.728 C
-8198.7139 8014.7832 -8198.6055 8014.7705 -8198.5645 8014.688 C
-8198.5098 8014.6206 -8198.5273 8014.5122 -8198.5938 8014.4746 C
-8202.0215 8011.4033 -8206.5273 8009.6064 -8211.1309 8010.0649 C
-8208.3145 8008.502 -8205.0898 8007.8105 -8201.8594 8008.0049 c
-8197.1748 8008.2881 -8192.9229 8010.4351 -8188.8306 8012.5952 c
-8188.751 8012.6353 -8188.6577 8012.6089 -8188.6143 8012.5273 C
-8188.5625 8012.4482 -8188.6025 8012.3521 -8188.6826 8012.312 c
b
-8198.1074 8013.6528 m
-8199.6855 8017.6777 -8201.8516 8021.6377 -8205.2627 8024.3921 c
-8205.4258 8024.5278 -8205.4541 8024.7666 -8205.3301 8024.9214 c
-8205.1934 8025.084 -8204.9639 8025.0962 -8204.8066 8024.9727 c
-8200.584 8022.9126 -8197.6504 8018.4482 -8197.6221 8013.7168 c
-8197.6221 8013.7168 l
-8197.5938 8013.584 -8197.6963 8013.4512 -8197.8223 8013.4385 c
-8197.9639 8013.4214 -8198.0918 8013.5142 -8198.1074 8013.6528 c
-8198.1074 8013.6528 l
b
-8192.4023 8018.3345 m
-8192.501 8018.4985 -8192.5762 8018.6992 -8192.7207 8018.7993 c
-8195.541 8020.707 -8198.4375 8021.9473 -8201.3457 8023.4497 c
-8201.5098 8023.5249 -8201.5723 8023.7344 -8201.4902 8023.8862 c
-8201.4121 8024.04 -8201.2148 8024.0962 -8201.0488 8024.021 c
-8197.8984 8022.6401 -8193.7734 8021.8169 -8192.1309 8018.4961 c
-8192.0879 8018.4272 -8192.1055 8018.3311 -8192.1875 8018.2817 c
-8192.2559 8018.2368 -8192.3574 8018.2666 -8192.4023 8018.3345 c
-8192.4023 8018.3345 l
b
-8192.1191 8019.2344 m
-8191.9038 8019.7456 -8191.6025 8020.2056 -8191.5098 8020.7529 c
-8190.6777 8025.5938 -8190.5762 8030.3584 -8191.709 8035.0049 c
-8191.709 8035.0049 l
-8191.8018 8035.2705 -8191.6719 8035.5601 -8191.4038 8035.6558 c
-8191.1362 8035.7505 -8190.8481 8035.6289 -8190.7529 8035.3647 c
-8188.7529 8030.1289 -8189.3569 8024.0537 -8191.8306 8019.1001 c
-8191.8662 8019.0161 -8191.957 8018.9858 -8192.042 8019.0078 c
-8192.123 8019.0449 -8192.1582 8019.1504 -8192.1191 8019.2344 c
-8192.1191 8019.2344 l
b
-8190.9951 8034.9102 m
-8188.3594 8032.5449 -8186.1426 8029.5698 -8185.313 8026.0537 c
-8185.313 8026.0537 l
-8185.1846 8025.4985 -8185.5337 8024.939 -8186.1025 8024.8066 c
-8186.6602 8024.6914 -8187.2178 8025.04 -8187.3462 8025.5952 c
-8188.0249 8028.8472 -8189.3306 8031.9878 -8191.2559 8034.7041 c
-8191.2559 8034.7041 l
-8191.3066 8034.771 -8191.293 8034.8745 -8191.229 8034.936 c
-8191.1602 8034.9873 -8191.0562 8034.9746 -8190.9951 8034.9102 c
-8190.9951 8034.9102 l
b
-8175.8306 8027.499 m
-8177.1714 8023.1465 -8179.7202 8019.3857 -8183.1489 8016.4697 C
-8183.189 8016.3906 -8183.2847 8016.3486 -8183.3638 8016.4033 C
-8183.4463 8016.4424 -8183.4722 8016.5376 -8183.4302 8016.6182 C
-8183.417 8017.1074 -8183.1743 8017.5488 -8182.9058 8017.8472 c
-8177.8662 8023.4785 -8174.4502 8032.0361 -8176.8018 8039.271 C
-8176.5361 8033.7681 -8178.1826 8027.6182 -8181.5967 8022.9902 c
-8182.6206 8021.5854 -8184.2026 8021.4385 -8185.7666 8021.52 C
-8185.8623 8021.5054 -8185.9434 8021.5601 -8185.9551 8021.6528 c
-8185.9697 8021.7344 -8185.9146 8021.8296 -8185.8223 8021.8418 C
-8182.6079 8023.0854 -8180.9482 8026.541 -8179.5449 8029.5103 c
-8177.875 8033.061 -8177.1602 8036.957 -8177.4658 8040.8169 C
-8177.5054 8040.9946 -8177.5737 8042.7134 -8177.437 8042.7256 C
-8177.2905 8042.7568 -8177.1689 8042.6592 -8177.1401 8042.5103 C
-8177.105 8042.3618 -8174.1025 8033.1152 -8175.8306 8027.499 c
b
-8183.9458 8014.8081 m
-8182.853 8010.939 -8180.5698 8007.5664 -8177.9434 8004.5552 c
-8177.7886 8004.4209 -8177.7729 8004.2041 -8177.9097 8004.0513 c
-8178.0361 8003.917 -8178.2642 8003.8994 -8178.417 8004.0337 c
-8181.7886 8006.6489 -8182.9087 8010.8569 -8184.2559 8014.6914 c
-8184.2559 8014.6914 l
-8184.2866 8014.7817 -8184.2354 8014.875 -8184.1582 8014.9033 c
-8184.0698 8014.936 -8183.9766 8014.8838 -8183.9458 8014.8081 c
-8183.9458 8014.8081 l
b
-8177.9897 8039.4248 m
-8178.0591 8039.373 -8178.167 8039.3984 -8178.209 8039.4673 C
-8178.4233 8039.7905 -8180.1514 8041.8369 -8180.853 8042.4561 c
-8185.6313 8046.7104 -8188.9727 8051.2769 -8196.998 8055.04 c
-8203.9102 8058.2798 -8206.5703 8060.9121 -8213.8467 8059.1416 c
-8217.1465 8058.3457 -8218.4912 8057.8472 -8219.8955 8052.771 C
-8221.4072 8046.6162 -8220.3271 8049.1001 -8220.5439 8041.7544 c
-8220.6826 8037.0142 -8223.46 8025.771 -8210.9844 8011.5752 C
-8210.8799 8011.4658 -8210.8926 8011.312 -8210.9922 8011.2241 C
-8211.0938 8011.1201 -8211.2559 8011.1328 -8211.3467 8011.2329 C
-8217.0371 8016.0337 -8220.4824 8022.9746 -8221.7744 8030.2593 c
-8222.7471 8035.7832 -8222.3799 8040.5664 -8222.126 8046.9536 c
-8222.0283 8049.4102 -8223.1455 8056.3906 -8218.3701 8060.3794 c
-8214.8516 8063.3169 -8209.8516 8062.8633 -8205.8125 8061.4746 c
-8200.1602 8059.5278 -8195.4316 8056.4624 -8190.3306 8052.9248 c
-8186.7266 8050.4409 -8178.7471 8040.6006 -8177.938 8039.6416 C
-8177.8945 8039.5752 -8177.9097 8039.4673 -8177.9897 8039.4248 C
b
-8212.5098 8026.6216 m
-8211.6279 8025.8193 -8211.1602 8027.1626 -8210.8887 8027.9185 c
-8210.6221 8028.6738 -8209.6484 8028.5664 -8209.9727 8028.8906 c
-8210.2959 8029.2134 -8210.2959 8029.269 -8210.7832 8028.8369 c
-8211.2676 8028.4048 -8211.2676 8029.0537 -8212.0254 8028.5664 c
-8212.7803 8028.0801 -8213.1055 8027.1626 -8212.5098 8026.6216 c
b
-8205.1123 8031.2666 m
-8204.8242 8030.9072 -8204.1406 8030.8906 -8203.9258 8031.2114 c
-8203.709 8031.5361 -8202.7891 8031.5889 -8202.9521 8031.9126 c
-8203.1133 8032.2402 -8203.0605 8032.4561 -8203.5469 8032.2402 c
-8204.0322 8032.0225 -8203.8711 8032.6162 -8204.3574 8032.4014 c
-8204.8418 8032.1841 -8205.3291 8031.5361 -8205.1123 8031.2666 c
b
-8197.0664 8036.395 m
-8196.5801 8036.0718 -8195.3389 8036.8281 -8195.9316 8036.8281 c
-8196.5273 8036.8281 -8195.7715 8037.584 -8196.3105 8037.7998 c
-8196.8516 8038.0161 -8196.7441 8037.7456 -8197.0664 8037.9609 c
-8197.3887 8038.1777 -8197.8223 8038.5552 -8197.9844 8037.7456 c
-8198.1465 8036.936 -8197.8223 8036.936 -8197.4434 8036.6665 c
-8197.0664 8036.395 -8197.0664 8036.395 y
b
-8211.7012 8036.6665 m
-8210.5684 8036.5586 -8211.3223 8037.3154 -8210.7285 8037.7998 c
-8210.1348 8038.2866 -8209.377 8038.9336 -8210.1895 8038.7168 c
-8210.998 8038.502 -8212.4551 8038.9878 -8212.4023 8037.8545 c
-8212.3477 8036.7202 -8212.0938 8036.7041 -8211.7012 8036.6665 c
b
-8206.0313 8044.9282 m
-8205.5625 8044.6592 -8206.1406 8045.0361 -8205.4902 8044.9282 c
-8204.8418 8044.8208 -8204.249 8044.9282 -8204.6797 8045.144 c
-8205.1123 8045.3599 -8205.7617 8045.4697 -8205.9229 8045.3066 c
-8206.085 8045.144 -8206.4063 8045.144 -8206.0313 8044.9282 c
b
-8196.5273 8044.4961 m
-8196.9375 8043.4961 -8195.5566 8043.7393 -8194.9063 8044.0625 c
-8194.2598 8044.3906 -8193.2861 8043.7935 -8193.8799 8044.2256 c
-8194.4727 8044.6577 -8194.2598 8044.2256 -8194.8525 8044.5488 c
-8195.4473 8044.8721 -8196.1484 8045.4136 -8196.5273 8044.4961 c
b
-8212.1348 8050.3833 m
-8212.1816 8049.3921 -8211.2676 8050.2729 -8210.7285 8050.3281 c
-8210.1895 8050.3833 -8209.5391 8050.3833 -8209.7031 8050.5986 c
-8209.8633 8050.8145 -8209.9199 8050.8145 -8210.6221 8051.0288 c
-8211.3223 8051.2456 -8212.0781 8051.4609 -8212.1348 8050.3833 c
b
-8212.6191 8044.9282 m
-8213.5273 8045.291 -8213.7529 8045.1968 -8214.0215 8045.5234 c
-8214.293 8045.8457 -8214.6152 8046.5464 -8214.9951 8045.4136 c
-8215.3711 8044.2793 -8214.8867 8043.0918 -8214.5078 8043.2534 c
-8214.1309 8043.416 -8213.7529 8044.0625 -8213.3213 8044.2793 c
-8212.8887 8044.4961 -8212.0781 8044.7104 -8212.6191 8044.9282 c
b
U
U
%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(New Pattern 41)
0 A
u
0 J 0 j 1 w 4 M []0 d
0 XR
-8223.46 8063.3169 m
-8142.4609 8063.3169 L
-8142.4609 7958.3169 L
-8223.46 7958.3169 L
-8223.46 8063.3169 L
n
u
u
u
0 O
0 0 0 1 k
-8205.2656 7975.7422 m
-8205.5332 7973.9785 -8206.6201 7972.6064 -8207.9844 7972.7129 c
-8209.3467 7972.8184 -8210.168 7974.3394 -8210.2041 7976.123 c
-8210.209 7976.3857 -8210.1348 7977.5601 -8210.0898 7977.7935 C
-8210.0986 7977.8994 -8210.0781 7977.9902 -8210.0703 7978.0977 c
-8209.9746 7979.3408 -8208.8184 7980.6768 -8207.4023 7980.5664 c
-8205.9844 7980.4561 -8204.9492 7979.1777 -8205.0957 7977.7886 c
-8205.1045 7977.7241 -8205.1563 7976.9424 -8205.168 7976.8784 C
-8205.1426 7976.6006 -8205.2207 7976.043 -8205.2656 7975.7422 c
f
-8215.7246 7985.0498 m
-8216.4551 7993.2329 -8210.9609 7992.4351 v
-8207.8281 7991.3345 -8208.9004 7988.438 v
-8209.1025 7987.0688 -8211.2441 7985.8145 v
-8211.6055 7985.5664 -8212.2227 7984.4194 v
-8212.5889 7982.9126 -8213.9785 7982.6143 v
-8215.5361 7982.5664 -8215.7246 7985.0498 v
f
-8190.2246 7993.814 m
F
-8189.5361 7991.6577 m
-8190.2441 7990.5088 -8193.3457 7990.9438 Y
-8194.2715 7991.0049 -8194.8398 7990.4272 Y
-8197.2988 7986.4082 -8200.498 7987.2026 -8200.8682 7987.3096 C
-8200.8701 7987.3022 L
-8204.459 7987.9209 -8204.7266 7992.9199 V
-8204.9512 7993.6992 -8205.7949 7994.0854 V
-8208.7305 7995.1777 -8208.8086 7996.5249 V
-8209.3594 7998.4321 -8207.0605 7999.0586 V
-8205.1406 7999.5737 -8203.249 7997.2114 V
-8202.0713 7995.9961 -8199.0361 7995.2559 V
-8199.0322 7995.2695 L
-8195.8193 7994.3633 -8194.0996 7994.9048 Y
-8191.313 7996.084 -8189.8662 7994.7168 Y
-8188.1426 7993.0718 -8189.5361 7991.6577 Y
f
-8203.4434 7975.1953 m
-8204.0459 7973.5166 -8203.7422 7971.7935 -8202.4932 7971.2402 c
-8201.2441 7970.6841 -8199.7988 7971.6328 -8198.9189 7973.1841 c
-8198.7881 7973.4121 -8198.2959 7974.481 -8198.2227 7974.707 C
-8198.166 7974.7954 -8198.1406 7974.8838 -8198.0957 7974.9824 c
-8197.5889 7976.125 -8197.9727 7977.8462 -8199.2705 7978.4238 c
-8200.5693 7979.002 -8202.0879 7978.3706 -8202.6191 7977.0786 c
-8202.6436 7977.0161 -8202.9668 7976.3057 -8202.9902 7976.2432 C
-8203.1426 7976.0127 -8203.3418 7975.4834 -8203.4434 7975.1953 c
f
-8189.1738 7978.248 m
-8184.6401 7985.0986 -8189.8511 7987.0112 v
-8193.1309 7987.5337 -8193.5635 7984.4746 v
-8194.0391 7983.1729 -8192.749 7981.0513 v
-8192.5508 7980.6606 -8192.5537 7979.3569 v
-8192.9453 7977.8608 -8191.8682 7976.9336 v
-8190.5186 7976.1519 -8189.1738 7978.248 v
f
U
u
-8164.1958 8027.4238 m
-8163.8286 8025.6782 -8164.3647 8024.0127 -8165.6777 8023.6328 c
-8166.9922 8023.2534 -8168.2954 8024.3921 -8168.9546 8026.0498 c
-8169.0498 8026.2935 -8169.3926 8027.4194 -8169.4346 8027.6528 C
-8169.4766 8027.749 -8169.4922 8027.8418 -8169.5234 8027.9438 c
-8169.8682 8029.144 -8169.2529 8030.7969 -8167.8882 8031.1904 c
-8166.5234 8031.5854 -8165.105 8030.7529 -8164.7578 8029.4014 c
-8164.7402 8029.3369 -8164.5161 8028.5874 -8164.5034 8028.5234 C
-8164.3809 8028.271 -8164.2578 8027.7222 -8164.1958 8027.4238 c
f
-8177.7305 8031.9336 m
-8181.2842 8039.3408 -8175.8599 8040.5234 v
-8172.541 8040.5918 -8172.5298 8037.5 v
-8172.2378 8036.147 -8173.8042 8034.2241 v
-8174.0542 8033.8623 -8174.229 8032.5703 v
-8174.0454 8031.0352 -8175.2402 8030.2666 v
-8176.6826 8029.6753 -8177.7305 8031.9336 v
f
-8156.9258 8049.0854 m
F
-8155.5234 8047.3081 m
-8155.7842 8045.9858 -8158.8394 8045.3057 Y
-8159.73 8045.0361 -8160.0586 8044.2959 Y
-8160.9521 8039.6694 -8164.2266 8039.291 -8164.6094 8039.2617 C
-8164.6094 8039.2559 L
-8168.187 8038.5752 -8170.1914 8043.1631 V
-8170.6753 8043.812 -8171.6025 8043.8784 V
-8174.7319 8043.8721 -8175.2778 8045.106 V
-8176.4639 8046.6968 -8174.5322 8048.0918 V
-8172.9126 8049.248 -8170.313 8047.6978 V
-8168.7842 8046.9746 -8165.6826 8047.3457 V
-8165.6831 8047.3584 L
-8162.3569 8047.6377 -8160.937 8048.749 Y
-8158.7402 8050.8306 -8156.9058 8050.061 Y
-8154.7153 8049.1216 -8155.5234 8047.3081 Y
f
-8162.2974 8027.5518 m
-8162.2729 8025.7681 -8161.3857 8024.2617 -8160.021 8024.1792 c
-8158.6543 8024.0977 -8157.6338 8025.4946 -8157.3545 8027.2544 c
-8157.314 8027.5142 -8157.2266 8028.688 -8157.2378 8028.9248 C
-8157.2153 8029.0273 -8157.2217 8029.1201 -8157.2153 8029.229 c
-8157.1401 8030.4766 -8158.105 8031.9536 -8159.5234 8032.0376 c
-8160.9414 8032.123 -8162.1426 8030.9985 -8162.1846 8029.603 c
-8162.187 8029.5376 -8162.2422 8028.7568 -8162.2402 8028.6914 C
-8162.3042 8028.4209 -8162.3018 8027.8569 -8162.2974 8027.5518 c
f
-8150.4785 8034.8784 m
-8148.6377 8042.8838 -8154.187 8042.8462 v
-8157.4434 8042.1855 -8156.7754 8039.167 v
-8156.7642 8037.7832 -8154.813 8036.248 v
-8154.4878 8035.9536 -8154.0342 8034.731 v
-8153.877 8033.1934 -8152.543 8032.7041 v
-8151.0049 8032.4448 -8150.4785 8034.8784 v
f
U
U
1 Ap
-8223.46 8063.3169 m
-8223.46 7958.3169 L
-8142.4609 7958.3169 L
-8142.4609 8063.3169 L
-8223.46 8063.3169 L
n
U
U
%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(New Pattern 42)
0 A
u
0 Ap
0 J 0 j 1 w 4 M []0 d
0 XR
-8196.9209 8036.4014 m
-8224.46 8036.4014 L
-8224.46 8063.9409 L
-8196.9209 8063.9409 L
-8196.9209 8036.4014 L
n
0 O
0 0.55 1 0.12 k
-8211.2207 8054.6782 m
-8211.2207 8064.3169 L
-8210.0938 8064.3169 L
-8210.0938 8054.6782 L
-8211.2207 8054.6782 L
f
0 0.55 1 0.3 k
-8214.8828 8050.1934 m
-8213.7705 8048.4712 -8210.3398 8046.7729 -8205.957 8046.7729 c
-8201.5762 8046.7729 -8198.0732 8048.4214 -8197.0313 8050.1904 C
-8197.0313 8050.1904 L
-8198.0732 8051.917 -8201.5762 8053.6143 -8205.957 8053.6143 c
-8210.3359 8053.6143 -8213.7832 8051.8774 -8214.8828 8050.1934 C
f
U
%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(New Pattern 45)
0 A
u
0 J 0 j 1 w 4 M []0 d
0 XR
-8224.46 8021.2344 m
-8224.46 8064.3169 L
-8137.6802 8064.3169 L
-8137.6802 8021.2344 L
-8224.46 8021.2344 L
n
u
u
0 O
0 0 0 1 k
-8164.6802 8050.5537 m
-8164.6802 8058.3906 L
-8152.6802 8051.4609 L
-8140.6802 8044.5337 L
-8152.6802 8037.6064 L
-8164.6802 8030.6777 L
-8164.6802 8038.7993 L
-8223.3955 8025.0337 L
-8210.4473 8044.1201 L
-8224.46 8064.3169 L
-8164.6802 8050.5537 L
f
0 1 1 0.1 k
0 R
0 0 0 1 K
-8162.6802 8047.5537 m
-8162.6802 8055.3906 L
-8150.6802 8048.4609 L
-8138.6802 8041.5337 L
-8150.6802 8034.6064 L
-8162.6802 8027.6777 L
-8162.6802 8035.7993 L
-8221.3955 8022.0337 L
-8206.7354 8041.6753 L
-8221.3955 8061.3169 L
-8162.6802 8047.5537 L
b
U
U
U
%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(New Pattern 5)
0 A
u
0 J 0 j 1 w 4 M []0 d
0 XR
-8065.8594 8064.3169 m
-8065.8594 8050.7358 L
-8224.46 8050.7358 L
-8224.46 8064.3169 L
-8065.8594 8064.3169 L
n
u
u
0 O
0.285 0.228 0.171 0 k
-8080.5391 8062.8008 m
-8080.5034 8064.0054 L
-8066.9697 8064.835 -8066.3018 8063.5986 v
-8066.2041 8063.4194 -8066.1074 8063.0322 -8066.021 8062.5088 C
-8068.0439 8063.1406 -8077.751 8062.8872 -8080.5391 8062.8008 C
f
0.44 0.352 0.264 0 k
-8080.8662 8051.3384 m
-8080.8306 8052.584 L
-8077.9521 8052.3657 -8067.6514 8051.6328 -8066.0034 8052.1826 C
-8066.1631 8051.5361 -8066.3799 8051.0801 -8066.665 8050.9321 c
-8068.2905 8050.0825 -8080.8662 8051.3384 Y
f
0.145 0.116 0.087 0 k
-8080.8306 8052.584 m
-8080.5391 8062.8008 L
-8077.751 8062.8872 -8068.0439 8063.1406 -8066.021 8062.5088 C
-8065.6118 8060.0938 -8065.3857 8054.6777 -8066.0034 8052.1826 C
-8067.6514 8051.6328 -8077.9521 8052.3657 -8080.8306 8052.584 C
f
U
u
0.155 0.124 0.093 0 k
-8106.397 8056.5889 m
-8105.3569 8056.9727 L
-8086.5327 8052.4624 L
-8086.9409 8051.6294 L
-8105.8223 8054.04 L
-8106.7119 8054.3232 L
-8107.1113 8054.2114 -8107.6538 8054.1406 V
-8107.0698 8054.5537 -8106.6025 8055.4561 -8106.397 8056.5889 C
f
u
0.085 0.068 0.051 0 k
-8111.2578 8060.9824 m
-8112.0562 8061.0376 -8109.209 8060.98 Y
-8109.8066 8060.3345 -8110.231 8059.1377 -8110.269 8057.7534 c
-8110.2759 8057.541 -8110.269 8057.3345 -8110.2578 8057.1294 C
-8110.501 8057.0225 -8110.5513 8057.0898 -8111.0879 8056.8818 C
-8110.4609 8060.9282 -8111.2578 8060.9824 v
f
0.305 0.244 0.183 0 k
-8109.8047 8054.1841 m
-8110.0127 8054.1265 -8109.9521 8056.248 Y
-8108.938 8057.0752 L
-8107.2959 8056.2593 L
-8106.397 8056.5889 L
-8106.6025 8055.4561 -8107.0698 8054.5537 -8107.6538 8054.1406 C
-8108.0698 8054.0898 -8109.333 8054.1152 -8109.8047 8054.1841 C
f
U
0.115 0.092 0.069 0 k
-8106.397 8056.5889 m
-8107.2959 8056.2593 L
-8108.938 8057.0752 L
-8109.9521 8056.248 L
-8110.2529 8057.0249 -8110.2578 8057.1294 V
-8108.9727 8057.6953 -8107.6431 8058.0552 -8106.2998 8058.2417 C
-8106.25 8058.0449 -8106.2441 8057.8584 -8106.25 8057.6528 c
-8106.2598 8057.2881 -8106.2817 8056.9336 -8106.397 8056.5889 C
f
0.41 0.328 0.246 0 k
-8086.9102 8052.7129 m
-8088.8369 8053.9585 -8097.8462 8059.4136 -8106.2998 8058.2417 C
-8106.3638 8059.4102 -8106.709 8060.4082 -8107.21 8060.979 C
-8106.6489 8060.9785 L
-8086.2002 8064.0718 L
-8086.4966 8053.7422 L
-8086.5327 8052.4624 L
-8086.665 8052.5537 -8086.9102 8052.7129 v
f
0.395 0.316 0.237 0 k
-8110.269 8057.7534 m
-8110.231 8059.1377 -8109.8066 8060.3345 -8109.209 8060.98 C
-8107.1401 8060.979 L
-8106.6377 8060.4082 -8106.2817 8059.3872 -8106.2998 8058.2417 C
-8107.6431 8058.0552 -8108.9727 8057.6953 -8110.2578 8057.1294 C
-8110.269 8057.3345 -8110.2759 8057.541 -8110.269 8057.7534 c
f
U
u
0 0 0 0.11 k
-8080.7246 8051.5176 m
-8079.7007 8051.3521 L
-8080.7246 8051.5176 L
-8080.7246 8051.5176 L
f
0 0 0 0.34 k
-8086.9409 8051.6294 m
-8086.5327 8052.4624 L
-8085.1313 8052.2344 L
-8083.9839 8052.0479 L
-8082.1362 8051.749 L
-8080.7246 8051.5176 L
-8079.7007 8051.3521 L
-8079.7554 8051.0337 -8079.8281 8050.8145 -8079.9258 8050.7358 C
-8086.9409 8051.6294 L
f
0 0 0 0.32 k
-8085.2642 8056.5234 m
-8085.501 8064.1777 L
-8080.1743 8064.3169 L
-8079.187 8060.8296 -8079.6426 8056.4702 V
-8085.2642 8056.5234 L
f
U
0.025 0.02 0.015 0 k
-8078.7817 8053.7026 m
-8075.833 8054.2368 -8072.7007 8054.4766 -8069.7759 8053.6777 c
-8069.7441 8053.6665 -8069.7354 8053.6353 -8069.7471 8053.6128 c
-8069.7471 8053.5825 -8069.7798 8053.5728 -8069.8018 8053.5728 c
-8072.7026 8054.3809 -8075.8345 8054.1406 -8078.7642 8053.5952 c
-8078.7866 8053.5952 -8078.8174 8053.6064 -8078.8281 8053.6382 c
-8078.8262 8053.6592 -8078.8154 8053.6914 -8078.7817 8053.7026 c
-8078.7817 8053.7026 l
f
-8077.2974 8052.624 m
-8077.189 8052.6953 -8077.0898 8052.8105 -8076.9839 8052.8184 c
-8073.249 8053.1489 -8069.6226 8053.0986 -8065.9346 8052.98 c
-8065.9126 8052.98 -8065.8799 8052.9585 -8065.8809 8052.939 c
-8065.8809 8052.9038 -8065.9146 8052.8838 -8065.937 8052.8838 c
-8068.7817 8052.9985 -8071.5986 8053.0161 -8074.4639 8052.853 c
-8075.3945 8052.792 -8076.3682 8053.0552 -8077.2383 8052.5376 c
-8077.2578 8052.5273 -8077.2905 8052.5273 -8077.3105 8052.5488 c
-8077.3218 8052.5728 -8077.3193 8052.603 -8077.2974 8052.624 c
-8077.2974 8052.624 l
f
-8072.833 8054.6841 m
-8070.9697 8055.9961 -8068.7622 8056.6914 -8066.5586 8057.2041 c
-8066.5273 8057.2129 -8066.5054 8057.2026 -8066.4966 8057.1694 c
-8066.4873 8057.1377 -8066.5098 8057.1182 -8066.5298 8057.1074 c
-8068.7202 8056.5825 -8070.9194 8055.9209 -8072.7705 8054.5986 c
-8072.8018 8054.5752 -8072.8345 8054.5889 -8072.8447 8054.6089 c
-8072.8657 8054.6294 -8072.853 8054.6626 -8072.833 8054.6841 c
-8072.833 8054.6841 l
f
-8078.3906 8061.373 m
-8076.189 8061.8862 -8073.9897 8062.3472 -8071.7402 8062.5918 c
-8071.7202 8062.6006 -8071.689 8062.5801 -8071.689 8062.5586 c
-8071.6777 8062.5249 -8071.7007 8062.4946 -8071.7319 8062.4961 c
-8073.9727 8062.1968 -8076.189 8061.835 -8078.3721 8061.2666 c
-8078.3945 8061.269 -8078.4258 8061.2793 -8078.437 8061.3105 c
-8078.4351 8061.333 -8078.4258 8061.3647 -8078.3906 8061.373 c
-8078.3906 8061.373 l
f
-8077.8994 8060.6777 m
-8075.8047 8061.5142 -8073.5625 8061.2456 -8071.3618 8061.2793 c
-8071.3306 8061.2769 -8071.3105 8061.2559 -8071.3105 8061.2241 c
-8071.3105 8061.1904 -8071.333 8061.1729 -8071.354 8061.1729 c
-8073.5537 8061.1592 -8075.7969 8061.416 -8077.8799 8060.5698 c
-8077.9038 8060.5713 -8077.9346 8060.5825 -8077.9434 8060.6128 c
-8077.9434 8060.6353 -8077.9321 8060.667 -8077.8994 8060.6777 c
-8077.8994 8060.6777 l
f
-8077.167 8062.0225 m
-8075.8418 8062.0688 -8074.6094 8061.8633 -8073.2866 8061.5249 c
-8072.8193 8061.416 -8072.3799 8061.5425 -8071.9209 8061.5288 c
-8071.3569 8061.5142 l
-8071.333 8061.5142 -8071.3218 8061.502 -8071.314 8061.4897 c
-8071.293 8061.4697 -8071.3042 8061.4385 -8071.3257 8061.416 c
-8071.522 8061.2617 l
-8071.5337 8061.2617 -8071.5449 8061.2529 -8071.5562 8061.2529 c
-8071.9609 8061.2632 l
-8073.4146 8061.5073 -8074.917 8061.9878 -8076.353 8061.3906 c
-8076.3857 8061.3809 -8076.417 8061.4033 -8076.4258 8061.4238 c
-8076.4258 8061.4561 -8076.4146 8061.4766 -8076.3945 8061.4873 c
-8075.1074 8062.0161 -8073.6313 8061.792 -8072.3423 8061.373 c
-8071.5513 8061.3584 L
-8071.585 8061.3496 L
-8071.3887 8061.5049 L
-8071.3594 8061.4063 L
-8071.9233 8061.4214 l
-8072.3906 8061.4561 -8072.8447 8061.2993 -8073.2998 8061.4209 c
-8074.6143 8061.7778 -8075.8569 8061.9409 -8077.1689 8061.915 c
-8077.2026 8061.917 -8077.2222 8061.939 -8077.2207 8061.9697 c
-8077.2207 8062.002 -8077.2002 8062.0225 -8077.167 8062.0225 c
-8077.167 8062.0225 l
f
-8078.0322 8062.377 m
-8075.3306 8063.5376 -8072.3618 8062.8862 -8069.5879 8062.4985 c
-8069.2441 8062.6064 l
-8069.2207 8062.6162 -8069.2002 8062.603 -8069.1807 8062.5825 c
-8069.1689 8062.5601 -8069.1807 8062.5288 -8069.2026 8062.5176 c
-8069.5391 8062.3262 l
-8072.2354 8061.708 -8074.9985 8062.0986 -8077.7305 8062.1016 c
-8077.7622 8062.104 -8077.7842 8062.125 -8077.7817 8062.1553 c
-8077.7798 8062.188 -8077.7583 8062.208 -8077.7266 8062.208 c
-8075.1343 8062.2529 -8072.4897 8061.7598 -8069.9321 8062.3906 c
-8069.2559 8062.6064 L
-8069.2129 8062.5073 L
-8069.6006 8062.4033 l
-8072.3662 8062.7598 -8075.3018 8063.4512 -8077.9897 8062.291 c
-8078.0127 8062.2817 -8078.0449 8062.2817 -8078.0562 8062.3154 c
-8078.0649 8062.3369 -8078.0649 8062.3672 -8078.0322 8062.377 c
-8078.0322 8062.377 l
f
-8075.1489 8055.7104 m
-8073.853 8056.2168 -8072.4434 8055.9624 -8071.1401 8055.6592 c
-8071.1074 8055.6577 -8071.0962 8055.6377 -8071.0986 8055.6064 c
-8071.1113 8055.5737 -8071.1313 8055.5625 -8071.1631 8055.5649 c
-8072.4585 8055.8462 -8073.8369 8056.1313 -8075.1113 8055.6128 c
-8075.1426 8055.603 -8075.1743 8055.6162 -8075.1846 8055.6479 c
-8075.1826 8055.6689 -8075.1714 8055.7026 -8075.1489 8055.7104 c
-8075.1489 8055.7104 l
f
-8075.5986 8057.5376 m
-8073.6846 8058.0054 -8071.7729 8058.4209 -8069.8154 8058.6401 c
-8069.7842 8058.6504 -8069.7622 8058.6289 -8069.7529 8058.5986 c
-8069.7554 8058.5752 -8069.7759 8058.5449 -8069.7969 8058.5449 c
-8071.7559 8058.3232 -8073.6689 8057.8994 -8075.5801 8057.4297 c
-8075.6025 8057.4321 -8075.6338 8057.4424 -8075.6431 8057.4746 c
-8075.6431 8057.4961 -8075.6313 8057.5273 -8075.5986 8057.5376 c
-8075.5986 8057.5376 l
f
-8076.3945 8059.9512 m
-8073.959 8060.7778 -8071.3247 8060.373 -8068.8047 8060.4048 c
-8068.7729 8060.4048 -8068.7529 8060.3833 -8068.7529 8060.3496 c
-8068.7554 8060.3281 -8068.7759 8060.3086 -8068.8066 8060.3086 c
-8071.3169 8060.2329 -8073.9409 8060.7026 -8076.354 8059.8433 c
-8076.3887 8059.8433 -8076.4194 8059.856 -8076.4287 8059.877 c
-8076.4282 8059.9072 -8076.4146 8059.9409 -8076.3945 8059.9512 c
-8076.3945 8059.9512 l
f
-8071.5142 8061.1665 m
-8070.1177 8061.8608 -8068.5098 8061.7202 -8066.9946 8061.7832 c
-8066.9609 8061.7817 -8066.9434 8061.7598 -8066.9434 8061.728 c
-8066.9434 8061.707 -8066.9658 8061.6753 -8066.9961 8061.6753 c
-8068.4722 8061.5376 -8070.1079 8061.8398 -8071.4639 8061.0786 c
-8071.4966 8061.0688 -8071.5273 8061.0801 -8071.5391 8061.1025 c
-8071.5474 8061.125 -8071.5361 8061.1553 -8071.5142 8061.1665 c
-8071.5142 8061.1665 l
f
-8070.8018 8057.7417 m
-8069.853 8057.7134 -8068.8926 8057.6865 -8067.9434 8057.6592 c
-8067.9126 8057.6577 -8067.8911 8057.6377 -8067.8926 8057.604 c
-8067.8926 8057.5728 -8067.9146 8057.5518 -8067.9482 8057.5537 c
-8068.897 8057.5801 -8069.8569 8057.6064 -8070.8047 8057.6353 c
-8070.8369 8057.6353 -8070.8569 8057.6577 -8070.8569 8057.689 c
-8070.8569 8057.7222 -8070.834 8057.7422 -8070.8018 8057.7417 c
-8070.8018 8057.7417 l
f
-8068.6201 8055.3521 m
-8068.1489 8055.3809 -8067.6689 8055.3906 -8067.1978 8055.4082 c
-8067.1777 8055.4082 -8067.146 8055.3848 -8067.146 8055.3545 c
-8067.1465 8055.3198 -8067.1689 8055.3008 -8067.2002 8055.3008 c
-8067.6719 8055.3042 -8068.1426 8055.2534 -8068.6094 8055.2559 c
-8068.6431 8055.2456 -8068.6626 8055.269 -8068.6738 8055.3008 c
-8068.6719 8055.333 -8068.6514 8055.3545 -8068.6201 8055.3521 c
-8068.6201 8055.3521 l
f
-8076.4297 8057.5518 m
-8076.0273 8057.8281 -8075.585 8057.9961 -8075.105 8058.0664 c
-8075.0703 8058.0767 -8075.0518 8058.0542 -8075.041 8058.0337 c
-8075.0303 8058.002 -8075.0527 8057.9712 -8075.0762 8057.9712 c
-8075.5454 8057.8906 -8075.9785 8057.7183 -8076.3799 8057.4639 c
-8076.4121 8057.4536 -8076.4434 8057.4561 -8076.4546 8057.4873 c
-8076.4639 8057.5088 -8076.4521 8057.541 -8076.4297 8057.5518 c
-8076.4297 8057.5518 l
f
-8077.6514 8063.4014 m
-8075.1934 8063.8433 -8072.7583 8064.3169 -8070.2578 8064.043 c
-8070.2383 8064.043 -8070.2178 8064.021 -8070.2178 8063.9878 c
-8070.2178 8063.957 -8070.2402 8063.936 -8070.2622 8063.936 c
-8072.751 8064.189 -8075.1934 8063.8008 -8077.6313 8063.2935 c
-8077.6538 8063.2944 -8077.6846 8063.3066 -8077.6953 8063.3374 c
-8077.6953 8063.3584 -8077.6826 8063.3921 -8077.6514 8063.4014 c
-8077.6514 8063.4014 l
f
0.195 0.156 0.117 0 k
-8077.626 8051.9609 m
-8075.2559 8051.584 -8072.8657 8051.6641 -8070.4897 8051.9048 c
-8070.4585 8051.9038 -8070.437 8051.8833 -8070.437 8051.853 c
-8070.437 8051.8296 -8070.4609 8051.7993 -8070.481 8051.7993 c
-8072.8682 8051.5586 -8075.2505 8051.4766 -8077.6294 8051.856 c
-8077.6626 8051.856 -8077.6826 8051.877 -8077.6802 8051.9102 c
-8077.6802 8051.9409 -8077.6602 8051.9624 -8077.626 8051.9609 c
-8077.626 8051.9609 l
f
0.335 0.268 0.201 0 k
-8076.8945 8051.4272 m
-8074.3887 8051.4321 -8071.875 8051.5938 -8069.377 8051.2129 c
-8069.3462 8051.2114 -8069.3247 8051.189 -8069.3257 8051.1582 c
-8069.3262 8051.125 -8069.3481 8051.1074 -8069.3799 8051.1074 c
-8071.877 8051.4873 -8074.3887 8051.3457 -8076.8975 8051.3232 c
-8076.9209 8051.3232 -8076.9409 8051.3442 -8076.938 8051.376 c
-8076.938 8051.4082 -8076.917 8051.4297 -8076.8945 8051.4272 c
-8076.8945 8051.4272 l
f
0.205 0.164 0.123 0 k
-8078.437 8051.6416 m
-8076.9639 8051.9858 -8075.4678 8051.7183 -8073.9985 8051.5376 c
-8073.9673 8051.5376 -8073.9458 8051.5142 -8073.959 8051.4834 c
-8073.9609 8051.4512 -8073.981 8051.4297 -8074.0127 8051.4409 c
-8075.4697 8051.6001 -8076.9551 8051.8994 -8078.4058 8051.5361 c
-8078.437 8051.5376 -8078.4697 8051.5488 -8078.4697 8051.5801 c
-8078.479 8051.6006 -8078.4585 8051.6328 -8078.437 8051.6416 c
-8078.437 8051.6416 l
f
-8071.813 8051.1113 m
-8070.6577 8051.2402 -8069.4873 8051.1304 -8068.353 8050.9048 c
-8068.3306 8050.8945 -8068.3105 8050.8721 -8068.3218 8050.8418 c
-8068.3218 8050.8193 -8068.354 8050.7993 -8068.377 8050.8105 c
-8069.5098 8051.0552 -8070.6514 8051.1113 -8071.8057 8051.0049 c
-8071.8394 8051.0054 -8071.8594 8051.0273 -8071.8682 8051.0498 c
-8071.8682 8051.0801 -8071.8462 8051.1016 -8071.813 8051.1113 c
-8071.813 8051.1113 l
f
0.335 0.268 0.201 0 k
-8078.7266 8053.7632 m
-8077.3809 8054.5049 -8075.7666 8053.9126 -8074.3154 8053.9585 c
-8074.2817 8053.957 -8074.2622 8053.936 -8074.2622 8053.9033 c
-8074.2642 8053.8818 -8074.2866 8053.8608 -8074.3169 8053.8608 c
-8075.749 8053.8066 -8077.3423 8054.396 -8078.6768 8053.667 c
-8078.6978 8053.6558 -8078.73 8053.668 -8078.751 8053.6914 c
-8078.7617 8053.7129 -8078.749 8053.7441 -8078.7266 8053.7632 c
-8078.7266 8053.7632 l
f
-8077.354 8055.8818 m
-8075.1313 8056.3618 -8072.8481 8055.9326 -8070.6094 8055.8784 c
-8070.5762 8055.8774 -8070.5562 8055.856 -8070.5562 8055.8242 c
-8070.5586 8055.8032 -8070.5918 8055.7832 -8070.6118 8055.7832 c
-8072.8418 8055.7935 -8075.1118 8056.2974 -8077.335 8055.7729 c
-8077.3569 8055.7729 -8077.3887 8055.7866 -8077.397 8055.8184 c
-8077.397 8055.8384 -8077.3857 8055.8721 -8077.354 8055.8818 c
-8077.354 8055.8818 l
f
-8071.4873 8052.4561 m
-8069.8105 8053.2866 -8067.959 8053.8184 -8066.063 8053.6777 c
-8066.0322 8053.6777 -8066.0098 8053.6558 -8066.0127 8053.6216 c
-8066.0127 8053.5918 -8066.0342 8053.5713 -8066.0674 8053.5728 c
-8067.9409 8053.7329 -8069.7798 8053.1777 -8071.4463 8052.373 c
-8071.4678 8052.3618 -8071.501 8052.3618 -8071.5098 8052.3945 c
-8071.521 8052.416 -8071.521 8052.4482 -8071.4873 8052.4561 c
-8071.4873 8052.4561 l
f
u
0.5 0.85 1 0.45 k
-8224.46 8059.2241 m
-8224.4854 8059.8066 -8224.0264 8060.5049 -8222.626 8061.3066 C
-8222.3115 8061.3193 -8220.8545 8061.3384 -8218.5479 8061.3657 C
-8218.5479 8059.1392 L
-8220.5977 8059.1626 -8222.5771 8059.2041 -8224.46 8059.2241 C
f
-8223.9697 8058.2866 m
-8218.5479 8058.1626 L
-8218.5479 8057.1304 L
-8222.1045 8057.2754 L
-8223.2744 8057.6465 -8223.9697 8058.2866 V
f
0.5 0.85 1 0.32 k
-8218.5479 8058.1416 m
-8223.9346 8058.2593 L
-8224.2295 8058.5313 -8224.4443 8058.8721 -8224.46 8059.2441 C
-8222.5771 8059.2222 -8220.5977 8059.2026 -8218.5479 8059.1777 C
-8218.5479 8058.1416 L
f
0.5 0.85 1 0.45 k
-8113.6094 8057.9336 m
-8191.8193 8058.8569 -8218.5684 8059.1582 V
-8218.5684 8061.3657 L
-8202.2734 8061.5488 -8143.4502 8062.0225 Y
-8109.209 8060.98 L
-8109.917 8057.8838 L
-8113.6094 8057.9336 L
f
0.5 0.85 1 0.12 k
-8218.5684 8057.1304 m
-8218.5684 8058.1626 L
-8109.8857 8056.3169 L
-8109.8418 8054.1792 L
-8143.1138 8054.0288 L
-8218.5684 8057.1304 L
f
u
0.065 0.052 0.039 0 k
-8086.5327 8052.4624 m
-8086.4966 8053.7422 L
-8086.7554 8052.4336 L
-8105.3569 8056.9727 L
-8106.397 8056.5889 L
-8106.3394 8056.9214 -8106.2998 8057.2729 -8106.2905 8057.6382 c
-8106.2847 8057.8457 -8106.2866 8058.0449 -8106.2998 8058.2417 C
-8097.8462 8059.4136 -8088.4233 8054.9878 -8086.4966 8053.7422 C
-8086.2002 8064.0718 L
-8085.501 8064.1777 L
-8085.2642 8056.5234 L
-8079.6426 8056.4702 L
-8079.5503 8054.3296 -8079.5322 8052.3374 -8079.7007 8051.3521 C
-8086.5327 8052.4624 L
f
0.4 0.7 1 0 k
-8109.917 8057.9038 m
-8109.8857 8056.2974 L
-8218.5684 8058.1416 L
-8218.5684 8059.1777 L
-8191.8193 8058.877 -8109.917 8057.9038 Y
f
U
U
0.025 0.02 0.015 0 k
-8074.1934 8060.3457 m
-8074.1934 8060.3794 -8074.1719 8060.3984 -8074.1401 8060.3984 c
-8071.1313 8060.4297 -8068.8809 8060.2617 -8065.875 8060.1758 C
-8065.8682 8060.0825 L
-8068.7866 8060.1865 -8071.2207 8060.3232 -8074.1426 8060.291 C
-8074.1777 8060.292 -8074.1958 8060.3154 -8074.1934 8060.3457 C
f
-8065.8594 8060.0825 m
-8065.8682 8060.061 L
-8065.8682 8060.0825 L
-8065.8662 8060.0825 -8065.8623 8060.0825 -8065.8594 8060.0825 C
f
-8069.9087 8058.7393 m
-8070.9058 8058.6089 -8071.7998 8059.0825 -8072.6719 8059.5142 C
-8072.7026 8059.5249 -8072.7134 8059.5566 -8072.7026 8059.5889 C
-8072.689 8059.6089 -8072.6582 8059.6201 -8072.6367 8059.6064 c
-8071.7866 8059.1465 -8070.8911 8058.7358 -8069.9282 8058.8369 c
-8068.5679 8058.9785 -8067.3638 8059.6914 -8065.9849 8059.7705 C
-8065.9058 8059.6753 L
-8067.501 8059.5825 -8068.3247 8058.939 -8069.9087 8058.7393 c
f
U
U
%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(New Pattern 50)
0 A
u
0 J 0 j 1 w 4 M []0 d
0 XR
-8223.46 8063.3169 m
-8096.3369 8063.3169 L
-8096.3369 8015.731 L
-8223.46 8015.731 L
-8223.46 8063.3169 L
n
u
*u
0 O
0.9529 0.949 0.1961 0.0745 k
-8197.2529 8047.7329 m
-8197.2832 8047.584 L
-8199.4434 8041.6826 -8200.4043 8038.9536 -8200.7354 8037.6064 c
-8200.8242 8037.6064 L
-8201.1543 8038.9233 -8202.2344 8041.6504 -8204.4258 8047.584 c
-8204.457 8047.7329 L
-8197.2529 8047.7329 l
f
1 D
-8207.5781 8056.2832 m
-8209.0781 8059.8545 -8209.8594 8062.0249 -8207.5781 8062.2329 c
-8207.5781 8063.2832 L
-8210.1602 8063.2534 -8213.041 8063.2329 -8215.8008 8063.2329 c
-8219.5244 8063.2329 -8221.9873 8063.2534 -8223.46 8063.2832 c
-8223.46 8062.2329 L
-8221.5654 8062.0249 -8220.5146 8059.8833 -8213.0098 8042.8193 c
-8201.1543 8015.731 L
-8199.3242 8015.731 L
-8187.6182 8042.8193 L
-8180.2642 8059.8242 -8179.1846 8062.0249 -8177.3481 8062.2329 c
-8177.3481 8063.2832 L
-8178.9746 8063.2534 -8181.377 8063.2329 -8185.0361 8063.2329 c
-8188.0098 8063.2329 -8191.1294 8063.2534 -8194.1641 8063.2832 c
-8194.1641 8062.2329 L
-8191.9409 8062.0249 -8192.7813 8059.8242 -8194.2207 8056.2832 C
-8207.5781 8056.2832 l
f
*U
*u
0 D
-8152.5361 8031.3975 m
-8152.5361 8027.7881 -8154.813 8025.4121 -8158.5889 8025.4121 c
-8159.6978 8025.4121 -8160.5361 8025.5313 -8160.9858 8025.5625 c
-8160.9858 8037.8638 L
-8160.3262 8037.9248 -8159.6689 8037.9248 -8159.189 8037.9248 c
-8157.6602 8037.9248 -8156.1631 8037.4424 -8155.1426 8036.7222 c
-8153.853 8035.8496 -8152.5361 8034.104 -8152.5361 8031.4585 C
-8152.5361 8031.3975 l
f
1 D
-8171.541 8035.708 m
-8171.541 8019.9609 -8171.541 8017.7456 -8174.002 8017.5952 c
-8174.002 8016.6353 L
-8172.501 8016.5752 -8169.7778 8016.5161 -8167.0273 8016.4849 c
-8165.1138 8016.4248 -8161.853 8016.3345 -8159.6079 8016.2935 c
-8156.042 8016.2935 -8153.0449 8016.7422 -8150.4639 8017.5801 c
-8145.813 8019.165 -8141.4297 8023.1689 -8141.4297 8030.9761 c
-8141.4297 8036.061 -8143.8618 8039.6353 -8145.9634 8041.377 c
-8147.0425 8042.3374 -8148.2729 8043.1489 -8149.2354 8043.6289 c
-8149.2354 8043.7793 L
-8146.9839 8046.8081 -8145.061 8049.3794 -8138.8511 8057.9585 c
-8136.9609 8060.3809 -8135.3706 8062.0542 -8134.2002 8062.2935 c
-8134.2002 8063.3169 L
-8136.1182 8063.3169 -8138.4609 8063.2026 -8140.5889 8063.2026 c
-8142.8105 8063.2026 -8144.3105 8063.3169 -8145.9033 8063.3169 c
-8147.1313 8063.3169 -8148.1826 8063.2578 -8148.9639 8062.5889 c
-8152.4751 8057.165 -8156.3711 8051.0718 -8159.5786 8046.0322 c
-8159.9673 8046.0322 -8160.417 8046.0322 -8160.9858 8046.0322 c
-8160.9858 8048.6006 L
-8160.9858 8059.8433 -8160.897 8062.084 -8158.6489 8062.2935 c
-8158.6489 8063.2866 L
-8160.0879 8063.2578 -8163.3794 8063.2305 -8166.1602 8063.2305 c
-8169.3887 8063.2305 -8172.3506 8063.2578 -8173.9727 8063.2866 c
-8173.9727 8062.2935 L
-8171.5122 8062.084 -8171.541 8059.8433 -8171.541 8042.9072 C
-8171.541 8035.708 l
f
*U
*u
0 D
-8120.9146 8042.9102 m
-8120.9146 8059.8105 -8120.9146 8061.9648 -8123.7441 8062.2935 C
-8123.7441 8063.2866 l
-8121.8481 8063.2578 -8118.5142 8063.2305 -8115.2422 8063.2305 c
-8112.0889 8063.2305 -8109.0273 8063.2578 -8106.7471 8063.2866 C
-8106.7471 8062.2935 l
-8109.7183 8062.2935 -8109.7471 8059.8418 -8109.7471 8042.9102 C
-8109.7471 8025.4673 L
-8102.2793 8025.4673 l
-8099.4585 8025.4673 -8097.9897 8026.2769 -8097.3599 8028.5801 C
-8096.3682 8028.5801 l
-8096.3682 8023.7866 -8096.3369 8019.731 -8096.3369 8016.4873 c
-8100.8086 8016.5176 -8106.209 8016.5464 -8111.5186 8016.5464 C
-8119.2046 8016.5464 l
-8124.0127 8016.5464 -8129.457 8016.5176 -8134.4214 8016.4873 c
-8134.4214 8019.7026 -8134.3926 8023.7866 -8134.3926 8028.5801 C
-8133.3682 8028.5801 l
-8132.8242 8026.4248 -8131.231 8025.4673 -8128.4038 8025.4673 C
-8120.9146 8025.4673 l
-8120.9146 8042.9102 L
f
*U
U
U
%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(New Pattern 6)
0 A
u
1 Ap
0 J 0 j 1 w 4 M []0 d
0 XR
-8224.21 8040.3169 m
-8224.21 8064.3169 L
-8214.209 8064.3169 L
-8214.209 8040.3169 L
-8224.21 8040.3169 L
n
0 Ap
0 O
1 g
-8214.209 8042.3169 m
-8214.5303 8042.3169 -8214.8457 8042.3345 -8215.1582 8042.3647 c
-8217.0479 8042.5425 -8218.7803 8043.251 -8220.2158 8044.3345 c
-8221.7119 8045.4624 -8222.8799 8046.9985 -8223.5537 8048.7808 c
-8223.9717 8049.8818 -8224.21 8051.0688 -8224.21 8052.3169 c
-8224.21 8054.1792 -8223.6924 8055.917 -8222.8057 8057.4082 c
-8221.0615 8060.3442 -8217.8691 8062.3169 -8214.209 8062.3169 C
-8214.209 8042.3169 L
f
0 R
0 G
1 J 1 j 0.5 w
-8214.209 8061.9985 m
-8217.2383 8061.043 -8220.0664 8059.3838 -8222.8057 8057.4082 C
S
-8214.209 8056.3657 m
-8217.3594 8053.9609 -8220.417 8051.2305 -8223.5537 8048.7808 C
S
-8220.2158 8044.3345 m
-8218.1504 8045.4248 -8216.1602 8046.7832 -8214.209 8048.2729 C
S
-8215.1582 8042.3647 m
-8214.8398 8042.4482 -8214.5225 8042.5313 -8214.209 8042.6294 C
S
-8220.2158 8044.3345 m
-8218.7783 8043.2529 -8217.0479 8042.5425 -8215.1582 8042.3647 C
S
-8223.5537 8048.7808 m
-8223.9717 8049.8818 -8224.21 8051.0688 -8224.21 8052.3169 c
-8224.21 8054.1792 -8223.6904 8055.917 -8222.8057 8057.4082 C
S
-8214.209 8042.3169 m
-8214.5303 8042.3169 -8214.8457 8042.3345 -8215.1582 8042.3647 C
S
-8220.2158 8044.3345 m
-8221.7119 8045.4624 -8222.8799 8046.9985 -8223.5537 8048.7808 C
S
-8222.8057 8057.4082 m
-8221.0615 8060.3442 -8217.8691 8062.3169 -8214.209 8062.3169 C
S
U
%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(New Pattern 62)
0 A
u
0 J 0 j 1 w 4 M []0 d
0 XR
-8224.46 8064.3169 m
-8224.46 8026.0464 L
-8186.189 8026.0464 L
-8186.189 8064.3169 L
-8224.46 8064.3169 L
n
0 O
1 0.14 0.09 0 k
-8186.189 8047.2222 m
-8186.189 8038.6577 L
-8224.46 8038.6577 L
-8224.46 8047.2222 L
-8186.189 8047.2222 L
f
-8186.189 8050.4126 m
-8186.189 8049.7393 L
-8224.46 8049.7393 L
-8224.46 8050.4126 L
-8186.189 8050.4126 L
f
U
%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(New Pattern 63)
0 A
u
0 J 0 j 1 w 4 M []0 d
0 XR
-8224.46 8064.3169 m
-8224.46 8026.0464 L
-8186.189 8026.0464 L
-8186.189 8064.3169 L
-8224.46 8064.3169 L
n
0 O
1 0.14 0.09 0 k
-8186.189 8043.1416 m
-8186.189 8051.7046 L
-8198.8008 8051.7046 L
-8198.8008 8064.3169 L
-8207.3643 8064.3169 L
-8207.3672 8043.1416 L
-8207.3643 8043.1416 L
-8207.3643 8043.1416 L
-8186.189 8043.1416 L
f
-8186.189 8040.624 m
-8209.8818 8040.624 L
-8209.8818 8064.3169 L
-8210.5566 8064.3169 L
-8210.5566 8039.9497 L
-8186.189 8039.9497 L
-8186.189 8040.624 L
f
U
%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(New Pattern 64)
0 A
u
0 J 0 j 1 w 4 M []0 d
0 XR
-8224.46 8064.3154 m
-8224.46 8026.0449 L
-8186.189 8026.0449 L
-8186.189 8064.3154 L
-8224.46 8064.3154 L
n
0 O
1 0.14 0.09 0 k
-8186.189 8038.6558 m
-8211.8477 8038.6558 L
-8211.8477 8064.3154 L
-8203.2861 8064.3169 L
-8203.2861 8047.2192 L
-8186.189 8047.2192 L
-8186.189 8038.6558 L
f
-8186.189 8049.7393 m
-8200.7666 8049.7393 L
-8200.7666 8064.3169 L
-8200.0938 8064.3169 L
-8200.0938 8050.4121 L
-8186.189 8050.4121 L
-8186.189 8049.7393 L
f
U
%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(New Pattern 65)
0 A
u
1 Ap
0 J 0 j 1 w 4 M []0 d
0 XR
-8196.5215 8036.7778 m
-8224.0625 8036.7778 L
-8224.0625 8064.3169 L
-8196.5215 8064.3169 L
-8196.5215 8036.7778 L
n
0 O
0 0.55 1 0.12 k
-8196.3018 8050.0161 m
-8224.46 8050.0161 L
-8224.46 8051.1416 L
-8196.3018 8051.1416 L
-8196.3018 8050.0161 L
f
u
0 0.55 1 0.3 k
-8223.4424 8037.8374 m
-8223.8701 8039.8418 -8222.6455 8043.4673 -8219.5459 8046.5664 c
-8216.4473 8049.6665 -8212.8047 8050.9761 -8210.8184 8050.4614 C
-8210.8184 8050.4614 L
-8210.3359 8048.5054 -8211.6123 8044.8281 -8214.709 8041.731 c
-8217.8047 8038.6353 -8221.4717 8037.4214 -8223.4424 8037.8374 C
f
0 0.39 0.7 0.12 k
-8223.4424 8063.3081 m
-8223.8701 8061.3066 -8222.6455 8057.6777 -8219.5459 8054.5786 c
-8216.4473 8051.48 -8212.8047 8050.1694 -8210.8184 8050.6841 C
-8210.8184 8050.6841 L
-8210.3359 8052.6401 -8211.6123 8056.3169 -8214.709 8059.416 c
-8217.8047 8062.5122 -8221.4717 8063.7231 -8223.4424 8063.3081 C
f
U
u
0 0.55 1 0.3 k
-8209.6377 8063.3081 m
-8210.0664 8061.3066 -8208.8438 8057.6777 -8205.7441 8054.5786 c
-8202.6445 8051.48 -8199.0029 8050.1694 -8197.0176 8050.6841 C
-8197.0176 8050.6841 L
-8196.5322 8052.6401 -8197.8105 8056.3169 -8200.9063 8059.416 c
-8204.0029 8062.5122 -8207.6689 8063.7231 -8209.6377 8063.3081 C
f
0 0.39 0.7 0.12 k
-8209.6377 8037.8374 m
-8210.0664 8039.8418 -8208.8438 8043.4673 -8205.7441 8046.5664 c
-8202.6445 8049.6665 -8199.0029 8050.9761 -8197.0176 8050.4614 C
-8197.0176 8050.4614 L
-8196.5322 8048.5054 -8197.8105 8044.8281 -8200.9063 8041.731 c
-8204.0029 8038.6353 -8207.6689 8037.4214 -8209.6377 8037.8374 C
f
U
U
%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(New Pattern 67)
0 A
u
0 Ap
0 J 0 j 1 w 4 M []0 d
0 XR
-8196.9209 8036.4014 m
-8224.46 8036.4014 L
-8224.46 8063.9409 L
-8196.9209 8063.9409 L
-8196.9209 8036.4014 L
n
0 O
0 0.55 1 0.12 k
-8211.2207 8054.6782 m
-8211.2207 8064.3169 L
-8210.0938 8064.3169 L
-8210.0938 8054.6782 L
-8211.2207 8054.6782 L
f
0 0.55 1 0.3 k
-8214.8828 8050.1934 m
-8213.7705 8048.4712 -8210.3398 8046.7729 -8205.957 8046.7729 c
-8201.5762 8046.7729 -8198.0732 8048.4214 -8197.0313 8050.1904 C
-8197.0313 8050.1904 L
-8198.0732 8051.917 -8201.5762 8053.6143 -8205.957 8053.6143 c
-8210.3359 8053.6143 -8213.7832 8051.8774 -8214.8828 8050.1934 C
f
U
%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(New Pattern 69)
0 A
u
0 J 0 j 1 w 4 M []0 d
0 XR
-8196.9209 8036.7778 m
-8224.46 8036.7778 L
-8224.46 8064.3169 L
-8196.9209 8064.3169 L
-8196.9209 8036.7778 L
n
0 O
0 0.55 1 0.3 k
-8214.8828 8050.5698 m
-8213.7705 8048.8472 -8210.3398 8047.1489 -8205.957 8047.1489 c
-8201.5762 8047.1489 -8198.0732 8048.7993 -8197.0313 8050.5664 C
-8197.0313 8050.5664 L
-8198.0732 8052.292 -8201.5762 8053.9902 -8205.957 8053.9902 c
-8210.3359 8053.9902 -8213.7832 8052.2534 -8214.8828 8050.5698 C
f
U
%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(New Pattern 8)
0 A
u
0 J 0 j 1 w 4 M []0 d
0 XR
-8223.4121 8061.6289 m
-8116.2559 8061.6289 L
-8116.2559 8047.502 L
-8223.4121 8047.502 L
-8223.4121 8061.6289 L
n
u
0 O
0 0 0 1 k
-8221.7432 8060.939 m
-8222.3135 8063.3169 -8222.2783 8059.3198 V
-8222.5088 8056.1201 L
-8223.0771 8053.771 L
-8222.9092 8051.4385 L
-8221.4111 8050.771 -8204.7441 8049.4385 V
-8198.0771 8048.1074 -8189.0767 8048.1074 V
-8123.853 8048.792 -8118.9521 8050.2026 v
-8159.8481 8048.1904 -8162.4287 8048.8281 v
-8123.3159 8050.4766 -8120.314 8051.749 v
-8158.25 8049.8633 -8161.6265 8051.4946 v
-8126.709 8053.2256 -8122.481 8054.8472 v
-8129.1807 8054.2002 -8130.9727 8054.3984 v
-8127.8481 8054.8862 l
-8132.8799 8054.8184 l
-8135.7817 8054.4448 l
-8127.9102 8055.5586 -8127.3618 8056.125 v
-8123.7759 8055.4482 -8137.979 8055.7026 v
-8171.5762 8051.771 -8221.7432 8060.939 V
f
/BBAccumRotation (5.805971) XT
0 R
0 0 0 0.5 K
0.025 w
-8223.4111 8050.4385 m
-8203.127 8048.6113 -8183.4321 8047.5376 v
-8140.6094 8047.8184 -8136.0322 8048.2168 v
-8123.6226 8048.3472 -8116.2559 8049.3442 v
S
/BBAccumRotation (5.805971) XT
0 0 0 1 K
-8161.2959 8047.7246 m
-8164.7559 8047.3442 -8190.7202 8047.5952 Y
-8201.0879 8047.4766 -8223.4111 8050.4385 Y
S
/BBAccumRotation (5.805971) XT
-8160.4463 8050.98 m
-8129.8218 8051.8994 -8123.1206 8052.5488 v
S
/BBAccumRotation (5.805971) XT
0 0 0 0.5 K
-8169.0786 8055.5234 m
-8133.8306 8056.9336 -8130.8657 8057.4561 v
S
/BBAccumRotation (5.805971) XT
U
U
%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(New Pattern 83)
0 A
u
0 J 0 j 1 w 4 M []0 d
0 XR
-8223.46 8063.2529 m
-8009.8599 8063.2529 L
-8009.8599 8055.4512 L
-8223.46 8055.4512 L
-8223.46 8063.2529 L
n
0 O
0 0 0 1 k
-8223.46 8059.3521 m
-8213.4473 8061.8433 -8206.6475 8063.1904 -8194.6602 8063.2529 c
-8181.6777 8063.3169 -8116.6602 8063.2529 y
-8051.6426 8063.3169 -8038.6602 8063.2529 v
-8026.6719 8063.1904 -8019.875 8061.8433 -8009.8599 8059.3521 C
-8019.875 8056.8584 -8026.6719 8055.5122 -8038.6602 8055.4512 c
-8051.6426 8055.3857 -8116.6602 8055.4512 y
-8181.6777 8055.3857 -8194.6602 8055.4512 v
-8206.6475 8055.5122 -8213.4473 8056.8584 -8223.46 8059.3521 C
f
U
%AI8_EndBrushPattern
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe Brush Manager Order)
(Adobe Brush Manager Order)
( Adobe Calligraphic Brush Tool/ 6 pt Flat / Adobe Calligraphic Brush T) -
(ool/ 10 pt Oval/ Adobe Calligraphic Brush Tool/ 12 pt Oval / Adobe Cal) -
(ligraphic Brush Tool/ 20 pt Oval/ Adobe Calligraphic Brush Tool/ 25 pt) -
( Round / Adobe Calligraphic Brush Tool/ 50 pt Flat/ Adobe Scatter Brus) -
(h Tool/ Dog Tracks/ Adobe Scatter Brush Tool/ Fall Leaf/ Adobe Scatter) -
( Brush Tool/ Ladybug/ Adobe Scatter Brush Tool/ Push Pin/ Adobe Scatte) -
(r Brush Tool/ Strawberry/ Adobe Scatter Brush Tool/ Twinkle Star / Ado) -
(be ArtOnPath Brush Tool/ Marker/ Adobe ArtOnPath Brush Tool/ Tapered S) -
(troke/ Adobe ArtOnPath Brush Tool/ Arrow/ Adobe ArtOnPath Brush Tool/ ) -
(Paintbrush/ Adobe ArtOnPath Brush Tool/ Type/ Adobe PatternOnPath Brus) -
(h Tool/ Double Lines/ Adobe PatternOnPath Brush Tool/ Laurel/ Adobe Pa) -
(tternOnPath Brush Tool/ Rope /) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe Scatter Brush Tool)
(Dog Tracks)
(1 /New Pattern 41/ 1 0 0 0 1 / 0 1 1 0 1 1 0 0 0 0 -90 -90 0 1 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Scatter Brush Tool)
(Fall Leaf)
(1 /New Pattern 34/ 1 0.0745 0.9 0.9019 0.18 / 0 0.602793 1 1 0.1 1 1 -) -
(1 1 1 -180 180 1 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Scatter Brush Tool)
(Ladybug)
(1 /New Pattern 10/ 5 0.898039 0 0 / 0 1 1 0 0.803911 1.2 1 -1.55 1.55 ) -
(1 -180 180 1 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Scatter Brush Tool)
(Push Pin)
(1 /New Pattern 36/ 1 0.025 0.1 0.475 0 / 0 1 1 0 0.401676 1 1 -1.06145) -
( 1.06 1 -180 180 1 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Scatter Brush Tool)
(Strawberry)
(1 /New Pattern 37/ 1 0 0 0 1 / 0 0.803911 1 1 0.803911 1 1 -0.5 0.5 1 ) -
(-75 75.419 1 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Scatter Brush Tool)
(Twinkle Star )
(1 /New Pattern 2/ 0 1 / 1 0.5 1 1 0.25 1 1 -0.5 0.5 1 0 0 0 0 0) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(10 pt Oval)
(1 1 19 15 15 130 130 2 0 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(12 pt Oval )
(1 7 17 45 45 0 0 2 0 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(20 pt Oval)
(1 20 20 20 100 40 80 0 2 1 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(25 pt Round )
(1 10 40 100 100 0 0 2 0 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(50 pt Flat)
(1 40 60 0 0 44 44 0 0 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(6 pt Flat )
(1 4 8 10 10 90 90 2 0 0 0) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe ArtOnPath Brush Tool)
(Arrow)
(1 / New Pattern 45/ / / / / 5 0.898039 0 0 /  2 0 1 0 1 0 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe ArtOnPath Brush Tool)
(Marker)
(1 / New Pattern 8/ / / / / 0 0 /  1 1 1 0 1 0 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe ArtOnPath Brush Tool)
(Paintbrush)
(1 / New Pattern 5/ / / / / 1 0.5 0.85 1 0.45 /  0 0 1 0 1 0 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe ArtOnPath Brush Tool)
(Tapered Stroke)
(1 / New Pattern 83/ / / / / 1 0 0 0 1 /  1 1 1 0 1 0 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe ArtOnPath Brush Tool)
(Type)
(1 / New Pattern 50/ / / / / 1 0.952941 0.94902 0.196078 0.0745098 /  1) -
( 0 1 0 1 0 0 0) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe PatternOnPath Brush Tool)
(Double Lines)
(1 / New Pattern 62/ New Pattern 63/ New Pattern 64/ / / 1 1 0.14 0.09 ) -
(0 /  1 0 1 0 1 0 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe PatternOnPath Brush Tool)
(Laurel)
(1 / New Pattern 65/ New Pattern 42/ New Pattern 67/ / New Pattern 69/ ) -
(1 0 0.55 1 0.3 /  1 0 1 0 1 0 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe PatternOnPath Brush Tool)
(Rope )
(1 / New Pattern 1/ / / New Pattern 3/ New Pattern 6/ 5 0 0 0 /  1 0 1 ) -
(0 1 0 0 0) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 ([Registration]) 0 Xs
([Registration]) Pc
0 0 0 0 k
(C=0 M=0 Y=0 K=0) Pc
0 0 0 1 k
(C=0 M=0 Y=0 K=100) Pc
0 0.1 1 0 k
(C=0 M=10 Y=100 K=0) Pc
0 0.5 0 0 k
(C=0 M=50 Y=0 K=0) Pc
0 0.5 1 0 k
(C=0 M=50 Y=100 K=0) Pc
1 0.55 1 0 k
(C=100 M=55 Y=100 K=0) Pc
1 0.9 0.1 0 k
(C=100 M=90 Y=10 K=0) Pc
0.15 1 1 0 k
(C=15 M=100 Y=100 K=0) Pc
0.45 0.9 0 0 k
(C=45 M=90 Y=0 K=0) Pc
0.5 0.4 0.3 0 k
(C=50 M=40 Y=30 K=0) Pc
0.5 0.85 1 0 k
(C=50 M=85 Y=100 K=0) Pc
0.75 0.05 1 0 k
(C=75 M=5 Y=100 K=0) Pc
0.75 0.9 0 0 k
(C=75 M=90 Y=0 K=0) Pc
0.8 0.05 0 0 k
(C=80 M=5 Y=0 K=0) Pc
Bb
2 (Black, White) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Black, White) Pc
Bb
2 (Chrome) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Chrome) Pc
Bb
2 (Rainbow) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Rainbow) Pc
Bb
0 0 0 0 Bh
2 (Yellow & Orange Radial) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Yellow & Orange Radial) Pc
(Brick) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Brick) Pc
(Confetti) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Confetti) Pc
(Leaves - Fall ) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Leaves - Fall ) Pc
(Stripes) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Stripes) Pc
PB
%AI5_EndPalette
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (Art Brush Tool)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (Art Brush Tool)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (Calligraphic Brush Tool)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool)
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends)
%AI5_End_NonPrinting--
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 0 79 128 255 0 50 Lb
(Layer 1) Ln
0 A
1 Ap
0 O
0.85 g
0 R
0 G
0 J 0 j 0.5 w 4 M []0 d
0 XR
-1.083 -155.5645 m
149.1055 -155.5645 L
149.1055 -67.1567 L
-1.083 -67.1567 L
-1.083 -155.5645 L
b
0 Ap
1 w
-8224.46 91.0664 m
8158.5391 91.0664 L
(N) *
-210.8975 8064.3169 m
-210.8975 -8318.6836 L
(N) *
149.1025 8064.3169 m
149.1025 -8318.6836 L
(N) *
-8224.46 -268.9326 m
8158.5391 -268.9326 L
(N) *
8158.5391 25.4258 m
(N) *
-8224.46 25.4258 m
(N) *
8158.5391 28.4102 m
(N) *
-8224.46 28.4102 m
(N) *
8158.5391 74.6738 m
(N) *
-8224.46 74.6738 m
(N) *
0 To
1 0 0 1 -21.7676 -85.7754 0 Tp
0 Tv
TP
-14.985 0 Td
0 Tr
0 O
0 g
%_ 0 50 XQ
/_Helvetica 9 8.379 -2.0251 Tf
0 Ts
100 100 Tz
10 Tt
%_0 0 100 100 Xu
%AI55J_GlyphSubst: GlyphSubstNone 
1 TA
%_ 0 XL
0 TY
0 TV
74.6488 0 Xb
XB
0 0 5 TC
100 100 200 TW
25 TG
0 0 0 Ti
1 Ta
0 1 2 2 99 Th
0 Tq
248 Tg
10 0 Tl
0.09 Tc
0 Tw
(Leased\r) Tx 1 0 Tk
7.8481 -10 Td
(line) Tx 1 0 Tk
(\r) TX 
TO
1 Ap
0.85 g
0 R
0 G
0.5 w
-42.373 -96.4517 m
-210.8877 -96.4517 L
-210.8877 47.9922 L
-42.373 47.9922 L
-42.373 -96.4517 L
b
0 Ap
-177.1069 -10.167 m
-177.1069 13.9985 l
-92.3125 13.9985 l
-92.3125 -76.1997 l
81.1104 -76.2104 l
81.1104 -117.3721 l
96.8164 -117.3721 l
S
0 To
1 0 0 1 -126.8076 50.0288 0 Tp
0 Tv
TP
-20.7629 0 Td
0 Tr
0 O
0 g
1 w
0 Tt
5.7081 0 Xb
XB
0 Tc
(Location 1) Tx 1 0 Tk
(\r) TX 
TO
u
0 To
1 0 0 1 -110.6821 -62.998 0 Tp
0 Tv
TP
-53.4239 0 Td
0 Tr
10 Tt
74.7235 0 Xb
XB
2 Ta
0.09 Tc
(Synchronous\r) Tx 1 0 Tk
22.1943 -10 Td
(call unit) Tx 1 0 Tk
(\r) TX 
TO
U
0 R
0 G
0.5 w
-108.7417 -60.9355 m
-97.4839 -53.9307 l
S
1 Ap
0 O
1 g
-89.3018 -51.9375 m
-89.3018 -33.9082 L
-95.3232 -33.9082 L
-95.3232 -51.9375 L
-89.3018 -51.9375 L
b
/BBAccumRotation (1.570796) XT
0 To
1 0 0 1 -62.0127 -90.3252 0 Tp
0 Tv
TP
-18.418 0 Td
0 Tr
0 g
1 w
(J) Tx 1 20 Tk
(ac) Tx 1 20 Tk
(k) Tx 1 0 Tk
(\r) TX 
TO
0 Ap
0 R
0 G
0.5 w
-48.6138 -81.228 m
-59.8706 -88.2324 l
S
1 Ap
0 O
1 g
-45.3862 -79.1997 m
-39.3779 -79.1997 L
-39.3779 -73.1782 L
-45.3862 -73.1782 L
-45.3862 -79.1997 L
b
u
0 To
1 0 0 1 -102.6104 34.2485 0 Tp
0 Tv
TP
0 Tr
0 g
1 w
0 Ta
(Synchronous\r) Tx 1 0 Tk
T*
(interf) Tx 1 30 Tk
(ace) Tx 1 0 Tk
(\r) TX 
TO
U
0 Ap
0 R
0 G
0.5 w
-115.9121 25.2461 m
-104.6543 32.2515 l
S
1 Ap
0 O
1 g
-120.9644 1.7695 m
-163.6714 1.7695 L
-163.6714 26.2461 L
-120.9644 26.2461 L
-120.9644 1.7695 L
b
0 To
1 0 0 1 -142.313 16.7739 0 Tp
0 Tv
TP
-9.4148 0 Td
0 Tr
0 g
1 w
1 Ta
(P) Tx 1 50 Tk
(eer\r) Tx 1 0 Tk
-5.6511 -10 Td
(\(router\)) Tx 1 0 Tk
(\r) TX 
TO
1 g
0 R
0 G
0.5 w
-117.9692 4.9009 m
-120.96 4.9009 L
-120.96 23.0913 L
-117.9692 23.0913 L
-117.9692 4.9009 L
b
u
0 Ap
0.85 g
0.3 G
1 w
-204.3003 -33.1953 m
-208.1304 -18.998 -193.7056 -20.8916 v
-186.0415 -3.1445 -174.5479 -11.6621 v
-153.3608 -8.1143 -158.5454 -23.9668 v
-146.5996 -25.1494 -149.9805 -37.6885 v
-152.9092 -51.1758 -164.4053 -48.3379 v
-177.7017 -59.2217 -185.3672 -45.0254 v
-205.4263 -54.2529 -204.3003 -33.1953 v
b
1 g
0.9 G
-200.2261 -33.1865 m
-203.5513 -20.873 -191.0415 -22.5127 v
-184.394 -7.125 -174.4233 -14.5088 v
-156.0488 -11.4316 -160.5439 -25.1836 v
-150.1855 -26.207 -153.1182 -37.084 v
-155.6582 -48.7852 -165.627 -46.3213 v
-177.1577 -55.7617 -183.8096 -43.4473 v
-201.2051 -51.4473 -200.2261 -33.1865 v
b
U
0 To
1 0 0 1 -178.1685 -31.4131 0 Tp
0 Tv
TP
-20.4569 0 Td
0 Tr
0 g
61.1373 0 Xb
XB
(Cor) Tx 1 -30 Tk
(por) Tx 1 10 Tk
(ate\r) Tx 1 0 Tk
4.4095 -10 Td
(netw) Tx 1 10 Tk
(or) Tx 1 -15 Tk
(k) Tx 1 0 Tk
(\r) TX 
TO
1 Ap
-149.3794 -50.2319 m
-204.7651 -50.2319 L
-204.7651 -9.3823 L
-149.3794 -9.3823 L
-149.3794 -50.2319 L
n
0 To
1 0 0 1 73.6943 -64.1235 0 Tp
0 Tv
TP
-20.7629 0 Td
0 Tr
0 O
0 g
0 Tt
5.7024 0 Xb
XB
0 Tc
(Location 2) Tx 1 0 Tk
(\r) TX 
TO
1 g
0 R
0 G
0.5 w
99.8242 -129.7969 m
143.0889 -129.7969 L
143.0889 -105.3701 L
99.8242 -105.3701 L
99.8242 -129.7969 L
b
96.832 -126.46 m
99.8193 -126.46 L
99.8193 -108.2881 L
96.832 -108.2881 L
96.832 -126.46 L
b
0 To
1 0 0 1 121.1582 -114.9814 0 Tp
0 Tv
TP
-9.4148 0 Td
0 Tr
0 g
1 w
10 Tt
74.6488 0 Xb
XB
0.09 Tc
(P) Tx 1 50 Tk
(eer\r) Tx 1 0 Tk
-5.6511 -10 Td
(\(router\)) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 81.3936 -137.6494 0 Tp
0 Tv
TP
-53.4239 0 Td
0 Tr
2 Ta
(Synchronous\r) Tx 1 0 Tk
18.4571 -10 Td
(interf) Tx 1 30 Tk
(ace) Tx 1 0 Tk
(\r) TX 
TO
0 Ap
0 R
0 G
0.5 w
83.3799 -135.5107 m
94.626 -128.5127 l
S
121.0527 -165.8799 m
121.0527 -129.7998 L
S
u
0 O
0.85 g
0.8 G
1 w
93.8506 -187.2451 m
90.0244 -173.7363 104.4346 -175.5391 v
112.0908 -158.6494 123.5732 -166.7559 v
144.7393 -163.3799 139.5596 -178.4648 v
151.4932 -179.5898 148.1162 -191.5225 v
145.1904 -204.3574 133.7061 -201.6563 v
120.4229 -212.0137 112.7646 -198.5049 v
92.7256 -207.2852 93.8506 -187.2451 v
b
1 g
0.9 G
97.9209 -187.2373 m
94.5986 -175.5205 107.0967 -177.0811 v
113.7373 -162.4385 123.6982 -169.4648 v
142.0537 -166.5381 137.5635 -179.623 v
147.9111 -180.5967 144.9814 -190.9473 v
142.4443 -202.082 132.4854 -199.7373 v
120.9658 -208.7217 114.3213 -197.002 v
96.9424 -204.6152 97.9209 -187.2373 v
b
U
0 To
1 0 0 1 119.8467 -190.4277 0 Tp
0 Tv
TP
-15.6865 0 Td
0 Tr
0 g
67.1839 0 Xb
XB
1 Ta
(Inter) Tx 1 -25 Tk
(net) Tx 1 0 Tk
(\r) TX 
TO
1 Ap
148.7168 -205.3594 m
93.3867 -205.3594 L
93.3867 -164.5498 L
148.7168 -164.5498 L
148.7168 -205.3594 L
n
0 O
1 g
0 R
0 G
0.5 w
84.1045 -98.7109 m
84.1045 -80.7002 L
78.0889 -80.7002 L
78.0889 -98.7109 L
84.1045 -98.7109 L
b
/BBAccumRotation (1.570796) XT
0 To
1 0 0 1 17.4014 -90.4399 0 Tp
0 Tv
TP
0 Tr
0 g
1 w
67.9304 0 Xb
XB
0 Ta
(J) Tx 1 20 Tk
(ac) Tx 1 20 Tk
(k) Tx 1 0 Tk
(\r) TX 
TO
0 Ap
0 R
0 G
0.5 w
15.3506 -88.374 m
4.1045 -81.376 l
S
1 Ap
0 O
1 g
-4.0898 -79.2261 m
1.9121 -79.2261 L
1.9121 -73.2104 L
-4.0898 -73.2104 L
-4.0898 -79.2261 L
b
0 To
1 0 0 1 62.7617 -109.0859 0 Tp
0 Tv
TP
-53.4239 0 Td
0 Tr
0 g
1 w
74.6488 0 Xb
XB
2 Ta
(Synchronous\r) Tx 1 0 Tk
22.1943 -10 Td
(call unit) Tx 1 0 Tk
(\r) TX 
TO
0 Ap
0 R
0 G
0.5 w
64.748 -106.9463 m
75.9941 -99.9482 l
S
u
1 Ap
0 O
1 g
3.8799 -20.7012 m
48.751 -20.7012 L
48.751 20.7319 L
3.8799 20.7319 L
3.8799 -20.7012 L
b
0 To
1 0 0 1 26.4873 8.2227 0 Tp
0 Tv
TP
-10.463 0 Td
0 Tr
0 g
1 w
0 Tt
5.7024 0 Xb
XB
1 Ta
0 Tc
(T) Tx 1 120 Tk
(elco\r) Tx 1 0 Tk
-5.044 -10 Td
(or other\r) Tx 1 0 Tk
-0.6799 -10 Td
(pro) Tx 1 15 Tk
(vider) Tx 1 0 Tk
(\r) TX 
TO
U
0 Ap
0 R
0 G
0.5 w [6 3 6 3 6 3 ]0 d
3.8984 0.0024 m
-20.2158 0.0024 l
-20.2158 -70.5659 l
S
u
1 Ap
0 O
0 g
1 w []0 d
-16.458 -70.4233 m
-20.2256 -75.1909 L
-23.9932 -70.4233 L
-16.458 -70.4233 L
f
U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_typography_AI5 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
