%!PS-Adobe-2.0 EPSF-2.0
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 8
%%For: (Kirk S Fielding) (Sun Microsystems, Inc.)
%%Title: (5365.eps)
%%CreationDate: (10/16/01) (10:26 AM)
%%BoundingBox: 3 -313 357 -3
%%HiResBoundingBox: 3.3525 -312.5566 356.6904 -3.9111
%%DocumentProcessColors: Black
%%DocumentFonts: Helvetica
%%+ Helvetica-Oblique
%%DocumentNeededFonts: Helvetica
%%+ Helvetica-Oblique
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_typography_AI5 1.0 1
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%%AI5_FileFormat 4.0
%%BeginPreview: 353 308 1 308
% FFFFFFFFFFFFFFFFFC000000000000000000000000000000000000000000000000000000000000000000000000
% 800000000000000002000000000000000000000000000000000000000000000000000000000000000000000000
% 800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 800000000000000002000000000000000000000000000000000000000000000000000000000000000000000000
% 800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 800000000000000002000000000000000000000000000000000000000000000000000000000000000000000000
% 800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 800000000000000002000000000000000000000000000000000000000000000000000000000000000000000000
% 800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 8000000C690B800002000000000000000000000000000000000000000000000000000000000000000000000000
% 80000412924A400000000000000000000000000000000000000000000000000000000000000000000000000000
% 800000221E4A400002000000000000000000000000000000000000000000000000000000000000000000000000
% 80000002104A400000000000000000000000000000000000000000000000000000000000000000000000000000
% 8000038CE92B800002000000000000000000000000000000000000000000000000000000000000000000000000
% 800000000002000000000000000000000000000000000000000000000000000000000000000000000000000000
% 800000000002000002000000000000000000000000000000000000000000000000000000000000000000000000
% 800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 800000000000000002000000000000000000000000000000000000000000000000000000000000000000000000
% 804000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 804B203E329C676602000000000000000000000000000000000000000000000000000000000000000000000000
% 80648449025204A900000000000000000000000000000000000000000000000000000000000000000000000000
% 806780487242E12F02000000000000000000000000000000000000000000000000000000000000000000000000
% 802018409045213000000000000000000000000000000000000000000000000000000000000000000000000000
% 80971012F7A5E92E02000000000000000000000000000000000000000000000000000000000000000000000000
% 800010000400000000000000000000000000000000000000000000000000000000000000000000000000000000
% 800020000000000002000000000000000000000000000000000000000000000000000000000000000000000000
% 800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 800000000000000002000000000000000000000000000000000000000000000000000000000000000000000000
% 800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 800000000000000002000000000000000000000000000000000000000000000000000000000000000000000000
% 800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 800000000000000002000000000000000000000000000000000000000000000000000000000000000000000000
% 800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% FFFFFFFFFFFFFFFFFC000000000000000000000000000000000000000000000000000000000000000000000000
% 000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000001000000000000000000000000003C00000000000000000000001E00000000000000000000000000000
% 000000000000000000000000000000000002000000000000000000000001002000000000000000000000000000
% 00000000100000000000000000000000000206644180EC66000000000001053000C47471000000000000000000
% 000000000000000000000000000000000003C90A8260948D000000000001E4A941284A4A800000000000000000
% 000000001000000000000000000000000002090280408060000000000001048140204050000000000000000000
% 00000000000000000000000000000000000209018260800800000000000104A8C0204A88800000000000000000
% 000000001000000000000000000000000003C931018090D7000000000001F49081D0407B000000000000000000
% 000000001000000000000000000000000000000100000008000000000000000080000000000000000000000000
% 000000001000000000000000000000000000000200000000000000000000000100000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000001000000000000000000000000000000008000040000000000000000004000000000000000000000000
% 000000000000000003002000000000000000000008000040000000000000000080000020000000000000000000
% 000000001000000000833100000000000000051998C03140000000000000008CCC6018A0000000000000000000
% 00000000000000000284A00000000000000004A40922CAC0000000000000025280982920000000000000000000
% 00000000100000000054000000000000000004A100300040000000000000025101110020000000000000000000
% 00000000100000000224A20000000000000004A008228A40000000000000025280990020000000000000000000
% 000000001000000000231000000000000000049C81CE01C0000000000000024C406701E0000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000010000FFFFFFFFFFFFFC00000000FFFFFFFFFFFFFC00000000FFFFFFFFFFFFFFFFFE000000000000000
% 000000000000080000000000004000000008000000000000400000000800000000000000002000000000000000
% 000000001000080000000000004000000008000000000000400000000800000000000000000000000000000000
% 00000000BA0008000000000003F800000008000000000003F8000000080000000000000001B800000000000000
% 00000000FC0008000000000003F800000008000000000003F0000000080000000000000000FC00000000000000
% 000000007C0008000000000001F000000008000000000001F0000000080000000000000000F800000000000000
% 00000000380008000000000000E000000008000000000000E00000000800000000000000007000000000000000
% 000000003000080000000000004000000008000000000000C00000000800000000000000003000000000000000
% 000000000000080000000000000000000008000000000000000000000800000000000000000000000000000000
% FFFFFFFFFFFFFFFFFE0000FFFFFFFFFFFFFFFFFC0000FFFFFFFFFFFFFFFFFC0000FFFFFFFFFFFFFFFFFC000000
% 800000000000000000000000000000000000000400010000000000000000040001000000000000000004000000
% 800000000000000002000080000000000000000000010000000000000000000001000000000000000004000000
% 800000000000000000000000000000000000000400010000000000000000040001000000000000000004000000
% 800000000000000002000080000000000000000000000000000000000000000000000000000000000004000000
% 800000000000000000000000000000000000000400010000000000000000040001000000000000000004000000
% 800000000000000002000080000000000000000400000000000000000000040000000000000000000004000000
% 800000000000000000000000000000000000000400010000000000000000040001000000000000000004000000
% 800000000000000002000080000000000000000000000000000000000000000000000000000000000004000000
% 800000000000000000000000000000000000000400010000000000000000040001000000000000000004000000
% 800000000000000002000080000000000000000000010000000000000000000001000000000000000004000000
% 800000000000000000000000000000000000000400010000000000000000040001000000000000000004000000
% 800000000003000002000080000008000000000000000000001000000000000000000000001000000004000000
% 800001000404800000000000000000000000000400010000000000000000040001000000000000000004000000
% 800001719B8080000200008000001888E00000040000000002933A038000040000000000029300000004000000
% 800000484201000000000000000000100000000400010000025400000000040001000000025400000004000000
% 80000249C00200000200008000000ABEE000000000000000025302838000000000000000025300000004000000
% 8000004A5000000000000000000000001000000400010000025080100000040001000000025080000004000000
% 80000073C80200000200008000000A9CE0000000000100000253BA738000000001000000025380000004000000
% 800000400000000000000000000000000000000400010000000000000000040001000000000000000004000000
% 800000000000000002000080000000000000000000000000000000000000000000000000000000000004000000
% 800000000000000000000000000000000000000400010000000000000000040001000000000000000004000000
% 800000000000000002000080000000000000000400000000000000000000040000000000000000000004000000
% 800000000000000000000000000000000000000400010000000000000000040001000000000000000004000000
% 800000000000000002000080000000000000000000000000000000000000000000000000000000000004000000
% 800000000000000000000000000000000000000400010000000000000000040001000000000000000004000000
% 800000000000000002000080000000000000000000010000000000000000000001000000000000000004000000
% 800000000000000000000000000000000000000400010000000000000000040001000000000000000004000000
% 800000000000000002000080000000000000000000000000000000000000000000000000000000000004000000
% 800000000000000000000000000000000000000400010000000000000000040001000000000000000004000000
% 800000000000000002000080000000000000000400000000000000000000040000000000000000000004000000
% 800000000000000000000000000000000000000400010000000000000000040001000000000000000004000000
% 800000000000000002000080000000000000000400008000000000000000040000800000000000000004000000
% 555555555555555554000055555555555555555400005555555575555555540000555555557555555554000000
% 000000001000000000000000000000100000000000000000000020000000000000000000002000000000000000
% 000000001000000000000000000000100000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000020000000000000000000002000000000000000
% 000000001000000000000000000000100000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000020000000000000000000002000000000000000
% 000000001000000000000000000000100000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000020000000000000000000002000000000000000
% 000000001000000000000000000000100000000000000000000000000000000000000000000000000000000000
% 000000001000000000000000000000100000000000000000000020000000000000000000002000000000000000
% 000000001000000000000000000000100000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000020000000000000000000002000000000000000
% 000000001000000000000000000000100000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000020000000000000000000002000000000000000
% 000000001000000000000000000000100000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000020000000000000000000002000000000000000
% 000000001000000000000000000000100000000000000000000000000000000000000000000000000000000000
% 000000001000000000000000000000100000000000000000000020000000000000000000002000000000000000
% 000000001000000000000000000000100000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000020000000000000000000002000000000000000
% 000000001000000000000000000000100000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000020000000000000000000002000000000000000
% 000000001000000000000000000000100000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000020000000000000000000002000000000000000
% 000000001000000000000000000000100000000000000000000000000000000000000000000000000000000000
% 000000001000000000000000000000100000000000000000000020000000000000000000002000000000000000
% 000000001000000000000000000000100000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000020000000000000000000002000000000000000
% 000000001000000000000000000000100000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000020000000000000000000002000000000000000
% 00000000FE00000000000000000001FE00000000000000000001FC00000000000000000001FC00000000000000
% 00000000FC00000000000000000000FC00000000000000000000FC00000000000000000000FC00000000000000
% 000000007C00000000000000000000780000000000000000000078000000000000000000007800000000000000
% 000000003800000000000000000000380000000000000000000070000000000000000000007000000000000000
% 000000001000000000000000000000300000000000000000000030000000000000000000003000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% D555555555555555540000D555555555555555540001D555555555555555540001D55555555555555554000000
% 800000000000000002000080000000000000000400000000000000000000040000000000000000000004000000
% 800000000000000000000000000000000000000400010000000000000000040001000000000000000004000000
% 800000300000000002000080000030000000000000000000000000000000000000000000000000000004000000
% 800000480000000000000000000048000000000400010000000000000000040001000000000000000004000000
% 80000085C670000002000080000085C67000000000010000000000000000000001000000000000000004000000
% 800000852948000000000000000085294800000400010000000000000000040001000000000000000004000000
% 800000852F480000020000800000852F4800000000000000002000000000000000000000000000000004000000
% 800000052848000000000000000005284800000400010000000004000000040001000000000000400004000000
% 80000079C648000002000080000079C648000004000000000726003B000004000000024E032332700004000000
% 80000001000000000000000000000100000000040001000004A800000000040001000040029085480004000000
% 80000000000000000200008000000000000000000000000004A6003A00000000000001000092A8480004000000
% 80000000000000000000000000000000000000040001000004A101000000040001000190009481480004000000
% 80020000000000800200008000000000000000000001000004AE0039000000000100008E009797480004000000
% 800000000000000000000004000000000000004400010000000000000000040001000000000000000004000000
% 800476738CA2CE4002000080999A3A329C67660000000000000000000000000000000100000000000004000000
% 80044A16642D204000000000242849425204A90400010000000000000000040001000000000000000004000000
% 8004127424E93E40020000893C00487242E12F2400000000000000000000040000080000000000000004000000
% 80041214A508504000000001200440904521200400010800000000000000240001010000000000000024000000
% 800492F721EA4C400200008418BC02F6A5E92E000000082E480B18CE33B3200000112C803B28CE63B324000000
% 800000000000000000000004000000040000004400011140403481290254940001119210250912125494000000
% 80020000000000800200008000000004000000000001019E5024B9287297800001119E00293A32729784000000
% 800000000000000000000000000000000000000400010150602148109490040001108060494252149004000000
% 80000000080000000200008000000008000000000000085C24297BD2B487200000125C48487B82B48724000000
% 800000000800000000000000000000080000000400010800440002000000240001000040000000000024000000
% 8000008E280000000200008000008E280000000400000000800002000000040000080080000000000004000000
% 800001004800000000000000000100480000000400010000000000000000040001000000000000000004000000
% 800003EE88000000020000800003EE880000000000000000000000000000000000000000000000000004000000
% 800010110800000000000000001011080000000400010000000000000000040001000000000000000004000000
% 800001CF78842000020000800001CF788420000000010000000000000000000001000000000000000004000000
% 800000000000000000000000000000000000000400010000000000000000040001000000000000000004000000
% 800000000000000002000080000000000000000000000000000000000000000000000000000000000004000000
% D555555555555555540000D555555555555555540001D555555555555555540001D55555555555555554000000
% 000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000002110000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000190000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000002191876338328E00
% 00000000000000000000000000000000000000000000000000000000000000000000000000015244A4000A5200
% 00000000000000000000000000000000000000000000000000000000000000000000000000213044A7802A5200
% 0000000000000000000000000000000000000000000000000000000000000000000000000001304400004A5200
% 00000000000000000000000000000000000000000000000000000000000000000000000000211384A6B87A4E00
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000210000C0CC000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000010000C0D2000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000021C6300002000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000121400004000000
% 000000000000000000000000000000000000000000000000000000000000000000000000002127300008000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000129080000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000212F380008000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000001FE00000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000FC00000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000007800000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000007000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000555555555555555554000000
% 000000000000000000000000000000000000000000000000000000000000000001800000000000000004000000
% 000000000000000000000000000000000000000000000000000000000000000001000000000000000004000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000
% 000000000000000000000000000000000000000000000000000000000000000001000000000000000004000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000
% 000000000000000000000000000000000000000000000000000000000000000001000000000000000004000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000
% 00000000000000000000000000000000000000000000000000000000000000000100003C000000000004000000
% 000000000000000000000000000000000000000000000000000000000000000001000022002000000004000000
% 000000000000000000000000000000000000000000000000000000000000000001000022210311800004000000
% 00000000000000000000000000000000000000000000000000000000000000000000002A02A0AA400004000000
% 000000000000000000000000000000000000000000000000000000000000000001000022744543C00004000000
% 00000000000000000000000000000000000000000000000000000000000000000000002200A88A000004000000
% 000000000000000000000000000000000000000000000000000000000000000001000022730699800004000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000
% 000000000000000000000000000000000000000000000000000000000000000001000000000000000004000000
% 000000000000000000000000000000000000000000000000000000000000000001000000000000000004000000
% 000000000000000000000000000000000000000000000000000000000000000001000000000004100004000000
% 00000000000000000000000000000000000000000000000000000000000000000000002828800C300004000000
% 00000000000000000000000000000000000000000000000000000000000000000100000000E900000004000000
% 000000000000000000000000000000000000000000000000000000000000000000000000009900000004000000
% 000000000000000000000000000000000000000000000000000000000000000001000000009400000004000000
% 000000000000000000000000000000000000000000000000000000000000000000000000009600000004000000
% 00000000000000000000000000000000000000000000000000000000000000000100000000E201000004000000
% 000000000000000000000000000000000000000000000000000000000000000001000000000000000004000000
% 000000000000000000000000000000000000000000000000000000000000000001000000000400000004000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000
% 000000000000000000000000000000000000000000000000000000000000000001000000000000000004000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000
% 000000000000000000000000000000000000000000000000000000000000000001000000000000000004000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000
% 000000000000000000000000000000000000000000000000000000000000000001000000000000000004000000
% 000000000000000000000000000000000000000000000000000000000000000001BBBBBBBBBBBBBBBBBC000000
% 000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000001FC00000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000FC00000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000007800000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000EEEEEEEEEEEEEEEEEC000000
% 000000000000000000000000000000000000000000000000000000000000000001000000000000000004000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000
% 000000000000000000000000000000000000000000000000000000000000000001000000000000000004000000
% 000000000000000000000000000000000000000000000000000000000000000001000000000000000004000000
% 000000000000000000000000000000000000000000000000000000000000000001000000000000000004000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000
% 000000000000000000000000000000000000000000000000000000000000000001000000000000000004000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000400004000000
% 000000000000000000000000000000000000000000000000000000000000000001000000000000400004000000
% 00000000000000000000000000000000000000000000000000000000000000000000024E032332700004000000
% 000000000000000000000000000000000000000000000000000000000000000001000050029085480004000000
% 0000000000000000000000000000000000000000000000000000000000000000010001000092A8480004000000
% 000000000000000000000000000000000000000000000000000000000000000001000180009480480004000000
% 00000000000000000000000000000000000000000000000000000000000000000000008E009393480004000000
% 000000000000000000000000000000000000000000000000000000000000000001000000000000000004000000
% 000000000000000000000000000000000000000000000000000000000000000000000100000000000004000000
% 000000000000000000000000000000000000000000000000000000000000000001000000000000000004000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000
% 000000000000000000000000000000000000000000000000000000000000000001080000000000000004000000
% 000000000000000000000000000000000000000000000000000000000000000001082E480CC11C63E324000000
% 000000000000000000000000000000000000000000000000000000000000000001014040252152049024000000
% 000000000000000000000000000000000000000000000000000000000000000000019E5025EB02A48FA4000000
% 000000000000000000000000000000000000000000000000000000000000000001015060240505240824000000
% 000000000000000000000000000000000000000000000000000000000000000000085C2421C4A5E12E24000000
% 000000000000000000000000000000000000000000000000000000000000000001080040000000000004000000
% 000000000000000000000000000000000000000000000000000000000000000000000080000000000004000000
% 000000000000000000000000000000000000000000000000000000000000000001000000000000000004000000
% 000000000000000000000000000000000000000000000000000000000000000001000000000000000004000000
% 000000000000000000000000000000000000000000000000000000000000000001000000000000000004000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000
% 000000000000000000000000000000000000000000000000000000000000000001000000000000000004000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000
%%EndPreview
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%CMYKProcessColor: 1 1 1 1 ([Registration])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 18 0 0 0 0 0 0 0 0 131071 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 182.834 -230.166 182.834 -230.166
%AI3_TileBox: -114.1665 -581.166 477.834 156.834
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 612 792
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI8_OpenToView: -143.666 31.334 1.5 1018 725 18 1 1 3 40 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:-114.1665 -581.166
%%AI3_PaperRect:-9 783 603 -9
%%AI3_Margin:9 -40 -9 9
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI7_Thumbnail: 128 112 8
%%BeginData: 7684 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C457DFD18A87DFD66FF7DFD18FFA8FD66FFA8FD18FF7DFD66FF7DFD07
%FF7DFF7DFF7DA87DA8A8A87DFD06FFA8FD66FFA8FD07FFA87DFD04A8FD04
%7DA8FD06FFA8FD66FF7DFD10FFA8FD07FFA8FD66FFA8FD18FFA8FD66FF7D
%FFFFA87D7D52A8FFA87D7DA87D7DFF7D7D7DA87D7D7DA8FFA8FD66FFA8FF
%FF7D7D7DA8A8FFA8A87D7D7DA8FFA87D7D7DA8A87D7DFFA8FD66FF7DFD05
%FF7DFD06FFA8FD0BFFA8FD66FFA8FD18FF7DFD66FF52A87DA87DA87DA87D
%A87DA87DA87DA87DA87DA87DA87DA87D7DFD72FFA8FD7FFF7DFD7FFFA8FD
%27FFA8A8FFA8FD1FFF7DFD34FF7DFD27FF52FF7D7DFF7DA8FFA8A87DFF7D
%7D7DA8A87DA8FD10FF7DA8A87DFF52A8FFA87DA8A8A87DA87DA87DFD23FF
%A8FD27FF7DA8A87DFF7DFFFFFF7DA8FFA8A8A87DA87DA8FD10FF7DFFA8A8
%FFA8A8FFA8A8A8FF7DA8A87D7D7DA8FD22FF7DFD2CFFA8FD0BFFA8FD16FF
%A8FD0BFFA8FD23FFA8FD0DFFA8A8FFA8FFA8FD19FFA8FFA8FD07FFA8FD48
%FF7DFD0DFF52A8A87DA8A8FD16FF7DA8A87DA87DFFA8A8A852A8A87DFD15
%FFA87DFF7DFF7DFF7DA8A87D7DA87DFD25FFA8FD0DFFA87DA87DFFA8FD16
%FFA8A8A87DFFA8FF7DFF7DA87DA87DFD15FF7DA8A87DFFA8FFA8A87DA8A8
%7D7DFD25FF7DFD06FFA87DA87DA87DA87DA87DA87DA87DA87DA87DA8A8FD
%0BFFA8A87DA87DA87DA87DA87DA87DA87DA87DA87DA8A8FD0BFFA8A87DA8
%7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8A8FD1EFFA87DA8FD
%05FF7DFD11FFA87DA8FD0AFFA8FD12FFA87DA8FD0AFFA8FD18FF7D7DA8FD
%1DFF7DF827A8FD04FFA8FD10FFA827F87DFD0AFF7DFD11FFA8F8F8A8FD0A
%FF7DFD17FFA827F87DFD1EFF7DA8FD05FFA8FD11FFA87DFD0BFFA8FD12FF
%7D7DFD0BFFA8FD18FFA87DFD13FF52A87DA87DA87DA87DA87DA87DA87DA8
%7DA87DA87DA87DA87DA8FD05FFA87DA87DA87DA87DA87DA87DA87DA87DA8
%7DA87DA87DA87DA87DA8FD05FF7D7DA87DA87DA87DA87DA87DA87DA87DA8
%7DA87DA87DA87DA87DA8FD05FF7D7DA87DA87DA87DA87DA87DA87DA87DA8
%7DA87DA87DA87DA852FD07FFA8FD18FF7DFD05FFA8FD19FF7DFD05FFA8FD
%19FF7DFD05FFA8FD18FFA8FD07FF7DFD18FFA8FD05FFA8FD19FFA8FD05FF
%A8FD19FFA8FD05FFA8FD18FF7DFD07FFA8FD18FFA8FD05FFA8FD19FFA8FD
%05FFA8FD19FFA8FD05FFA8FD18FFA8FD07FF7DFD07FFA8FFFFFFA8FFA8FF
%FFA8A8FD06FFA8FD05FFA8FD0AFFA8FFA8FD0CFFA8FD05FFA8FD0AFFA8FF
%FFFFA8FD0AFFA8FD05FFA8FD18FF7DFD07FFA8FD07FFFD05A8FF7DA8FFA8
%FD07FFA8FD05FF7DFD09FF7DFFA8A8A87DA8FD09FFA8FD05FF7DFD08FFA8
%A87DFD05A87DA8FD07FFA8FD05FF7DFD0BFF7DFF7DFD0AFFA8FD07FF7DFD
%07FF7D7D7DA852FF7DA8FFA8FD07FFA8FD05FFA8FD09FFA8FFA87D527DA8
%FD09FFA8FD05FFA8FD08FF7DA87DA8FD057DA8FD07FFA8FD05FFA8FD0BFF
%A87D7DFD0AFF7DFD07FFA8FD08FFA8FD0FFFA8FD05FFA8FD19FFA8FD05FF
%A8FD19FFA8FD05FFA8FD18FFA8FD07FF7DFD18FFA8FD05FFA8FD19FFA8FD
%05FFA8FD19FFA8FD05FFA8FD18FF7DFD07FFA8FD18FF7DFD05FFA8FD19FF
%7DFD05FFA8FD19FF7DFD05FFA8FD18FFA8FD07FF7DFD18FFA8FD05FFA8FD
%19FFA8FD05FFA8FD19FFA8FD05FFA8FD18FF7DFD07FF7DFD18A87DFD05FF
%FD1BA8FD05FF7DFD1AA8FD05FF7DFD18A87DFD13FF7DFD1FFF7DFD1FFF7D
%FD1FFF7DFD1FFFA8FD1FFFA8FD1FFFA8FD1FFFA8FD1FFF7DFD1FFF7DFD1F
%FF7DFD1FFF7DFD1FFFA8FD1FFFA8FD1FFFA8FD1FFFA8FD1FFF7DFD1FFF7D
%FD1FFF7DFD1FFF7DFD1FFFA8FD1FFFA8FD1FFFA8FD1FFFA8FD1FFF7DFD1F
%FF7DFD1FFF7DFD1FFF7DFD1FFFA8FD1FFFA8FD1FFFA8FD1FFFA8FD1FFF7D
%FD1FFF7DFD1FFF7DFD1FFF7DFD1FFFA8FD1FFFA8FD1FFFA8FD1FFFA8FD1E
%FFA852A8A8FD1CFFA852A8FD1DFFA852A8FD1CFFA8A852A8FD1DFF7DF827
%FD1DFF52F852FD1DFF27F852FD1DFF27F87DFD12FF7DA87DA87DA87DA87D
%A87DA827A87DA87DA87DA87DA87DA87DFD07FF7DA87DA87DA87DA87DA87D
%A827A87DA87DA87DA87DA87DA87DFD06FFA87DA87DA87DA87DA87DA87DA8
%27A87DA87DA87DA87DA87DA87DFD06FFA87DA87DA87DA87DA87DA87D7D27
%A87DA87DA87DA87DA87DA87DFD07FFA8FD08FFA8A8FD0EFF7DFD05FFA8FD
%09FFA8A8FD0EFF7DFD05FFA8FD19FF7DFD05FFA8FD18FFA8FD07FF7DFD08
%FFA8FFA87DA87DA87DFD08FFA8FD05FFA8FD09FFA87DA87DA87DA87DFD08
%FFA8FD05FFA8FD19FFA8FD05FFA8FD18FF7DFD07FFA8FD08FFA8A8A87D7D
%7DA8A8FD08FFA8FD05FFA8FD09FF7DA87DA87D7DA8A8FD08FFA8FD05FFA8
%FD19FFA8FD05FFA8FD18FFA8FD07FF7DFD0BFFA8FD0CFFA8FD05FFA8FD0B
%FFA8FD0DFFA8FD05FFA8FD08FF7DA852FFFFFF52A87DFD08FFA8FD05FFA8
%FD04FFA8A8FFA87DFFFF7D7DA87DFFA8A852FD05FF7DFD07FFA8FD18FFA8
%FD05FF7DFD17FFA8FFA8FD05FF7DFD08FFA87D7DFFFFFF7D52A8FD08FFA8
%FD05FF7DFD05FF7DFF7DA8FFFF7DA8A87DA8A87DA87DFD04FFA8FD07FF7D
%FD04FFA8A87D7DA8527DFF7D7D7DA87D7DA852FD04FFA8FD05FFA8FFFF7D
%FF7D7DFF7DA8A87D7DA87D7DA87DFF7DA8FD047DFFA8FD05FFA8FD0BFFA8
%A8FD0CFFA8FD05FFA8FD04FFA8FFFFA87DA8FD0EFF7DFD07FFA8FD04FFA8
%A87DA8527D7DFFA8A852A8A8A87D7DFD04FFA8FD05FFA8FFFFA8FF7DA8FF
%7DFFA8A87D7D7DA87DA87D7D7DA8A87D52FFA8FD05FFA8FD17FFA8FFA8FD
%05FFA8FD17FFA8A8FD07FF7DFD05FFA8FFFFFFA8FD09FFA8FD04FFA8FD05
%FFA8FFFFA8FD0AFFA8FD09FFA8FFA8FD05FFA8FFFD04A87DA8FFFFA87D7D
%A8A87DFF7DA87DA87DA8A852A8A8FD05FFA8FFA8A8A87D7DA8FFFFA87D7D
%A87D7DFF7DA87DA87DA87D7D7DFD07FFA8FD0CFFA8FD0BFF7DFD05FFA8FD
%0DFFA8FD0BFF7DFD05FFA8FF7DA87DA852A8FFFF7DA8A8A8F8A8FFA87D7D
%A8A87DA852FF7DFD05FFA8FF7DA87D7D7DA8A8FF7DA8A87D52A8FFA87D7D
%A8A87D7D7DA8FD07FF7DFD07FF7DFD04A87DFD0BFFA8FD05FFA8FD07FFA8
%A87DA8A8A87DFD0BFFA8FD05FFA8FFA8A8FFFFA8FFFFA8FD04FFA8FD09FF
%A8FFA8FD05FFA8FFA8A8FFFFA8FD07FFA8FD09FFA87DFD07FFA8FD07FFA8
%52A87DA87DFD0BFFA8FD05FFA8FD07FFA8A87DA87DA87DFD0BFFA8FD05FF
%A8FD19FFA8FD05FFA8FD18FFA8FD07FF52A87DA87DA87DA87DA87DA87DA8
%7DA87DA87DA87DA87DA87D7DFD05FFA87DA87DA87DA87DA87DA87DA87DA8
%7DA87DA87DA87DA87DA87DA8FD05FFA87DA87DA87DA87DA87DA87DA87DA8
%7DA87DA87DA87DA87DA87DA8FD05FFA87DA87DA87DA87DA87DA87DA87DA8
%7DA87DA87DA87DA87DA852FD73FFA8FD7FFF7DFFA8FFA8FD0EFFA8FD6CFF
%A8FFA8A87DA8FF7DFD04A87DA8FF7DA8A8A87DFD6CFF7DFF7DA852A8FFA8
%7DA852A852A87D7D7DA87D7DFD6CFFA8FD0BFFA8FD73FF7DFFA8FD05FFA8
%A8FFFFA8A8FD72FFA8FFA8A8A87DFD07FF7DFD72FF7DFF7DA8527D7DFD06
%FFA8FD72FFA8FD08FFA8FD76FF7DFD7EFFA87DA8FD7DFF27F8A8FD71FFA8
%A87DA8A8A87DA8A8A87DA8A87D7DA8A8A87DA8A8A87DA8A8A8FD66FFA8FD
%18FF7DFD66FFA8FD18FFA8FD66FFA8FD07FFA8A8FD04FFA8FD0AFF7DFD66
%FF7DFD07FF52A8A8A87DFF7DFD05A8FD05FFA8FD66FFA8FD07FFA87D527D
%7DA8A852A87D527DFD05FF7DFD66FFA8FD07FF7DFFFFA8A8FD05FFA8FFA8
%FD04FFA8FD66FFA8FD07FFA8FFFFA8FF52A8A8FFA8FFA8FD05FF7DFD66FF
%A8FD0CFF7D52FFFFFFA8FD06FFA8FD66FFA8FD07FFA8A8FD04FFA8FD0AFF
%7DFD66FFA8FD18FFA8FD66FFA8FD18FF7DFD66FF7DA8A8A87DA8A8A87DA8
%A8A87DA8A8A87DA8A8A87DA8A8A87D7DFD73FF7DFD7FFFA8FD7FFF7DFD7F
%FFA8FD7FFF7DFD7FFFA8FD7FFF7DFD7FFFA8FD7FFF7DFD7FFFA8FD7DFFA8
%7D277DFD7DFF27F8A8FD72FF7DA87DA87DA87DA87DA87DA852A87DA87DA8
%7DA87DA87DA87DFD66FFA8FD18FFA8FD66FFA8FD18FF7DFD66FF7DFD18FF
%A8FD66FFA8FD04FFA8A8FFA87DFFFF7D7DFF7DFFA8A852A8FD04FF7DFD66
%FFA8FD05FF7DFF7DA8FFFF7DA8A87DFFA87DA87DFD04FFA8FD66FFA8FFFF
%A8FFA8FFFFA87DA8FD0CFFA8FF7DFD66FFA8FF7DA8A8A852A8FFFFA87DA8
%A87D7DA87DA8A87DA8A8A87DA8FD66FFA8FFA8FD047DA8FFA8A87DA8527D
%52A87D7D52A87DA8527D7DFD66FFA8FFA8FFFFFF7DFD12FFA8FD66FFA8FD
%18FF7DFD66FF7DFD18FFA8FD66FFA87DA87DA87DA87DA87DA87DA87DA87D
%A87DA87DA87DA87DA87DFD06FFFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI5 1.0 1
%%Title: (Typography Operators)
%%Version: 1.0 1
%%CreationDate:(6/10/1996) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI5 68 dict dup begin
put
/initialize
{
 begin
 begin
	Adobe_typography_AI5 begin
	Adobe_typography_AI5
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
 end
 end
	Adobe_typography_AI5 begin
} def
/terminate
{
	currentdict Adobe_typography_AI5 eq
	{
	 end
	} if
} def
/modifyEncoding
{
	/_tempEncode exch ddef
	/_pntr 0 ddef
	{
		counttomark -1 roll
		dup type dup /marktype eq
		{
			pop pop exit
		}
		{
			/nametype eq
			{
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				/_pntr exch ddef
			} ifelse
		} ifelse
	} loop
	_tempEncode
} def
/havefont
{
	systemdict /languagelevel known
		{
		/Font resourcestatus dup
			{ exch pop exch pop }
		if
		}
		{
		systemdict /FontDirectory get 1 index known
			{ pop true }
			{
			systemdict /fileposition known
				{
				dup length 6 add exch
				Ss 6 250 getinterval
				cvs pop
				Ss exch 0 exch getinterval
				status
					{ pop pop pop pop true }
					{ false }
				ifelse
				}
				{
				pop false
				}
			ifelse
			}
		ifelse
		}
	ifelse
} def
/TE
{
	StandardEncoding 256 array copy modifyEncoding
	/_nativeEncoding exch def
} def
/subststring {
	exch 2 index exch search
	{
		exch pop
		exch dup () eq
		{
			pop exch concatstring
		}
		{
			3 -1 roll
			exch concatstring
			concatstring
		} ifelse
		exch pop true
	}
	{
		pop pop false
	} ifelse
} def
/concatstring {
	1 index length 1 index length
	1 index add
	string
	dup 0 5 index putinterval
	dup 2 index 4 index putinterval
	4 1 roll pop pop pop
} def
%
/TZ
{
	dup type /arraytype eq
	{
		/_wv exch def
	}
	{
		/_wv 0 def
	} ifelse
	/_useNativeEncoding exch def
	2 index havefont
	{
		3 index
		255 string
		cvs
		
		dup
		(_Symbol_)
		eq
		{
			pop
			2 index
			findfont
			
		}
		{
			1 index 0 eq
			{
				dup length 1 sub
				1 exch
				getinterval
				
				cvn
				findfont
			}
			{
				pop 2 index findfont
			} ifelse
		} ifelse
	}
	{
		dup 1 eq
		{
			2 index 64 string cvs
			dup (-90pv-RKSJ-) (-83pv-RKSJ-) subststring
			{
				exch pop dup havefont
				{
					findfont false
				}
				{
					pop true
				} ifelse
			}
			{
				pop	dup
				(-90ms-RKSJ-) (-Ext-RKSJ-) subststring
				{
					exch pop dup havefont
					{
						findfont false
					}
					{
						pop true
					} ifelse
				}
				{
					pop pop true
				} ifelse
			} ifelse
			{
				1 index 1 eq
				{
					/Ryumin-Light-Ext-RKSJ-V havefont
					{/Ryumin-Light-Ext-RKSJ-V}
					{/Courier}
					ifelse
				}
				{
					/Ryumin-Light-83pv-RKSJ-H havefont
					{/Ryumin-Light-83pv-RKSJ-H}
					{/Courier}
					ifelse
				} ifelse
				findfont
				[1 0 0.5 1 0 0] makefont
			} if
		}
		{
			/Courier findfont
		} ifelse
	} ifelse
	_wv type /arraytype eq
	{
		_wv makeblendedfont
	} if
	dup length 10 add dict
 begin
	mark exch
	{
		1 index /FID ne
		{
			def
		} if
		cleartomark mark
	} forall
	pop
	/FontScript exch def
	/FontDirection exch def
	/FontRequest exch def
	/FontName exch def
	counttomark 0 eq
	{
		1 _useNativeEncoding eq
		{
			/Encoding _nativeEncoding def
		} if
		cleartomark
	}
	{
		/Encoding load 256 array copy
		modifyEncoding /Encoding exch def
	} ifelse
	FontName currentdict
 end
	definefont pop
} def
/tr
{
	_ax _ay 3 2 roll
} def
/trj
{
	_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
	/Tx
	{
		dup
		currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
	} ddef
	/Tj
	{
		dup
		currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
	} ddef
} def
/a1
{
W B
} def
/e0
{
	/Tx
	{
		tr _psf
	} ddef
	/Tj
	{
		trj _pjsf
	} ddef
} def
/e1
{
W F 
} def
/i0
{
	/Tx
	{
		tr sp
	} ddef
	/Tj
	{
		trj jsp
	} ddef
} def
/i1
{
	W N
} def
/o0
{
	/Tx
	{
		tr sw rmoveto
	} ddef
	/Tj
	{
		trj swj rmoveto
	} ddef
} def
/r0
{
	/Tx
	{
		tr _ctm _pss
	} ddef
	/Tj
	{
		trj _ctm _pjss
	} ddef
} def
/r1
{
W S
} def
/To
{
	pop _ctm currentmatrix pop
} def
/TO
{
	iTe _ctm setmatrix newpath
} def
/Tp
{
	pop _tm astore pop _ctm setmatrix
	_tDict begin
	/W
	{
	} def
	/h
	{
	} def
} def
/TP
{
 end
	iTm 0 0 moveto
} def
/Tr
{
	_render 3 le
	{
		currentpoint newpath moveto
	} if
	dup 8 eq
	{
		pop 0
	}
	{
		dup 9 eq
		{
			pop 1
		} if
	} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm
{
	_ctm setmatrix _tm concat
	_shift aload pop _lineorientation 1 eq { exch } if translate
	_scale aload pop _lineorientation 1 eq _yokoorientation 1 eq or { exch } if scale
} def
/Tm
{
	_tm astore pop iTm 0 0 moveto
} def
/Td
{
	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
	_render -1 eq
	{
	}
	{
		_renderEnd _render get dup null ne
		{
			load exec
		}
		{
			pop
		} ifelse
	} ifelse
	/_render -1 ddef
} def
/Ta
{
	pop
} def
/Tf
{
	1 index type /nametype eq
	{
		dup 0.75 mul 1 index 0.25 mul neg
	} if
	/_fontDescent exch ddef
	/_fontAscent exch ddef
	/_fontSize exch ddef
	/_fontRotateAdjust _fontAscent _fontDescent add 2 div neg ddef
	/_fontHeight _fontSize ddef
	findfont _fontSize scalefont setfont
} def
/Tl
{
	pop neg 0 exch
	_leading astore pop
} def
/Tt
{
	pop
} def
/TW
{
	3 npop
} def
/Tw
{
	/_cx exch ddef
} def
/TC
{
	3 npop
} def
/Tc
{
	/_ax exch ddef
} def
/Ts
{
	0 exch
	_shift astore pop
	currentpoint
	iTm
	moveto
} def
/Ti
{
	3 npop
} def
/Tz
{
	count 1 eq { 100 } if
	100 div exch 100 div exch
	_scale astore pop
	iTm
} def
/TA
{
	pop
} def
/Tq
{
	pop
} def
/Tg
{
	pop
} def
/TG
{
	pop
} def
/Tv
{
	/_lineorientation exch ddef
} def
/TV
{
	/_charorientation exch ddef
} def
/Ty
{
	dup /_yokoorientation exch ddef 1 sub neg Tv
} def
/TY
{
	pop
} def
/T~
{
	Tx
} def
/Th
{
	pop pop pop pop pop
} def
/TX
{
	pop
} def
/Tk
{
	_fontSize mul 1000 div
	_lineorientation 0 eq { neg 0 } { 0 exch } ifelse
	rmoveto
	pop
} def
/TK
{
	2 npop
} def
/T*
{
	_leading aload pop
	_lineorientation 0 ne { exch } if
	Td
} def
/T*-
{
	_leading aload pop
	_lineorientation 0 ne { exch } if
	exch neg exch neg
	Td
} def
/T-
{
	_ax neg 0 rmoveto
	_lineorientation 1 eq _charorientation 0 eq and { 1 TV _hyphen Tx 0 TV } { _hyphen Tx } ifelse
} def
/T+
{
} def
/TR
{
	_ctm currentmatrix pop
	_tm astore pop
	iTm 0 0 moveto
} def
/TS
{
	currentfont 3 1 roll
	/_Symbol_ findfont _fontSize scalefont setfont
	
	0 eq
	{
		Tx
	}
	{
		Tj
	} ifelse
	setfont
} def
/Xb
{
	pop pop
} def
/Tb /Xb load def
/Xe
{
	pop pop pop pop
} def
/Te /Xe load def
/XB
{
} def
/TB /XB load def
currentdict readonly pop
end
setpacking
%
/X^
{
	currentfont 5 1 roll
	dup havefont
		{
		findfont _fontSize scalefont setfont
		}
		{
		pop
		exch
		} ifelse
	2 index 0 eq
	{
		Tx
	}
	{
		Tj
	} ifelse
	pop	pop
	setfont
} def
/T^	/X^	load def
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Helvetica
%%IncludeFont: Helvetica-Oblique
userdict /_useSmoothShade false put
userdict /_aicmykps true put
userdict /_forceToCMYK true put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI55J_Tsume: None
%AI3_BeginEncoding: _Helvetica Helvetica
[/_Helvetica/Helvetica 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI55J_Tsume: None
%AI3_BeginEncoding: _Helvetica-Oblique Helvetica-Oblique
[/_Helvetica-Oblique/Helvetica-Oblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
[161/degree 173/notequal 176/infinity/plusminus/lessequal/greaterequal
181/mu/partialdiff/summation/product/pi/integral 189/Omega 
195/radical 197/approxequal 198/Delta 214/divide/lozenge 240/apple
/_Symbol_/Symbol 0 0 0 TZ
%AI5_BeginPalette
0 0 Pb
1 1 1 1 ([Registration]) 0 Xs
([Registration]) Pc
PB
%AI5_EndPalette
%AI5_Begin_NonPrinting
Np
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (Art Brush Tool)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (Art Brush Tool)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Undo New Calligraphic Brush) (Calligraphic Brush Tool)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool)
%AI5_End_NonPrinting--
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 0 79 128 255 0 50 Lb
(Layer 1) Ln
0 A
u
0 R
0 G
800 Ar
0 J 0 j 0.5 w 4 M []0 d
%AI3_Note:
0 D
0 XR
38.5439 -36.9331 m
38.5439 -67.7783 l
S
/BBAccumRotation (-6.283186) XT
1 Ap
0 O
0 g
1 w
42.3125 -67.1982 m
38.5439 -71.9658 L
34.7773 -67.1982 L
42.3125 -67.1982 L
f
/BBAccumRotation (-3.926992) XT
U
0 Ap
-8008.666 -0.1196 m
8374.334 -0.1196 L
(N) *
0.5679 7961.3335 m
0.5679 -8421.666 L
(N) *
360.5684 7961.3335 m
360.5684 -8421.666 L
(N) *
-8008.666 -360.1357 m
8374.334 -360.1357 L
(N) *
u
0 To
1 0 0 1 38.5254 -91.7988 0 Tp
0 Tv
TP
-13.761 0 Td
0 Tr
0 O
0 g
%_ 0 50 XQ
/_Helvetica 9 8.379 -2.0251 Tf
0 Ts
100 100 Tz
0 Tt
%_0 0 100 100 Xu
%AI55J_GlyphSubst: GlyphSubstNone 
0 TA
%_ 0 XL
0 TY
0 TV
36 0 Xb
XB
0 0 5 TC
100 100 200 TW
25 TG
0 0 0 Ti
1 Ta
0 1 2 2 3 Th
0 Tq
240 Tg
10 0 Tl
0 Tc
0 Tw
(/path ?) Tx 
(\r) TX 
TO
1 Ap
0 R
0 G
0.5 w
73.457 -105.8276 m
3.6025 -105.8276 L
3.6025 -72.9961 L
73.457 -72.9961 L
73.457 -105.8276 L
s
U
u
0 Ap
38.5439 -105.7588 m
38.5439 -136.604 l
S
/BBAccumRotation (-6.283186) XT
1 Ap
0 O
0 g
1 w
42.3125 -136.0239 m
38.5439 -140.7915 L
34.7773 -136.0239 L
42.3125 -136.0239 L
f
/BBAccumRotation (-3.926992) XT
U
u
0 To
1 0 0 1 38.5254 -151.4888 0 Tp
0 Tv
TP
-12.258 0 Td
0 Tr
(Open \003) Tx 
-10.7459 -10 Td
(\() Tx 
/_Helvetica-Oblique 9 8.379 -2.0251 Tf
(mapname) Tx 
/_Helvetica 9 8.379 -2.0251 Tf
(\)\r) Tx 
6.4934 -10 Td
(read . . .) Tx 
(\r) TX 
TO
0 R
0 G
0.5 w
73.457 -174.6533 m
3.6025 -174.6533 L
3.6025 -141.8218 L
73.457 -141.8218 L
73.457 -174.6533 L
s
U
u
0 To
1 0 0 1 126.3687 -91.7988 0 Tp
0 Tv
TP
-8.0009 0 Td
0 Tr
0 O
0 g
1 w
(files) Tx 
(\r) TX 
TO
0 R
0 G
0.5 w
161.3003 -105.8276 m
91.4458 -105.8276 L
91.4458 -72.9961 L
161.3003 -72.9961 L
161.3003 -105.8276 L
s
U
u
0 Ap
126.3872 -105.7588 m
126.3872 -136.604 l
S
/BBAccumRotation (-6.283186) XT
1 Ap
0 O
0 g
1 w
130.1558 -136.0239 m
126.3872 -140.7915 L
122.6206 -136.0239 L
130.1558 -136.0239 L
f
/BBAccumRotation (-3.926992) XT
U
u
0 To
1 0 0 1 126.3687 -151.4888 0 Tp
0 Tv
TP
-12.258 0 Td
0 Tr
(Open \003) Tx 
-19.2509 -10 Td
(\(/etc/) Tx 
/_Helvetica-Oblique 9 8.379 -2.0251 Tf
(mapname) Tx 
/_Helvetica 9 8.379 -2.0251 Tf
(\)\r) Tx 
14.9984 -10 Td
(read . . .) Tx 
(\r) TX 
TO
0 R
0 G
0.5 w
161.3003 -174.6533 m
91.4458 -174.6533 L
91.4458 -141.8218 L
161.3003 -141.8218 L
161.3003 -174.6533 L
s
U
u
0 To
1 0 0 1 214.2109 -91.7988 0 Tp
0 Tv
TP
-14.0039 0 Td
0 Tr
0 O
0 g
1 w
(nisplus) Tx 
(\r) TX 
TO
0 R
0 G
0.5 w
249.1436 -105.8276 m
179.2886 -105.8276 L
179.2886 -72.9961 L
249.1436 -72.9961 L
249.1436 -105.8276 L
s
U
u
0 Ap
214.2305 -105.7588 m
214.2305 -136.604 l
S
/BBAccumRotation (-6.283186) XT
1 Ap
0 O
0 g
1 w
217.998 -136.0239 m
214.2305 -140.7915 L
210.4639 -136.0239 L
217.998 -136.0239 L
f
/BBAccumRotation (-3.926992) XT
U
u
0 To
1 0 0 1 38.5254 -17.8652 0 Tp
0 Tv
TP
-14.76 0 Td
0 Tr
(Lookup\r) Tx 
-13.4999 -10 Td
/_Helvetica-Oblique 9 8.379 -2.0251 Tf
(key mapname) Tx 
(\r) TX 
TO
0 R
0 G
0.5 w
73.457 -36.9927 m
3.6025 -36.9927 L
3.6025 -4.1611 L
73.457 -4.1611 L
73.457 -36.9927 L
s
U
u
0 To
1 0 0 1 214.21 -155.5283 0 Tp
0 Tv
TP
-15.0028 0 Td
0 Tr
0 O
0 g
1 w
/_Helvetica 9 8.379 -2.0251 Tf
(nis_list \003) Tx 
-17.5051 -10 Td
(\() Tx 
/_Helvetica-Oblique 9 8.379 -2.0251 Tf
(key, mapname) Tx 
/_Helvetica 9 8.379 -2.0251 Tf
(\)) Tx 
(\r) TX 
TO
0 R
0 G
0.5 w
249.1406 -174.6558 m
179.2866 -174.6558 L
179.2866 -141.8242 L
249.1406 -141.8242 L
249.1406 -174.6558 L
s
U
u
0 To
1 0 0 1 302.0801 -91.7988 0 Tp
0 Tv
TP
-5.7509 0 Td
0 Tr
0 O
0 g
1 w
(nis) Tx 
(\r) TX 
TO
0 R
0 G
0.5 w
337.0107 -105.8276 m
267.1563 -105.8276 L
267.1563 -72.9961 L
337.0107 -72.9961 L
337.0107 -105.8276 L
s
U
u
0 Ap
302.0977 -105.7588 m
302.0977 -136.604 l
S
/BBAccumRotation (-6.283186) XT
1 Ap
0 O
0 g
1 w
305.8672 -136.0239 m
302.0977 -140.7915 L
298.3311 -136.0239 L
305.8672 -136.0239 L
f
/BBAccumRotation (-3.926992) XT
U
u
0 To
1 0 0 1 302.0771 -155.5283 0 Tp
0 Tv
TP
-20.7585 0 Td
0 Tr
(yp_match \003) Tx 
-11.7494 -10 Td
(\() Tx 
/_Helvetica-Oblique 9 8.379 -2.0251 Tf
(key, mapname) Tx 
/_Helvetica 9 8.379 -2.0251 Tf
(\)) Tx 
(\r) TX 
TO
0 R
0 G
0.5 w
337.0098 -174.6558 m
267.1543 -174.6558 L
267.1543 -141.8242 L
337.0098 -141.8242 L
337.0098 -174.6558 L
s
U
0 To
1 0 0 1 305.166 -187.2554 0 Tp
0 Tv
TP
0 Tr
0 O
0 g
1 w
0 Ta
(No map and \r) Tx 
T*
(has "_"?) Tx 
(\r) TX 
TO
u
0 Ap
0 R
0 G
0.5 w
302.0977 -174.5835 m
302.0977 -205.4287 l
S
/BBAccumRotation (-6.283186) XT
1 Ap
0 O
0 g
1 w
305.8672 -204.8486 m
302.0977 -209.6162 L
298.3311 -204.8486 L
305.8672 -204.8486 L
f
/BBAccumRotation (-3.926992) XT
U
u
0 To
1 0 0 1 302.0771 -224.353 0 Tp
0 Tv
TP
-17.7569 0 Td
0 Tr
1 Ta
(Replace \r) Tx 
0.3599 -10 Td
("_" by ".") Tx 
(\r) TX 
TO
0 R
0 G
0.5 w
337.0098 -243.4814 m
267.1543 -243.4814 L
267.1543 -210.6489 L
337.0098 -210.6489 L
337.0098 -243.4814 L
s
U
u
0 Ap
302.0977 -243.4102 m
302.0977 -274.2559 l
S
/BBAccumRotation (-6.283186) XT
1 Ap
0 O
0 g
1 w
305.8672 -273.6768 m
302.0977 -278.4434 L
298.3311 -273.6768 L
305.8672 -273.6768 L
f
/BBAccumRotation (-3.926992) XT
U
u
0 To
1 0 0 1 302.0771 -293.1807 0 Tp
0 Tv
TP
-20.7585 0 Td
0 Tr
(yp_match \003) Tx 
-11.2499 -10 Td
(\() Tx 
/_Helvetica-Oblique 9 8.379 -2.0251 Tf
(key, newname) Tx 
/_Helvetica 9 8.379 -2.0251 Tf
(\)) Tx 
(\r) TX 
TO
0 R
0 G
0.5 w
337.0098 -312.3066 m
267.1543 -312.3066 L
267.1543 -279.4766 L
337.0098 -279.4766 L
337.0098 -312.3066 L
s
U
u
0 To
1 0 0 1 170.2563 -50.9678 0 Tp
0 Tv
TP
-25.7579 0 Td
0 Tr
0 O
0 g
1 w
(Entry or map\r) Tx 
6.9929 -10 Td
(not found) Tx 
(\r) TX 
TO
u
200.4365 -67.2041 m
196.6689 -71.9717 L
192.9023 -67.2041 L
200.4365 -67.2041 L
f
/BBAccumRotation (-3.926992) XT
0 R
0 G
0.5 w
143.8755 -73.0337 m
143.8755 -63.9902 L
196.6729 -63.9902 L
196.6729 -67.5337 L
S
U
U
u
0 To
1 0 0 1 82.4053 -60.9678 0 Tp
0 Tv
TP
-9.5039 0 Td
0 Tr
0 O
0 g
1 w
(Not /) Tx 
(\r) TX 
TO
u
112.5786 -67.2041 m
108.8101 -71.9717 L
105.0435 -67.2041 L
112.5786 -67.2041 L
f
/BBAccumRotation (-3.926992) XT
0 R
0 G
0.5 w
56.022 -73.0337 m
56.022 -63.9902 L
108.8149 -63.9902 L
108.8149 -67.5337 L
S
U
U
0 O
0 g
1 w
305.8604 -67.2041 m
302.0918 -71.9717 L
298.3262 -67.2041 L
305.8604 -67.2041 L
f
/BBAccumRotation (-3.926992) XT
u
0 To
1 0 0 1 266.8555 -50.9678 0 Tp
0 Tv
TP
-25.7579 0 Td
0 Tr
(Entry or map\r) Tx 
6.9929 -10 Td
(not found) Tx 
(\r) TX 
TO
0 R
0 G
0.5 w
231.6113 -73.0337 m
231.6113 -63.9902 L
302.0977 -63.9902 L
302.0977 -67.5337 L
S
U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_typography_AI5 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
